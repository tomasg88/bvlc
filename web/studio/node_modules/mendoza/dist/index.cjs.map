{"version":3,"file":"index.cjs","sources":["../src/internal-patcher.ts","../src/utf8.ts","../src/incremental-patcher.ts","../src/simple-patcher.ts"],"sourcesContent":["import {ObjectModel} from './object-model'\nimport {RawPatch} from './patch'\n\nconst OPS = [\n  'Value',\n  'Copy',\n  'Blank',\n  'ReturnIntoArray',\n  'ReturnIntoObject',\n  'ReturnIntoObjectSameKey',\n  'PushField',\n  'PushElement',\n  'PushParent',\n  'Pop',\n  'PushFieldCopy',\n  'PushFieldBlank',\n  'PushElementCopy',\n  'PushElementBlank',\n  'ReturnIntoObjectPop',\n  'ReturnIntoObjectSameKeyPop',\n  'ReturnIntoArrayPop',\n  'ObjectSetFieldValue',\n  'ObjectCopyField',\n  'ObjectDeleteField',\n  'ArrayAppendValue',\n  'ArrayAppendSlice',\n  'StringAppendString',\n  'StringAppendSlice',\n]\n\ntype InputEntry<V> = {\n  value: V\n  key?: string\n  keys?: string[]\n}\n\ntype OutputEntry<V, S, O, A> = {\n  value: V | null\n  writeValue?: S | O | A\n}\n\nexport class Patcher<V, S, O, A> {\n  model: ObjectModel<V, S, O, A>\n  root: V\n  patch: RawPatch\n  i: number\n  inputStack: InputEntry<V>[]\n  outputStack: OutputEntry<V, S, O, A>[]\n\n  constructor(model: ObjectModel<V, S, O, A>, root: V, patch: RawPatch) {\n    this.model = model\n    this.root = root\n    this.patch = patch\n    this.i = 0\n    this.inputStack = []\n    this.outputStack = []\n  }\n\n  read(): unknown {\n    return this.patch[this.i++]\n  }\n\n  process() {\n    this.inputStack.push({value: this.root})\n    this.outputStack.push({value: this.root})\n\n    for (; this.i < this.patch.length; ) {\n      let opcode = this.read() as number\n      let op = OPS[opcode]\n      if (!op) throw new Error(`Unknown opcode: ${opcode}`)\n      let processor = `process${op}`\n      ;(this as any)[processor].apply(this)\n    }\n\n    let entry = this.outputStack.pop()!\n    return this.finalizeOutput(entry)\n  }\n\n  inputEntry(): InputEntry<V> {\n    return this.inputStack[this.inputStack.length - 1]\n  }\n\n  inputKey(entry: InputEntry<V>, idx: number): string {\n    if (!entry.keys) {\n      entry.keys = this.model.objectGetKeys(entry.value).sort()\n    }\n\n    return entry.keys[idx]\n  }\n\n  outputEntry(): OutputEntry<V, S, O, A> {\n    return this.outputStack[this.outputStack.length - 1]\n  }\n\n  outputArray(): A {\n    let entry = this.outputEntry()\n\n    if (!entry.writeValue) {\n      entry.writeValue = this.model.copyArray(entry.value)\n    }\n\n    return entry.writeValue as A\n  }\n\n  outputObject(): O {\n    let entry = this.outputEntry()\n\n    if (!entry.writeValue) {\n      entry.writeValue = this.model.copyObject(entry.value)\n    }\n\n    return entry.writeValue as O\n  }\n\n  outputString(): S {\n    let entry = this.outputEntry()\n\n    if (!entry.writeValue) {\n      entry.writeValue = this.model.copyString(entry.value)\n    }\n\n    return entry.writeValue as S\n  }\n\n  finalizeOutput(entry: OutputEntry<V, S, O, A>): V {\n    if (entry.writeValue) {\n      return this.model.finalize(entry.writeValue)\n    } else {\n      return entry.value!\n    }\n  }\n\n  // Processors:\n\n  processValue() {\n    let value = this.model.wrap(this.read())\n    this.outputStack.push({value})\n  }\n\n  processCopy() {\n    let input = this.inputEntry()\n    this.outputStack.push({value: input.value})\n  }\n\n  processBlank() {\n    this.outputStack.push({value: null})\n  }\n\n  processReturnIntoArray() {\n    let entry = this.outputStack.pop()!\n    let result = this.finalizeOutput(entry)\n    let arr = this.outputArray()\n    this.model.arrayAppendValue(arr, result)\n  }\n\n  processReturnIntoObject() {\n    let key = this.read() as string\n    let entry = this.outputStack.pop()!\n    let result = this.finalizeOutput(entry)\n    result = this.model.markChanged(result)\n    let obj = this.outputObject()\n    this.model.objectSetField(obj, key, result)\n  }\n\n  processReturnIntoObjectSameKey() {\n    let input = this.inputEntry()\n    let entry = this.outputStack.pop()!\n    let result = this.finalizeOutput(entry)\n    let obj = this.outputObject()\n    this.model.objectSetField(obj, input.key!, result)\n  }\n\n  processPushField() {\n    let idx = this.read() as number\n    let entry = this.inputEntry()\n    let key = this.inputKey(entry, idx)\n    let value = this.model.objectGetField(entry.value, key)\n    this.inputStack.push({value, key})\n  }\n\n  processPushElement() {\n    let idx = this.read() as number\n    let entry = this.inputEntry()\n    let value = this.model.arrayGetElement(entry.value, idx)\n    this.inputStack.push({value})\n  }\n\n  processPop() {\n    this.inputStack.pop()\n  }\n\n  processPushFieldCopy() {\n    this.processPushField()\n    this.processCopy()\n  }\n\n  processPushFieldBlank() {\n    this.processPushField()\n    this.processBlank()\n  }\n\n  processPushElementCopy() {\n    this.processPushElement()\n    this.processCopy()\n  }\n\n  processPushElementBlank() {\n    this.processPushElement()\n    this.processBlank()\n  }\n\n  processReturnIntoObjectPop() {\n    this.processReturnIntoObject()\n    this.processPop()\n  }\n\n  processReturnIntoObjectSameKeyPop() {\n    this.processReturnIntoObjectSameKey()\n    this.processPop()\n  }\n\n  processReturnIntoArrayPop() {\n    this.processReturnIntoArray()\n    this.processPop()\n  }\n\n  processObjectSetFieldValue() {\n    this.processValue()\n    this.processReturnIntoObject()\n  }\n\n  processObjectCopyField() {\n    this.processPushField()\n    this.processCopy()\n    this.processReturnIntoObjectSameKey()\n    this.processPop()\n  }\n\n  processObjectDeleteField() {\n    let idx = this.read() as number\n    let entry = this.inputEntry()\n    let key = this.inputKey(entry, idx)\n    let obj = this.outputObject()\n    this.model.objectDeleteField(obj, key)\n  }\n\n  processArrayAppendValue() {\n    let value = this.model.wrap(this.read())\n    let arr = this.outputArray()\n    this.model.arrayAppendValue(arr, value)\n  }\n\n  processArrayAppendSlice() {\n    let left = this.read() as number\n    let right = this.read() as number\n    let str = this.outputArray()\n    let val = this.inputEntry().value\n    this.model.arrayAppendSlice(str, val, left, right)\n  }\n\n  processStringAppendString() {\n    let value = this.model.wrap(this.read())\n    let str = this.outputString()\n    this.model.stringAppendValue(str, value)\n  }\n\n  processStringAppendSlice() {\n    let left = this.read() as number\n    let right = this.read() as number\n    let str = this.outputString()\n    let val = this.inputEntry().value\n    this.model.stringAppendSlice(str, val, left, right)\n  }\n}\n","export function utf8charSize(code: number): 1 | 2 | 3 | 4 {\n  if (code >> 16) {\n    return 4\n  } else if (code >> 11) {\n    return 3\n  } else if (code >> 7) {\n    return 2\n  } else {\n    return 1\n  }\n}\n\nexport function utf8stringSize(str: string): number {\n  let b = 0\n  for (let i = 0; i < str.length; i++) {\n    let code = str.codePointAt(i)!\n    let size = utf8charSize(code)\n    if (size == 4) i++\n    b += size\n  }\n  return b\n}\n\n/** Converts an UTF-8 byte index into a UCS-2 index. */\nexport function utf8resolveIndex(str: string, idx: number, start = 0) {\n  let byteCount = start\n  let ucsIdx = 0\n\n  for (ucsIdx = start; byteCount < idx; ucsIdx++) {\n    let code = str.codePointAt(ucsIdx)!\n    let size = utf8charSize(code)\n    if (size === 4) ucsIdx++ // Surrogate pair.\n    byteCount += size\n  }\n\n  return ucsIdx\n}\n\nexport function commonPrefix(str: string, str2: string) {\n  let len = Math.min(str.length, str2.length)\n  let b = 0\n  for (let i = 0; i < len; ) {\n    let aPoint = str.codePointAt(i)!\n    let bPoint = str2.codePointAt(i)!\n    if (aPoint !== bPoint) return b\n    let size = utf8charSize(aPoint)\n    b += size\n    i += size === 4 ? 2 : 1\n  }\n  return b\n}\n\nexport function commonSuffix(str: string, str2: string, prefix: number = 0) {\n  let len = Math.min(str.length, str2.length) - prefix\n  let b = 0\n  for (let i = 0; i < len; ) {\n    let aPoint = str.codePointAt(str.length - 1 - i)!\n    let bPoint = str2.codePointAt(str2.length - 1 - i)!\n    if (aPoint !== bPoint) return b\n    let size = utf8charSize(aPoint)\n    b += size\n    i += size === 4 ? 2 : 1\n  }\n  return b\n}\n","import {Patcher} from './internal-patcher'\nimport type {ObjectModel} from './object-model'\nimport type {RawPatch} from './patch'\nimport {commonPrefix, commonSuffix, utf8charSize, utf8stringSize} from './utf8'\n\n// The incremental patcher allows you to apply multiple patches and tracks the history of every element.\n// It also allows you to extract a simple diff between the documents.\n\nexport type Value<T> = {\n  data?: unknown\n  content?: Content<T>\n  startMeta: T\n  endMeta: T\n}\n\nexport type Type = 'array' | 'string' | 'object' | 'number' | 'boolean' | 'null'\n\nexport type Content<T> = ObjectContent<T> | ArrayContent<T> | StringContent<T>\n\nexport type ObjectContent<T> = {\n  type: 'object'\n  fields: {[key: string]: Value<T>}\n}\n\nexport type ArrayContent<T> = {\n  type: 'array'\n  elements: Value<T>[]\n  metas: T[]\n}\n\nexport type StringContent<T> = {\n  type: 'string'\n  parts: StringPart<T>[]\n}\n\nexport type StringPart<T> = {\n  value: string\n  utf8size: number\n  uses: StringContent<T>[]\n  startMeta: T\n  endMeta: T\n}\n\nclass IncrementalModel<T>\n  implements ObjectModel<Value<T>, StringContent<T>, ObjectContent<T>, ArrayContent<T>>\n{\n  meta: T\n\n  constructor(meta: T) {\n    this.meta = meta\n  }\n\n  wrap(data: unknown): Value<T> {\n    return this.wrapWithMeta(data, this.meta, this.meta)\n  }\n\n  wrapWithMeta(data: unknown, startMeta: T, endMeta: T = this.meta): Value<T> {\n    return {data, startMeta, endMeta}\n  }\n\n  asObject(value: Value<T>): ObjectContent<T> {\n    if (!value.content) {\n      let fields: ObjectContent<T>['fields'] = {}\n      for (let [key, val] of Object.entries(value.data as any)) {\n        fields[key] = this.wrapWithMeta(val, value.startMeta)\n      }\n      value.content = {type: 'object', fields}\n    }\n\n    return value.content as ObjectContent<T>\n  }\n\n  asArray(value: Value<T>): ArrayContent<T> {\n    if (!value.content) {\n      let elements = (value.data as unknown[]).map((item) =>\n        this.wrapWithMeta(item, value.startMeta),\n      )\n      let metas = elements.map(() => this.meta)\n      value.content = {type: 'array', elements, metas}\n    }\n\n    return value.content as ArrayContent<T>\n  }\n\n  asString(value: Value<T>): StringContent<T> {\n    if (!value.content) {\n      let str = value.data as string\n\n      let part: StringPart<T> = {\n        value: str,\n        utf8size: utf8stringSize(str),\n        uses: [],\n        startMeta: value.startMeta,\n        endMeta: value.endMeta,\n      }\n      value.content = this.stringFromParts([part])\n    }\n\n    return value.content as StringContent<T>\n  }\n\n  stringFromParts(parts: StringPart<T>[]): StringContent<T> {\n    let str: StringContent<T> = {\n      type: 'string',\n      parts,\n    }\n\n    for (let part of parts) {\n      part.uses.push(str)\n    }\n\n    return str\n  }\n\n  objectGetKeys(value: Value<T>): string[] {\n    if (value.content) {\n      return Object.keys((value.content as ObjectContent<T>).fields)\n    } else {\n      return Object.keys(value.data as any)\n    }\n  }\n\n  objectGetField(value: Value<T>, key: string): Value<T> {\n    let obj = this.asObject(value)\n    return obj.fields[key]\n  }\n\n  arrayGetElement(value: Value<T>, idx: number): Value<T> {\n    let arr = this.asArray(value)\n    return arr.elements[idx]\n  }\n\n  finalize(content: Content<T>): Value<T> {\n    this.updateEndMeta(content)\n    return {content, startMeta: this.meta, endMeta: this.meta}\n  }\n\n  markChanged(value: Value<T>): Value<T> {\n    return this.wrap(unwrap(value))\n  }\n\n  updateEndMeta(content: Content<T>) {\n    if (content.type == 'string') {\n      for (let part of content.parts) {\n        part.endMeta = this.meta\n      }\n    } else {\n      if (content.type === 'array') {\n        for (let val of content.elements) {\n          if (val.content && val.endMeta !== this.meta) {\n            this.updateEndMeta(val.content)\n          }\n          val.endMeta = this.meta\n        }\n      } else {\n        for (let val of Object.values(content.fields)) {\n          if (val.content && val.endMeta !== this.meta) {\n            this.updateEndMeta(val.content)\n          }\n          val.endMeta = this.meta\n        }\n      }\n    }\n  }\n\n  copyString(value: Value<T> | null): StringContent<T> {\n    if (value) {\n      let other = this.asString(value)\n      return this.stringFromParts(other.parts.slice())\n    } else {\n      return {\n        type: 'string',\n        parts: [],\n      }\n    }\n  }\n\n  copyObject(value: Value<T> | null): ObjectContent<T> {\n    let obj: ObjectContent<T> = {\n      type: 'object',\n      fields: {},\n    }\n\n    if (value) {\n      let other = this.asObject(value)\n      Object.assign(obj.fields, other.fields)\n    }\n\n    return obj\n  }\n\n  copyArray(value: Value<T> | null): ArrayContent<T> {\n    let arr = value ? this.asArray(value) : null\n    let elements = arr ? arr.elements : []\n    let metas = arr ? arr.metas : []\n\n    return {\n      type: 'array',\n      elements,\n      metas,\n    }\n  }\n\n  objectSetField(target: ObjectContent<T>, key: string, value: Value<T>): void {\n    target.fields[key] = value\n  }\n\n  objectDeleteField(target: ObjectContent<T>, key: string): void {\n    delete target.fields[key]\n  }\n\n  arrayAppendValue(target: ArrayContent<T>, value: Value<T>): void {\n    target.elements.push(value)\n    target.metas.push(this.meta)\n  }\n\n  arrayAppendSlice(target: ArrayContent<T>, source: Value<T>, left: number, right: number): void {\n    let arr = this.asArray(source)\n    let samePosition = arr.elements.length === left\n\n    target.elements.push(...arr.elements.slice(left, right))\n\n    if (samePosition) {\n      target.metas.push(...arr.metas.slice(left, right))\n    } else {\n      for (let i = left; i < right; i++) {\n        target.metas.push(this.meta)\n      }\n    }\n  }\n\n  stringAppendValue(target: StringContent<T>, value: Value<T>): void {\n    let str = this.asString(value)\n    for (let part of str.parts) {\n      this.stringAppendPart(target, part)\n    }\n  }\n\n  stringAppendPart(target: StringContent<T>, part: StringPart<T>): void {\n    target.parts.push(part)\n    part.uses.push(target)\n  }\n\n  resolveStringPart(str: StringContent<T>, from: number, len: number): number {\n    if (len === 0) return from\n\n    for (let i = from; i < str.parts.length; i++) {\n      let part = str.parts[i]\n\n      if (len === part.utf8size) {\n        // Matches perfect!\n        return i + 1\n      }\n\n      if (len < part.utf8size) {\n        // It's a part of this chunk. We now need to split it up.\n        this.splitString(part, len)\n        return i + 1\n      }\n\n      len -= part.utf8size\n    }\n\n    throw new Error('splitting string out of bounds')\n  }\n\n  splitString(part: StringPart<T>, idx: number) {\n    let leftValue\n    let rightValue\n    let leftSize = idx\n    let rightSize = part.utf8size - leftSize\n\n    // idx is here in UTF-8 index, not codepoint index.\n    // This means we might to adjust for multi-byte characters.\n    if (part.utf8size !== part.value.length) {\n      let byteCount = 0\n\n      for (idx = 0; byteCount < leftSize; idx++) {\n        let code = part.value.codePointAt(idx)!\n        let size = utf8charSize(code)\n        if (size === 4) idx++ // Surrogate pair.\n        byteCount += size\n      }\n    }\n\n    leftValue = part.value.slice(0, idx)\n    rightValue = part.value.slice(idx)\n\n    let newPart: StringPart<T> = {\n      value: rightValue,\n      utf8size: rightSize,\n      uses: part.uses.slice(),\n      startMeta: part.startMeta,\n      endMeta: part.endMeta,\n    }\n\n    part.value = leftValue\n    part.utf8size = leftSize\n\n    for (let use of part.uses) {\n      // Insert the new part.\n      let ndx = use.parts.indexOf(part)\n      if (ndx === -1) throw new Error('bug: mismatch between string parts and use.')\n      use.parts.splice(ndx + 1, 0, newPart)\n    }\n  }\n\n  stringAppendSlice(target: StringContent<T>, source: Value<T>, left: number, right: number): void {\n    let str = this.asString(source)\n    let firstPart = this.resolveStringPart(str, 0, left)\n    let lastPart = this.resolveStringPart(str, firstPart, right - left)\n\n    for (let i = firstPart; i < lastPart; i++) {\n      let part = str.parts[i]\n      this.stringAppendPart(target, part)\n    }\n  }\n}\n\n// Turns a native JavaScript object into a Value with a given origin.\nexport function wrap<T>(data: unknown, meta: T): Value<T> {\n  return {data, startMeta: meta, endMeta: meta}\n}\n\n// Converts a Value into a native JavaScript type.\nexport function unwrap<T>(value: Value<T>): unknown {\n  if (typeof value.data !== 'undefined') return value.data\n\n  let result: any\n  let content = value.content!\n  switch (content.type) {\n    case 'string':\n      result = content.parts.map((part) => part.value).join('')\n      break\n    case 'array':\n      result = content.elements.map((val) => unwrap(val))\n      break\n    case 'object': {\n      result = {}\n      for (let [key, val] of Object.entries(content.fields)) {\n        result[key] = unwrap(val)\n      }\n    }\n  }\n\n  value.data = result\n  return result\n}\n\n// Returns the type of a Value.\nexport function getType<T>(value: Value<T>): Type {\n  if (value.content) return value.content.type\n  if (Array.isArray(value.data!)) return 'array'\n  if (value.data === null) return 'null'\n\n  return typeof value.data as Type\n}\n\n// Updates the `right` value such that it reuses as much as possible from the `left` value.\nexport function rebaseValue<T>(left: Value<T>, right: Value<T>): Value<T> {\n  let leftType = getType(left)\n  let rightType = getType(right)\n  if (leftType !== rightType) return right\n\n  let leftModel = new IncrementalModel(left.endMeta)\n  let rightModel = new IncrementalModel(right.endMeta)\n\n  switch (leftType) {\n    case 'object': {\n      let leftObj = leftModel.asObject(left)\n      let rightObj = rightModel.asObject(right)\n\n      // Number of fields which are identical in left and right.\n      let identicalFieldCount = 0\n      let leftFieldCount = Object.keys(leftObj.fields).length\n      let rightFieldCount = Object.keys(rightObj.fields).length\n\n      for (let [key, rightVal] of Object.entries(rightObj.fields)) {\n        let leftVal = leftObj.fields[key]\n        if (leftVal) {\n          rightObj.fields[key] = rebaseValue(leftVal, rightVal)\n          if (rightObj.fields[key] === leftVal) {\n            identicalFieldCount++\n          }\n        }\n      }\n\n      let isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount\n      return isIdentical ? left : right\n    }\n    case 'array': {\n      let leftArr = leftModel.asArray(left)\n      let rightArr = rightModel.asArray(right)\n\n      if (leftArr.elements.length !== rightArr.elements.length) {\n        break\n      }\n\n      let numRebased = 0\n      for (let i = 0; i < rightArr.elements.length; i++) {\n        rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i])\n        if (rightArr.elements[i] !== leftArr.elements[i]) {\n          numRebased++\n        }\n      }\n\n      return numRebased === 0 ? left : right\n    }\n    case 'null':\n    case 'boolean':\n    case 'number': {\n      if (unwrap(left) === unwrap(right)) return left\n      break\n    }\n    case 'string': {\n      let leftRaw = unwrap(left) as string\n      let rightRaw = unwrap(right) as string\n      if (leftRaw === rightRaw) return left\n\n      let result = rightModel.copyString(null)\n      let prefix = commonPrefix(leftRaw, rightRaw)\n      let suffix = commonSuffix(leftRaw, rightRaw, prefix)\n\n      let rightLen = utf8stringSize(rightRaw)\n      let leftLen = utf8stringSize(leftRaw)\n\n      if (0 < prefix) {\n        rightModel.stringAppendSlice(result, left, 0, prefix)\n      }\n      if (prefix < rightLen - suffix) {\n        rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix)\n      }\n      if (leftLen - suffix < leftLen) {\n        rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen)\n      }\n      let value = rightModel.finalize(result)\n      if (unwrap(value) !== rightRaw) throw new Error('incorrect string rebase')\n      return value\n    }\n  }\n\n  return right\n}\n\nexport function applyPatch<T>(left: Value<T>, patch: RawPatch, startMeta: T) {\n  let model = new IncrementalModel(startMeta)\n  let patcher = new Patcher(model, left, patch)\n  return patcher.process()\n}\n","import {Patcher} from './internal-patcher'\nimport {ObjectModel} from './object-model'\nimport {RawPatch} from './patch'\nimport {utf8resolveIndex} from './utf8'\n\ntype StringBuilder = {type: 'string'; data: string}\ntype ObjectBuilder = {type: 'object'; data: {[key: string]: unknown}}\ntype ArrayBuilder = unknown[]\n\nclass SimpleModel implements ObjectModel<unknown, StringBuilder, ObjectBuilder, ArrayBuilder> {\n  wrap(data: any): unknown {\n    return data\n  }\n\n  finalize(b: StringBuilder | ObjectBuilder | ArrayBuilder): unknown {\n    if (Array.isArray(b)) {\n      return b\n    } else {\n      return b.data\n    }\n  }\n\n  markChanged(value: unknown) {\n    return value\n  }\n\n  objectGetKeys(value: unknown): string[] {\n    return Object.keys(value as any)\n  }\n\n  objectGetField(value: unknown, key: string): unknown {\n    return (value as any)[key]\n  }\n\n  arrayGetElement(value: unknown, idx: number): unknown {\n    return (value as any[])[idx]\n  }\n\n  copyObject(value: unknown | null): ObjectBuilder {\n    let res: ObjectBuilder = {\n      type: 'object',\n      data: {},\n    }\n    if (value !== null) {\n      for (let [key, val] of Object.entries(value as ObjectBuilder)) {\n        res.data[key] = val\n      }\n    }\n    return res\n  }\n\n  copyArray(value: unknown | null): ArrayBuilder {\n    if (value === null) return []\n    return (value as ArrayBuilder).slice()\n  }\n\n  copyString(value: unknown | null): StringBuilder {\n    return {\n      type: 'string',\n      data: value === null ? '' : (value as string),\n    }\n  }\n\n  objectSetField(target: ObjectBuilder, key: string, value: unknown): void {\n    target.data[key] = value\n  }\n\n  objectDeleteField(target: ObjectBuilder, key: string): void {\n    delete target.data[key]\n  }\n\n  arrayAppendValue(target: ArrayBuilder, value: unknown): void {\n    target.push(value)\n  }\n\n  arrayAppendSlice(target: ArrayBuilder, source: unknown, left: number, right: number): void {\n    target.push(...(source as ArrayBuilder).slice(left, right))\n  }\n\n  stringAppendSlice(target: StringBuilder, source: unknown, left: number, right: number): void {\n    const sourceString = source as string\n\n    const leftPos = utf8resolveIndex(sourceString, left)\n    const rightPos = utf8resolveIndex(sourceString, right, leftPos)\n\n    target.data += sourceString.slice(leftPos, rightPos)\n  }\n\n  stringAppendValue(target: StringBuilder, value: unknown): void {\n    target.data += value as string\n  }\n}\n\n// Applies a patch on a JavaScript object.\nexport function applyPatch(left: any, patch: RawPatch): any {\n  let root = left // No need to wrap because the representation is the same.\n  let patcher = new Patcher(new SimpleModel(), root, patch)\n  return patcher.process()\n}\n"],"names":["OPS","Patcher","constructor","model","root","patch","__publicField","i","inputStack","outputStack","read","process","push","value","length","opcode","op","Error","concat","processor","apply","entry","pop","finalizeOutput","inputEntry","inputKey","idx","keys","objectGetKeys","sort","outputEntry","outputArray","writeValue","copyArray","outputObject","copyObject","outputString","copyString","finalize","processValue","wrap","processCopy","input","processBlank","processReturnIntoArray","result","arr","arrayAppendValue","processReturnIntoObject","key","markChanged","obj","objectSetField","processReturnIntoObjectSameKey","processPushField","objectGetField","processPushElement","arrayGetElement","processPop","processPushFieldCopy","processPushFieldBlank","processPushElementCopy","processPushElementBlank","processReturnIntoObjectPop","processReturnIntoObjectSameKeyPop","processReturnIntoArrayPop","processObjectSetFieldValue","processObjectCopyField","processObjectDeleteField","objectDeleteField","processArrayAppendValue","processArrayAppendSlice","left","right","str","val","arrayAppendSlice","processStringAppendString","stringAppendValue","processStringAppendSlice","stringAppendSlice","utf8charSize","code","utf8stringSize","b","codePointAt","size","utf8resolveIndex","start","arguments","undefined","byteCount","ucsIdx","commonPrefix","str2","len","Math","min","aPoint","bPoint","commonSuffix","prefix","IncrementalModel","meta","data","wrapWithMeta","startMeta","endMeta","asObject","content","fields","Object","entries","type","asArray","elements","map","item","metas","asString","part","utf8size","uses","stringFromParts","parts","updateEndMeta","unwrap","values","other","slice","assign","target","source","samePosition","stringAppendPart","resolveStringPart","from","splitString","leftValue","rightValue","leftSize","rightSize","newPart","use","ndx","indexOf","splice","firstPart","lastPart","join","getType","Array","isArray","rebaseValue","leftType","rightType","leftModel","rightModel","leftObj","rightObj","identicalFieldCount","leftFieldCount","rightFieldCount","rightVal","leftVal","isIdentical","leftArr","rightArr","numRebased","leftRaw","rightRaw","suffix","rightLen","leftLen","applyPatch","applyPatch$1","patcher","SimpleModel","res","sourceString","leftPos","rightPos"],"mappings":"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"}