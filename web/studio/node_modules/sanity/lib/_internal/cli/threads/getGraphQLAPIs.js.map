{"version":3,"file":"getGraphQLAPIs.js","sources":["../../../../src/_internal/cli/util/getStudioConfig.ts","../../../../src/_internal/cli/threads/getGraphQLAPIs.ts"],"sourcesContent":["/* eslint-disable no-sync */\nimport fs from 'fs'\nimport path from 'path'\nimport {first} from 'rxjs/operators'\nimport {firstValueFrom} from 'rxjs'\nimport {mockBrowserEnvironment} from './mockBrowserEnvironment'\nimport {resolveConfig, Config, Workspace} from 'sanity'\n\nconst candidates = [\n  'sanity.config.js',\n  'sanity.config.jsx',\n  'sanity.config.ts',\n  'sanity.config.tsx',\n]\n\n/**\n * Note: Don't run this on the main thread, use it a forked process\n */\nexport async function getStudioConfig(options: {\n  configPath?: string\n  basePath: string\n}): Promise<Workspace[]> {\n  let workspaces: Workspace[] | undefined\n\n  const {basePath, configPath: cfgPath} = options\n\n  let cleanup\n  try {\n    cleanup = mockBrowserEnvironment(basePath)\n\n    let configPath = cfgPath\n    if (configPath && !fs.existsSync(configPath)) {\n      throw new Error(`Failed to find config at \"${cfgPath}\"`)\n    } else if (!configPath) {\n      configPath = candidates\n        .map((candidate) => path.join(basePath, candidate))\n        .find((candidate) => fs.existsSync(candidate))\n    }\n\n    if (!configPath) {\n      throw new Error(`Failed to resolve sanity.config.(js|ts) for base path \"${basePath}\"`)\n    }\n\n    let config: Config | undefined\n    try {\n      // eslint-disable-next-line import/no-dynamic-require\n      const mod = require(configPath)\n      config = mod.__esModule && mod.default ? mod.default : mod\n    } catch (err) {\n      throw new Error(`Failed to load configuration file \"${configPath}\":\\n${err.message}`)\n    }\n\n    if (!config) {\n      throw new Error('Configuration did not export expected config shape')\n    }\n\n    workspaces = await firstValueFrom(resolveConfig(config))\n  } catch (error) {\n    if (cleanup) {\n      cleanup()\n    }\n\n    throw error\n  }\n\n  cleanup()\n\n  if (!workspaces) {\n    throw new Error('Failed to resolve configuration')\n  }\n\n  return workspaces\n}\n","import {isMainThread, parentPort, workerData, MessagePort} from 'worker_threads'\nimport oneline from 'oneline'\nimport {isPlainObject} from 'lodash'\nimport type {Schema} from '@sanity/types'\nimport type {CliV3CommandContext, GraphQLAPIConfig} from '@sanity/cli'\nimport type {SchemaDefinitionish, TypeResolvedGraphQLAPI} from '../actions/graphql/types'\nimport {getStudioConfig} from '../util/getStudioConfig'\nimport {Workspace} from 'sanity'\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\ngetGraphQLAPIsForked(parentPort)\n\nasync function getGraphQLAPIsForked(parent: MessagePort): Promise<void> {\n  const {cliConfig, cliConfigPath, workDir} = workerData\n  const resolved = await resolveGraphQLApis({cliConfig, cliConfigPath, workDir})\n  parent.postMessage(resolved)\n}\n\nasync function resolveGraphQLApis({\n  cliConfig,\n  cliConfigPath,\n  workDir,\n}: Pick<CliV3CommandContext, 'cliConfig' | 'cliConfigPath' | 'workDir'>): Promise<\n  TypeResolvedGraphQLAPI[]\n> {\n  const workspaces = await getStudioConfig({basePath: workDir})\n  const numSources = workspaces.reduce(\n    (count, workspace) => count + workspace.unstable_sources.length,\n    0,\n  )\n  const multiSource = numSources > 1\n  const multiWorkspace = workspaces.length > 1\n  const hasGraphQLConfig = Boolean(cliConfig?.graphql)\n\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (numSources === 0) {\n    throw new Error('No sources (project ID / dataset) configured')\n  }\n\n  // We can only automatically configure if there is a single workspace + source in play\n  if ((multiWorkspace || multiSource) && !hasGraphQLConfig) {\n    throw new Error(oneline`\n      Multiple workspaces/sources configured.\n      You must define an array of GraphQL APIs in ${cliConfigPath || 'sanity.cli.js'}\n      and specify which workspace/source to use.\n    `)\n  }\n\n  // No config is defined, but we have a single workspace + source, so use that\n  if (!hasGraphQLConfig) {\n    const {projectId, dataset, schema} = workspaces[0].unstable_sources[0]\n    return [{schemaTypes: getStrippedSchemaTypes(schema), projectId, dataset}]\n  }\n\n  // Explicity defined config\n  const apiDefs = validateCliConfig(cliConfig?.graphql || [])\n  return resolveGraphQLAPIsFromConfig(apiDefs, workspaces)\n}\n\nfunction resolveGraphQLAPIsFromConfig(\n  apiDefs: GraphQLAPIConfig[],\n  workspaces: Workspace[],\n): TypeResolvedGraphQLAPI[] {\n  const resolvedApis: TypeResolvedGraphQLAPI[] = []\n\n  for (const apiDef of apiDefs) {\n    const {workspace: workspaceName, source: sourceName} = apiDef\n    if (!workspaceName && workspaces.length > 1) {\n      throw new Error(\n        'Must define `workspace` name in GraphQL API config when multiple workspaces are defined',\n      )\n    }\n\n    // If we only have a single workspace defined, we can assume that is the intended one,\n    // even if no `workspace` is defined for the GraphQL API\n    const workspace =\n      !workspaceName && workspaces.length === 1\n        ? workspaces[0]\n        : workspaces.find((space) => space.name === (workspaceName || 'default'))\n\n    if (!workspace) {\n      throw new Error(`Workspace \"${workspaceName || 'default'}\" not found`)\n    }\n\n    // If we only have a single source defined, we can assume that is the intended one,\n    // even if no `source` is defined for the GraphQL API\n    const source =\n      !sourceName && workspace.unstable_sources.length === 1\n        ? workspace.unstable_sources[0]\n        : workspace.unstable_sources.find((src) => src.name === (sourceName || 'default'))\n\n    if (!source) {\n      throw new Error(\n        `Source \"${sourceName || 'default'}\" not found in workspace \"${\n          workspaceName || 'default'\n        }\"`,\n      )\n    }\n\n    resolvedApis.push({\n      ...apiDef,\n      dataset: source.dataset,\n      projectId: source.projectId,\n      schemaTypes: getStrippedSchemaTypes(source.schema),\n    })\n  }\n\n  return resolvedApis\n}\n\nfunction validateCliConfig(\n  config: GraphQLAPIConfig[],\n  configPath = 'sanity.cli.js',\n): GraphQLAPIConfig[] {\n  if (!Array.isArray(config)) {\n    throw new Error(`\"graphql\" key in \"${configPath}\" must be an array if defined`)\n  }\n\n  if (config.length === 0) {\n    throw new Error(`No GraphQL APIs defined in \"${configPath}\"`)\n  }\n\n  return config\n}\n\nfunction getStrippedSchemaTypes(schema: Schema): SchemaDefinitionish[] {\n  const schemaDef = schema._original || {types: []}\n  return schemaDef.types.map((type) => stripType(type))\n}\n\nfunction stripType(input: unknown): SchemaDefinitionish {\n  return strip(input) as SchemaDefinitionish\n}\n\nfunction strip(input: unknown): unknown {\n  if (Array.isArray(input)) {\n    return input.map((item) => strip(item)).filter((item) => typeof item !== 'undefined')\n  }\n\n  if (isPlainishObject(input)) {\n    return Object.keys(input).reduce(\n      (stripped, key) => {\n        stripped[key] = strip(input[key])\n        return stripped\n      },\n      {} as Record<string, unknown>,\n    )\n  }\n\n  return isBasicType(input) ? input : undefined\n}\n\nfunction isPlainishObject(input: unknown): input is Record<string, unknown> {\n  return isPlainObject(input)\n}\n\nfunction isBasicType(input: unknown): boolean {\n  const type = typeof input\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return true\n  }\n\n  if (type !== 'object') {\n    return false\n  }\n\n  return Array.isArray(input) || input === null || isPlainishObject(input)\n}\n"],"names":["candidates","getStudioConfig","options","workspaces","basePath","configPath","cfgPath","cleanup","mockBrowserEnvironment","fs","existsSync","Error","concat","map","candidate","path","join","find","default","config","mod","require","__esModule","err","message","firstValueFrom","resolveConfig","error","_a","isMainThread","parentPort","getGraphQLAPIsForked","parent","cliConfig","cliConfigPath","workDir","workerData","resolved","resolveGraphQLApis","postMessage","_ref","numSources","reduce","count","workspace","unstable_sources","length","multiSource","multiWorkspace","hasGraphQLConfig","Boolean","graphql","oneline","__template","projectId","dataset","schema","schemaTypes","getStrippedSchemaTypes","apiDefs","validateCliConfig","resolveGraphQLAPIsFromConfig","resolvedApis","apiDef","workspaceName","source","sourceName","space","name","src","push","arguments","undefined","Array","isArray","schemaDef","_original","types","type","stripType","input","strip","item","filter","isPlainishObject","Object","keys","stripped","key","isBasicType","isPlainObject"],"mappings":"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"}