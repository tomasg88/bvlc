'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var ui = require('@sanity/ui');
var shallowEquals = require('shallow-equals');
var isEqual = require('lodash/isEqual.js');
var icons = require('@sanity/icons');
var styled = require('styled-components');
var rxjs = require('rxjs');
var reactRx = require('react-rx');
var sanity = require('sanity');
require('sanity/router');
var desk = require('./desk-f09bfc72.js');
var index = require('./index-f3459dbe.js');
var PathUtils = require('@sanity/util/paths');
var types = require('@sanity/types');
var PaneItem = require('./PaneItem-446430aa.js');
require('lodash/omit.js');
require('lodash/isNumber.js');
require('lodash/isString.js');
var operators = require('rxjs/operators');
var rxjsExhaustmapWithTrailing = require('rxjs-exhaustmap-with-trailing');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}
var shallowEquals__default = /*#__PURE__*/_interopDefaultCompat(shallowEquals);
var isEqual__default = /*#__PURE__*/_interopDefaultCompat(isEqual);
var styled__default = /*#__PURE__*/_interopDefaultCompat(styled);
var PathUtils__namespace = /*#__PURE__*/_interopNamespaceCompat(PathUtils);
const PARTIAL_PAGE_LIMIT = 100;
const FULL_LIST_LIMIT = 2e3;
const DEFAULT_ORDERING = {
  by: [{
    field: "_updatedAt",
    direction: "desc"
  }]
};
const EMPTY_RECORD = {};
function removePublishedWithDrafts(documents) {
  return sanity.collate(documents).map(entry => {
    const doc = entry.draft || entry.published;
    return {
      ...doc,
      hasPublished: !!entry.published,
      hasDraft: !!entry.draft
    };
  });
}
const RE_TYPE_NAME_IN_FILTER = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type\b/;
function getTypeNameFromSingleTypeFilter(filter) {
  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const matches = filter.match(RE_TYPE_NAME_IN_FILTER);
  if (!matches) {
    return null;
  }
  const match = (matches[1] || matches[2]).trim().replace(/^["']|["']$/g, "");
  if (match[0] === "$") {
    const k = match.slice(1);
    const v = params[k];
    return typeof v === "string" ? v : null;
  }
  return match;
}
function isSimpleTypeFilter(filter) {
  return /^_type\s*==\s*['"$]\w+['"]?\s*$/.test(filter.trim());
}
function applyOrderingFunctions(order, schemaType) {
  const orderBy = order.by.map(by => {
    if (by.mapWith) {
      return by;
    }
    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field);
    if (!fieldType) {
      return by;
    }
    if (fieldExtendsType(fieldType, "datetime")) {
      return {
        ...by,
        mapWith: "dateTime"
      };
    }
    if (fieldType.jsonType === "string") {
      return {
        ...by,
        mapWith: "lower"
      };
    }
    return by;
  });
  return orderBy.every((item, index) => item === order.by[index]) ? order : {
    ...order,
    by: orderBy
  };
}
function tryResolveSchemaTypeForPath(baseType, path) {
  const pathSegments = PathUtils__namespace.fromString(path);
  let current = baseType;
  for (const segment of pathSegments) {
    if (!current) {
      return void 0;
    }
    if (typeof segment === "string") {
      current = getFieldTypeByName(current, segment);
      continue;
    }
    const isArrayAccessor = types.isKeySegment(segment) || types.isIndexSegment(segment);
    if (!isArrayAccessor || current.jsonType !== "array") {
      return void 0;
    }
    const [memberType, otherType] = current.of || [];
    if (otherType || !memberType) {
      return void 0;
    }
    if (!types.isReferenceSchemaType(memberType)) {
      current = memberType;
      continue;
    }
    const [refType, otherRefType] = memberType.to || [];
    if (otherRefType || !refType) {
      return void 0;
    }
    current = refType;
  }
  return current;
}
function getFieldTypeByName(type, fieldName) {
  if (!("fields" in type)) {
    return void 0;
  }
  const fieldType = type.fields.find(field => field.name === fieldName);
  return fieldType ? fieldType.type : void 0;
}
function fieldExtendsType(field, ofType) {
  let current = field.type;
  while (current) {
    if (current.name === ofType) {
      return true;
    }
    if (!current.type && current.jsonType === ofType) {
      return true;
    }
    current = current.type;
  }
  return false;
}
var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", {
  value: __freeze$1(raw || cooked.slice())
}));
var _a$1, _b$1;
const RootBox = styled__default.default(ui.Box)(_a$1 || (_a$1 = __template$1(["\n  position: relative;\n"])));
const CommandListBox = styled__default.default(ui.Box)(_b$1 || (_b$1 = __template$1(["\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n"])));
const SKELETON_ITEMS = [...Array(30).keys()];
function LoadingView(props) {
  const {
    layout
  } = props;
  return /* @__PURE__ */jsxRuntime.jsx(ui.Stack, {
    padding: 2,
    space: 1,
    children: SKELETON_ITEMS.map(num => /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
      padding: 2,
      children: /* @__PURE__ */jsxRuntime.jsx(sanity.SanityDefaultPreview, {
        isPlaceholder: true,
        layout
      })
    }, num))
  });
}
function DocumentListPaneContent(props) {
  const {
    childItemId,
    error,
    filterIsSimpleTypeConstraint,
    hasMaxItems,
    hasSearchQuery,
    isActive,
    isLazyLoading,
    isLoading,
    items,
    layout,
    loadingVariant,
    onListChange,
    onRetry,
    paneTitle,
    searchInputElement,
    showIcons
  } = props;
  const schema = sanity.useSchema();
  const {
    collapsed: layoutCollapsed
  } = desk.usePaneLayout();
  const {
    collapsed,
    index
  } = desk.usePane();
  const [shouldRender, setShouldRender] = React.useState(false);
  const handleEndReached = React.useCallback(() => {
    if (isLoading || isLazyLoading || !shouldRender) return;
    onListChange();
  }, [isLazyLoading, isLoading, onListChange, shouldRender]);
  React.useEffect(() => {
    if (collapsed) return void 0;
    const timer = setTimeout(() => {
      setShouldRender(true);
    }, 0);
    return () => {
      clearTimeout(timer);
    };
  }, [collapsed, items]);
  const renderItem = React.useCallback((item, _ref) => {
    let {
      activeIndex
    } = _ref;
    const publishedId = sanity.getPublishedId(item._id);
    const isSelected = childItemId === publishedId;
    const pressed = !isActive && isSelected;
    const selected = isActive && isSelected;
    const isLastItem = activeIndex === items.length - 1;
    const showSpinner = isLastItem && isLazyLoading;
    const showMaxItemsMessage = isLastItem && hasMaxItems;
    return /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/* @__PURE__ */jsxRuntime.jsx(PaneItem.PaneItem, {
        icon: showIcons === false ? false : void 0,
        id: publishedId,
        layout,
        marginBottom: 1,
        pressed,
        schemaType: schema.get(item._type),
        selected,
        value: item
      }), showSpinner && /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
        align: "center",
        justify: "center",
        padding: 4,
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Spinner, {
          muted: true
        })
      }), showMaxItemsMessage && /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        marginY: 1,
        paddingX: 3,
        paddingY: 4,
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Text, {
          align: "center",
          muted: true,
          size: 1,
          children: ["Displaying a maximum of ", FULL_LIST_LIMIT, " documents"]
        })
      })]
    });
  }, [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading]);
  const noDocumentsContent = React.useMemo(() => {
    if (hasSearchQuery) {
      return /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center",
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Container, {
          width: 1,
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
            paddingX: 4,
            paddingY: 5,
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
              align: "center",
              muted: true,
              children: "No results found"
            })
          })
        })
      });
    }
    return /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
      align: "center",
      direction: "column",
      height: "fill",
      justify: "center",
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Container, {
        width: 1,
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          paddingX: 4,
          paddingY: 5,
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
            align: "center",
            muted: true,
            children: filterIsSimpleTypeConstraint ? "No documents of this type" : "No matching documents"
          })
        })
      })
    });
  }, [filterIsSimpleTypeConstraint, hasSearchQuery]);
  const mainContent = React.useMemo(() => {
    if (!shouldRender) {
      return null;
    }
    if (error) {
      return /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
        align: "center",
        direction: "column",
        height: "fill",
        justify: "center",
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Container, {
          width: 1,
          children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
            paddingX: 4,
            paddingY: 5,
            space: 4,
            children: [/* @__PURE__ */jsxRuntime.jsx(ui.Heading, {
              as: "h3",
              children: "Could not fetch list items"
            }), /* @__PURE__ */jsxRuntime.jsxs(ui.Text, {
              as: "p",
              children: ["Error: ", /* @__PURE__ */jsxRuntime.jsx("code", {
                children: error.message
              })]
            }), onRetry && /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
                icon: icons.SyncIcon,
                onClick: onRetry,
                text: "Retry",
                tone: "primary"
              })
            })]
          })
        })
      });
    }
    if (!isLoading && items.length === 0) {
      return noDocumentsContent;
    }
    if (loadingVariant === "initial" && isLoading) {
      return /* @__PURE__ */jsxRuntime.jsx(desk.Delay, {
        ms: 300,
        children: /* @__PURE__ */jsxRuntime.jsx(LoadingView, {
          layout
        })
      });
    }
    if (loadingVariant === "spinner" && isLoading) {
      return null;
    }
    const key = "".concat(index, "-").concat(collapsed);
    return /* @__PURE__ */jsxRuntime.jsx(RootBox, {
      overflow: "hidden",
      height: "fill",
      children: /* @__PURE__ */jsxRuntime.jsx(CommandListBox, {
        children: /* @__PURE__ */jsxRuntime.jsx(sanity.CommandList, {
          activeItemDataAttr: "data-hovered",
          ariaLabel: paneTitle,
          canReceiveFocus: true,
          focusRingOffset: -3,
          inputElement: searchInputElement,
          itemHeight: 51,
          items,
          onEndReached: handleEndReached,
          onlyShowSelectionWhenActive: true,
          overscan: 10,
          padding: 2,
          paddingBottom: 1,
          renderItem,
          wrapAround: false
        }, key)
      })
    });
  }, [collapsed, error, handleEndReached, index, isLoading, items, layout, loadingVariant,
  // noDocumentsContent,
  onRetry, renderItem, searchInputElement, shouldRender]);
  return /* @__PURE__ */jsxRuntime.jsx(desk.PaneContent, {
    overflow: layoutCollapsed || loadingVariant === "initial" ? "hidden" : "auto",
    children: mainContent
  });
}
const DocumentListPaneHeader = React.memo(_ref2 => {
  let {
    contentAfter,
    index,
    initialValueTemplates = [],
    menuItemGroups = [],
    menuItems = [],
    setLayout,
    setSortOrder,
    title
  } = _ref2;
  const {
    features
  } = desk.useDeskTool();
  const {
    collapsed,
    isLast
  } = desk.usePane();
  const tabIndex = isLast && !collapsed ? -1 : 0;
  const actionHandlers = React.useMemo(() => {
    return {
      setLayout: _ref3 => {
        let {
          layout: value
        } = _ref3;
        setLayout(value);
      },
      setSortOrder: sort => {
        setSortOrder(sort);
      }
    };
  }, [setLayout, setSortOrder]);
  return /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeader, {
    actions: /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeaderActions, {
      initialValueTemplateItems: initialValueTemplates,
      actionHandlers,
      menuItemGroups,
      menuItems
    }),
    backButton: features.backButton && index > 0 && /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
      as: desk.BackLink,
      "data-as": "a",
      icon: icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    contentAfter,
    tabIndex,
    title
  });
});
DocumentListPaneHeader.displayName = "DocumentListPaneHeader";
function listenSearchQuery(options) {
  const {
    client,
    schema,
    sort,
    limit,
    params,
    filter,
    searchQuery,
    staticTypeNames
  } = options;
  const sortBy = sort.by;
  const extendedProjection = sort == null ? void 0 : sort.extendedProjection;
  const events$ = rxjs.defer(() => {
    return client.listen("*[".concat(filter, "]"), params, {
      events: ["welcome", "mutation", "reconnect"],
      includeResult: false,
      visibility: "query"
    });
  }).pipe(rxjs.mergeMap((ev, i) => {
    const isFirst = i === 0;
    if (isFirst && ev.type !== "welcome") {
      return rxjs.throwError(() => new Error(ev.type === "reconnect" ? "Could not establish EventSource connection" : 'Received unexpected type of first event "'.concat(ev.type, '"')));
    }
    return rxjs.of(ev);
  }), rxjs.share());
  const [welcome$, mutationAndReconnect$] = rxjs.partition(events$, ev => ev.type === "welcome");
  return rxjs.merge(welcome$.pipe(rxjs.take(1)), mutationAndReconnect$.pipe(rxjs.throttleTime(1e3, rxjs.asyncScheduler, {
    leading: true,
    trailing: true
  }))).pipe(rxjsExhaustmapWithTrailing.exhaustMapWithTrailing(event => {
    const typeNames$ = staticTypeNames ? rxjs.of(staticTypeNames) : client.observable.fetch("array::unique(*[".concat(filter, "][]._type)"), params);
    return typeNames$.pipe(rxjs.mergeMap(typeNames => {
      const types = typeNames.flatMap(name => schema.get(name) || []);
      const searchTerms = {
        filter,
        query: searchQuery || "",
        types
      };
      const searchOptions = {
        __unstable_extendedProjection: extendedProjection,
        comments: ["findability-source: ".concat(searchQuery ? "list-query" : "list")],
        limit,
        params,
        sort: sortBy
      };
      const {
        query: createdQuery,
        params: createdParams
      } = sanity.createSearchQuery(searchTerms, searchOptions);
      const doFetch = () => client.observable.fetch(createdQuery, createdParams);
      if (event.type === "mutation" && event.visibility !== "query") {
        return rxjs.timer(1200).pipe(rxjs.mergeMap(doFetch));
      }
      return doFetch();
    }));
  }));
}
const EMPTY_ARRAY$1 = [];
const INITIAL_STATE = {
  error: null,
  onRetry: void 0,
  result: null
};
const INITIAL_QUERY_RESULTS = {
  result: null,
  error: null
};
function useDocumentList(opts) {
  const {
    filter,
    params: paramsProp,
    sortOrder,
    searchQuery,
    apiVersion
  } = opts;
  const client = sanity.useClient({
    ...sanity.DEFAULT_STUDIO_CLIENT_OPTIONS,
    apiVersion: apiVersion || sanity.DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion
  });
  const schema = sanity.useSchema();
  const [resultState, setResult] = React.useState(INITIAL_STATE);
  const {
    onRetry,
    error,
    result
  } = resultState;
  const documents = result == null ? void 0 : result.documents;
  const items = React.useMemo(() => documents ? removePublishedWithDrafts(documents) : EMPTY_ARRAY$1, [documents]);
  const [isLazyLoading, setIsLazyLoading] = React.useState(false);
  const [hasFullList, setHasFullList] = React.useState(false);
  const [shouldFetchFullList, setShouldFetchFullList] = React.useState(false);
  const typeNameFromFilter = React.useMemo(() => getTypeNameFromSingleTypeFilter(filter, paramsProp), [filter, paramsProp]);
  const isLoading = result === null && !error;
  const hasMaxItems = (documents == null ? void 0 : documents.length) === FULL_LIST_LIMIT;
  const onListChange = React.useCallback(() => {
    if (isLoading || hasFullList || shouldFetchFullList) return;
    setShouldFetchFullList(true);
  }, [isLoading, hasFullList, shouldFetchFullList]);
  const handleSetResult = React.useCallback(res => {
    var _a, _b;
    if (res.error) {
      setResult(res);
      return;
    }
    const documentsLength = ((_b = (_a = res.result) == null ? void 0 : _a.documents) == null ? void 0 : _b.length) || 0;
    const isLoadingMoreItems = !res.error && (res == null ? void 0 : res.result) === null && shouldFetchFullList;
    if (isLoadingMoreItems) {
      setIsLazyLoading(true);
      return;
    }
    if (documentsLength < PARTIAL_PAGE_LIMIT && documentsLength !== 0 && !shouldFetchFullList) {
      setHasFullList(true);
    }
    if ((res == null ? void 0 : res.result) === null) {
      setResult(prev => ({
        ...(prev.error ? res : prev)
      }));
      return;
    }
    setIsLazyLoading(false);
    setResult(res);
  }, [shouldFetchFullList]);
  const queryResults$ = React.useMemo(() => {
    const onRetry$ = new rxjs.Subject();
    const _onRetry = () => onRetry$.next();
    const limit = shouldFetchFullList ? FULL_LIST_LIMIT : PARTIAL_PAGE_LIMIT;
    const sort = sortOrder || DEFAULT_ORDERING;
    return listenSearchQuery({
      client,
      filter,
      limit,
      params: paramsProp,
      schema,
      searchQuery: searchQuery || "",
      sort,
      staticTypeNames: typeNameFromFilter ? [typeNameFromFilter] : void 0
    }).pipe(operators.map(results => ({
      result: {
        documents: results
      },
      error: null
    })), operators.startWith(INITIAL_QUERY_RESULTS), operators.catchError(err => {
      if (err instanceof ProgressEvent) {
        return rxjs.throwError(() => new Error("Request error"));
      }
      return rxjs.throwError(() => err);
    }), operators.catchError((err, caught$) => {
      return rxjs.concat(rxjs.of({
        result: null,
        error: err
      }), rxjs.merge(rxjs.fromEvent(window, "online"), onRetry$).pipe(operators.take(1), operators.mergeMap(() => caught$)));
    }), operators.scan((prev, next) => ({
      ...prev,
      ...next,
      onRetry: _onRetry
    })));
  }, [client, filter, paramsProp, schema, searchQuery, shouldFetchFullList, sortOrder, typeNameFromFilter]);
  React.useEffect(() => {
    const sub = queryResults$.subscribe(handleSetResult);
    return () => {
      sub.unsubscribe();
    };
  }, [handleSetResult, queryResults$]);
  const reset = React.useCallback(() => {
    setHasFullList(false);
    setIsLazyLoading(false);
    setResult(INITIAL_STATE);
    setShouldFetchFullList(false);
  }, []);
  React.useEffect(() => {
    reset();
  }, [reset, filter, paramsProp, sortOrder, searchQuery]);
  return {
    error,
    hasMaxItems,
    isLazyLoading,
    isLoading,
    isSearchReady: !error,
    items,
    onListChange,
    onRetry
  };
}
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a, _b, _c;
const EMPTY_ARRAY = [];
const rotate = styled.keyframes(_a || (_a = __template(["\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n"])));
const AnimatedSpinnerIcon = styled__default.default(icons.SpinnerIcon)(_b || (_b = __template(["\n  animation: ", " 500ms linear infinite;\n"])), rotate);
const SearchCard = styled__default.default(ui.Card)(_c || (_c = __template(["\n  [data-ui='TextInput'] {\n    border-radius: inherit;\n  }\n"])));
function useShallowUnique(value) {
  const valueRef = React.useRef(value);
  if (!shallowEquals__default.default(valueRef.current, value)) {
    valueRef.current = value;
  }
  return valueRef.current;
}
const addSelectedStateToMenuItems = options => {
  const {
    menuItems,
    sortOrderRaw,
    layout
  } = options;
  return menuItems == null ? void 0 : menuItems.map(item => {
    var _a2, _b2, _c2, _d;
    if ((_a2 = item.params) == null ? void 0 : _a2.layout) {
      return {
        ...item,
        selected: layout === ((_b2 = item.params) == null ? void 0 : _b2.layout)
      };
    }
    if ((_c2 = item == null ? void 0 : item.params) == null ? void 0 : _c2.by) {
      return {
        ...item,
        selected: isEqual__default.default(sortOrderRaw == null ? void 0 : sortOrderRaw.by, ((_d = item == null ? void 0 : item.params) == null ? void 0 : _d.by) || EMPTY_ARRAY)
      };
    }
    return {
      ...item,
      selected: false
    };
  });
};
const DocumentListPane = React.memo(function DocumentListPane2(props) {
  const {
    childItemId,
    index: index$1,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const schema = sanity.useSchema();
  const {
    name: parentSourceName
  } = sanity.useSource();
  const {
    defaultLayout = "default",
    displayOptions,
    initialValueTemplates = EMPTY_ARRAY,
    menuItemGroups,
    menuItems,
    options,
    title
  } = pane;
  const {
    apiVersion,
    defaultOrdering = EMPTY_ARRAY,
    filter
  } = options;
  const params = useShallowUnique(options.params || EMPTY_RECORD);
  const sourceName = pane.source;
  const typeName = React.useMemo(() => getTypeNameFromSingleTypeFilter(filter, params), [filter, params]);
  const showIcons = (displayOptions == null ? void 0 : displayOptions.showIcons) !== false;
  const [layout, setLayout] = index.useDeskToolSetting(typeName, "layout", defaultLayout);
  const [searchQuery, setSearchQuery] = React.useState("");
  const [searchInputValue, setSearchInputValue] = React.useState("");
  const [searchInputElement, setSearchInputElement] = React.useState(null);
  const showSearchLoadingRef = React.useRef(false);
  const defaultSortOrder = React.useMemo(() => {
    return (defaultOrdering == null ? void 0 : defaultOrdering.length) > 0 ? {
      by: defaultOrdering
    } : DEFAULT_ORDERING;
  }, [defaultOrdering]);
  const [sortOrderRaw, setSortOrder] = index.useDeskToolSetting(typeName, "sortOrder", defaultSortOrder);
  const sortWithOrderingFn = typeName && sortOrderRaw ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName)) : sortOrderRaw;
  const sortOrder = sanity.useUnique(sortWithOrderingFn);
  const filterIsSimpleTypeConstraint = isSimpleTypeFilter(filter);
  const {
    error,
    hasMaxItems,
    isLazyLoading,
    isLoading,
    isSearchReady,
    items,
    onListChange,
    onRetry
  } = useDocumentList({
    apiVersion,
    filter,
    params,
    searchQuery: searchQuery == null ? void 0 : searchQuery.trim(),
    sortOrder
  });
  const menuItemsWithSelectedState = React.useMemo(() => addSelectedStateToMenuItems({
    menuItems,
    sortOrderRaw,
    layout
  }), [layout, menuItems, sortOrderRaw]);
  const handleQueryChange = reactRx.useObservableCallback(event$ => {
    return event$.pipe(rxjs.map(event => event.target.value), rxjs.tap(setSearchInputValue), rxjs.debounce(value => value === "" ? rxjs.of("") : rxjs.timer(300)), rxjs.tap(setSearchQuery));
  }, []);
  const handleClearSearch = React.useCallback(() => {
    setSearchQuery("");
    setSearchInputValue("");
  }, []);
  const handleSearchKeyDown = React.useCallback(event => {
    if (event.key === "Escape") {
      handleClearSearch();
    }
  }, [handleClearSearch]);
  React.useEffect(() => {
    if (showSearchLoadingRef.current === false && !isLoading) {
      showSearchLoadingRef.current = true;
    }
    return () => {
      showSearchLoadingRef.current = false;
    };
  }, [isLoading]);
  React.useEffect(() => {
    handleClearSearch();
    showSearchLoadingRef.current = false;
  }, [paneKey, handleClearSearch]);
  const loadingVariant = React.useMemo(() => {
    const showSpinner = isLoading && items.length === 0 && showSearchLoadingRef.current;
    if (showSpinner) return "spinner";
    return "initial";
  }, [isLoading, items.length]);
  const searchInput = /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
    paddingX: 2,
    paddingBottom: 2,
    children: /* @__PURE__ */jsxRuntime.jsx(SearchCard, {
      radius: 4,
      tone: "transparent",
      children: /* @__PURE__ */jsxRuntime.jsx(ui.TextInput, {
        "aria-label": "Search list",
        autoComplete: "off",
        border: false,
        clearButton: Boolean(searchQuery),
        disabled: !isSearchReady,
        fontSize: [2, 2, 1],
        icon: loadingVariant === "spinner" ? AnimatedSpinnerIcon : icons.SearchIcon,
        onChange: handleQueryChange,
        onClear: handleClearSearch,
        onKeyDown: handleSearchKeyDown,
        placeholder: "Search list",
        radius: 2,
        ref: setSearchInputElement,
        spellCheck: false,
        value: searchInputValue
      })
    })
  });
  return /* @__PURE__ */jsxRuntime.jsx(sanity.SourceProvider, {
    name: sourceName || parentSourceName,
    children: /* @__PURE__ */jsxRuntime.jsxs(desk.Pane, {
      currentMaxWidth: 350,
      "data-ui": "DocumentListPane",
      id: paneKey,
      maxWidth: 640,
      minWidth: 320,
      selected: isSelected,
      children: [desk._DEBUG, /* @__PURE__ */jsxRuntime.jsx(DocumentListPaneHeader, {
        contentAfter: searchInput,
        index: index$1,
        initialValueTemplates,
        menuItemGroups,
        menuItems: menuItemsWithSelectedState,
        setLayout,
        setSortOrder,
        title
      }), /* @__PURE__ */jsxRuntime.jsx(DocumentListPaneContent, {
        childItemId,
        error,
        filterIsSimpleTypeConstraint,
        hasMaxItems,
        hasSearchQuery: Boolean(searchQuery),
        isActive,
        isLazyLoading,
        isLoading,
        items,
        layout,
        loadingVariant,
        onListChange,
        onRetry,
        paneTitle: title,
        searchInputElement,
        showIcons
      }, paneKey)]
    })
  });
});
exports.default = DocumentListPane;
//# sourceMappingURL=index-19fbb107.js.map
