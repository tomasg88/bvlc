{"version":3,"file":"index-19fbb107.js","sources":["../../src/desk/panes/documentList/constants.ts","../../src/desk/panes/documentList/helpers.ts","../../src/desk/panes/documentList/DocumentListPaneContent.tsx","../../src/desk/panes/documentList/DocumentListPaneHeader.tsx","../../src/desk/panes/documentList/listenSearchQuery.ts","../../src/desk/panes/documentList/useDocumentList.ts","../../src/desk/panes/documentList/DocumentListPane.tsx"],"sourcesContent":["import {SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n","import * as PathUtils from '@sanity/util/paths'\nimport {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  ObjectField,\n  ObjectFieldType,\n  ObjectSchemaType,\n  SanityDocument,\n  SchemaType,\n} from '@sanity/types'\nimport {DocumentListPaneItem, SortOrder} from './types'\nimport {getPublishedId, collate} from 'sanity'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocument[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nconst RE_TYPE_NAME_IN_FILTER =\n  /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type\\b/\nexport function getTypeNameFromSingleTypeFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string | null {\n  const matches = filter.match(RE_TYPE_NAME_IN_FILTER)\n\n  if (!matches) {\n    return null\n  }\n\n  const match = (matches[1] || matches[2]).trim().replace(/^[\"']|[\"']$/g, '')\n\n  if (match[0] === '$') {\n    const k = match.slice(1)\n    const v = params[k]\n\n    return typeof v === 'string' ? v : null\n  }\n\n  return match\n}\n\nexport function isSimpleTypeFilter(filter: string): boolean {\n  return /^_type\\s*==\\s*['\"$]\\w+['\"]?\\s*$/.test(filter.trim())\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n","import {SyncIcon} from '@sanity/icons'\nimport {Box, Button, Card, Container, Flex, Heading, Spinner, Stack, Text} from '@sanity/ui'\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\nimport {SanityDocument} from '@sanity/types'\nimport styled from 'styled-components'\nimport {Delay, PaneContent, usePane, usePaneLayout, PaneItem} from '../../components'\nimport {DocumentListPaneItem, LoadingVariant} from './types'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {\n  CommandList,\n  CommandListRenderItemCallback,\n  GeneralPreviewLayoutKey,\n  SanityDefaultPreview,\n  getPublishedId,\n  useSchema,\n} from 'sanity'\n\nconst RootBox = styled(Box)`\n  position: relative;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onListChange: () => void\n  onRetry?: (event: unknown) => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack padding={2} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <Card padding={2} key={num}>\n          <SanityDefaultPreview isPlaceholder layout={layout} />\n        </Card>\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onListChange,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(false)\n\n  const handleEndReached = useCallback(() => {\n    if (isLoading || isLazyLoading || !shouldRender) return\n\n    onListChange()\n  }, [isLazyLoading, isLoading, onListChange, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && (\n            <Flex align=\"center\" justify=\"center\" padding={4}>\n              <Spinner muted />\n            </Flex>\n          )}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                Displaying a maximum of {FULL_LIST_LIMIT} documents\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                No results found\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint ? 'No documents of this type' : 'No matching documents'}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">Could not fetch list items</Heading>\n              <Text as=\"p\">\n                Error: <code>{error.message}</code>\n              </Text>\n\n              {onRetry && (\n                <Box>\n                  <Button icon={SyncIcon} onClick={onRetry} text=\"Retry\" tone=\"primary\" />\n                </Box>\n              )}\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\">\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            focusRingOffset={-3}\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            padding={2}\n            paddingBottom={1}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n    // Explicitly don't include `noDocumentsContent` in the deps array, as it's\n    // causing a visual bug where the \"No documents\" message is shown for a split second\n    // when clearing a search query with no results\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    // noDocumentsContent,\n    onRetry,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n  ])\n\n  return (\n    <PaneContent overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}>\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {Button} from '@sanity/ui'\nimport React, {memo, useMemo} from 'react'\nimport {PaneMenuItem, PaneMenuItemGroup, DeskToolPaneActionHandler} from '../../types'\nimport {BackLink, PaneHeader, PaneHeaderActions, usePane} from '../../components'\nimport {useDeskTool} from '../../useDeskTool'\nimport {SortOrder} from './types'\nimport {GeneralPreviewLayoutKey, InitialValueTemplateItem} from 'sanity'\n\ninterface DocumentListPaneHeaderProps {\n  contentAfter?: React.ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const DocumentListPaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: DocumentListPaneHeaderProps) => {\n    const {features} = useDeskTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, DeskToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <PaneHeader\n        actions={\n          <PaneHeaderActions\n            initialValueTemplateItems={initialValueTemplates}\n            actionHandlers={actionHandlers}\n            menuItemGroups={menuItemGroups}\n            menuItems={menuItems}\n          />\n        }\n        backButton={\n          features.backButton &&\n          index > 0 && <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" />\n        }\n        contentAfter={contentAfter}\n        tabIndex={tabIndex}\n        title={title}\n      />\n    )\n  },\n)\n\nDocumentListPaneHeader.displayName = 'DocumentListPaneHeader'\n","import {SanityClient, SanityDocument} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  merge,\n  mergeMap,\n  Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {SortOrder} from './types'\nimport {\n  createSearchQuery,\n  Schema,\n  SearchableType,\n  SearchOptions,\n  SearchTerms,\n  WeightedSearchOptions,\n} from 'sanity'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[]\n}\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SanityDocument[]> {\n  const {client, schema, sort, limit, params, filter, searchQuery, staticTypeNames} = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = typeNames.flatMap((name) => schema.get(name) || []) as SearchableType[]\n\n          const searchTerms: SearchTerms = {\n            filter,\n            query: searchQuery || '',\n            types,\n          }\n\n          const searchOptions: SearchOptions & WeightedSearchOptions = {\n            __unstable_extendedProjection: extendedProjection,\n            comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n            limit,\n            params,\n            sort: sortBy,\n          }\n\n          const {query: createdQuery, params: createdParams} = createSearchQuery(\n            searchTerms,\n            searchOptions,\n          )\n          const doFetch = () => client.observable.fetch(createdQuery, createdParams)\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n  )\n}\n","import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {concat, fromEvent, merge, of, Subject, throwError} from 'rxjs'\nimport {catchError, map, mergeMap, scan, startWith, take} from 'rxjs/operators'\nimport {DocumentListPaneItem, QueryResult, SortOrder} from './types'\nimport {getTypeNameFromSingleTypeFilter, removePublishedWithDrafts} from './helpers'\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, useClient, useSchema} from 'sanity'\n\nconst EMPTY_ARRAY: [] = []\n\nconst INITIAL_STATE: QueryResult = {\n  error: null,\n  onRetry: undefined,\n  result: null,\n}\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  hasMaxItems?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  isSearchReady: boolean\n  items: DocumentListPaneItem[]\n  onListChange: () => void\n  onRetry?: (event: unknown) => void\n}\n\nconst INITIAL_QUERY_RESULTS: QueryResult = {\n  result: null,\n  error: null,\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): DocumentListState {\n  const {filter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const schema = useSchema()\n\n  const [resultState, setResult] = useState<QueryResult>(INITIAL_STATE)\n  const {onRetry, error, result} = resultState\n\n  const documents = result?.documents\n\n  // Filter out published documents that have drafts to avoid duplicates in the list.\n  const items = useMemo(\n    () => (documents ? removePublishedWithDrafts(documents) : EMPTY_ARRAY),\n    [documents],\n  )\n\n  // A state variable to keep track of whether we are currently lazy loading the list.\n  // This is used to determine whether we should show the loading spinner at the bottom of the list.\n  const [isLazyLoading, setIsLazyLoading] = useState<boolean>(false)\n\n  // A state to keep track of whether we have fetched the full list of documents.\n  const [hasFullList, setHasFullList] = useState<boolean>(false)\n\n  // A state to keep track of whether we should fetch the full list of documents.\n  const [shouldFetchFullList, setShouldFetchFullList] = useState<boolean>(false)\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => getTypeNameFromSingleTypeFilter(filter, paramsProp),\n    [filter, paramsProp],\n  )\n\n  // We can't have the loading state as part of the result state, since the loading\n  // state would be updated whenever a mutation is performed in a document in the list.\n  // Instead, we determine if the list is loading by checking if the result is null.\n  // The result is null when:\n  // 1. We are making the initial request\n  // 2. The user has performed a search or changed the sort order\n  const isLoading = result === null && !error\n\n  // A flag to indicate whether we have reached the maximum number of documents.\n  const hasMaxItems = documents?.length === FULL_LIST_LIMIT\n\n  // This function is triggered when the user has scrolled to the bottom of the list\n  // and we need to fetch more items.\n  const onListChange = useCallback(() => {\n    if (isLoading || hasFullList || shouldFetchFullList) return\n\n    setShouldFetchFullList(true)\n  }, [isLoading, hasFullList, shouldFetchFullList])\n\n  const handleSetResult = useCallback(\n    (res: QueryResult) => {\n      if (res.error) {\n        setResult(res)\n        return\n      }\n\n      const documentsLength = res.result?.documents?.length || 0\n      const isLoadingMoreItems = !res.error && res?.result === null && shouldFetchFullList\n\n      // 1. When the result is null and shouldFetchFullList is true, we are loading _more_ items.\n      // In this case, we want to wait for the next result and set the isLazyLoading state to true.\n      if (isLoadingMoreItems) {\n        setIsLazyLoading(true)\n        return\n      }\n\n      // 2. If the result is not null, and less than the partial page limit, we know that\n      // we have fetched the full list of documents. In this case, we want to set the\n      // hasFullList state to true to prevent further requests.\n      if (documentsLength < PARTIAL_PAGE_LIMIT && documentsLength !== 0 && !shouldFetchFullList) {\n        setHasFullList(true)\n      }\n\n      // 3. If the result is null, we are loading items. In this case, we want to\n      // wait for the next result.\n      if (res?.result === null) {\n        setResult((prev) => ({...(prev.error ? res : prev)}))\n        return\n      }\n\n      // 4. Finally, set the result\n      setIsLazyLoading(false)\n      setResult(res)\n    },\n    [shouldFetchFullList],\n  )\n\n  const queryResults$ = useMemo(() => {\n    const onRetry$ = new Subject<void>()\n    const _onRetry = () => onRetry$.next()\n\n    const limit = shouldFetchFullList ? FULL_LIST_LIMIT : PARTIAL_PAGE_LIMIT\n    const sort = sortOrder || DEFAULT_ORDERING\n\n    return listenSearchQuery({\n      client,\n      filter,\n      limit,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort,\n      staticTypeNames: typeNameFromFilter ? [typeNameFromFilter] : undefined,\n    }).pipe(\n      map((results) => ({\n        result: {documents: results},\n        error: null,\n      })),\n      startWith(INITIAL_QUERY_RESULTS),\n      catchError((err) => {\n        if (err instanceof ProgressEvent) {\n          // todo: hack to work around issue with get-it (used by sanity/client) that propagates connection errors as ProgressEvent instances. This if-block can be removed once @sanity/client is par with a version of get-it that includes this fix: https://github.com/sanity-io/get-it/pull/127\n          return throwError(() => new Error(`Request error`))\n        }\n        return throwError(() => err)\n      }),\n      catchError((err, caught$) => {\n        return concat(\n          of({result: null, error: err}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, next) => ({...prev, ...next, onRetry: _onRetry})),\n    )\n  }, [\n    client,\n    filter,\n    paramsProp,\n    schema,\n    searchQuery,\n    shouldFetchFullList,\n    sortOrder,\n    typeNameFromFilter,\n  ])\n\n  useEffect(() => {\n    const sub = queryResults$.subscribe(handleSetResult)\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [handleSetResult, queryResults$])\n\n  const reset = useCallback(() => {\n    setHasFullList(false)\n    setIsLazyLoading(false)\n    setResult(INITIAL_STATE)\n    setShouldFetchFullList(false)\n  }, [])\n\n  useEffect(() => {\n    reset()\n  }, [reset, filter, paramsProp, sortOrder, searchQuery])\n\n  return {\n    error,\n    hasMaxItems,\n    isLazyLoading,\n    isLoading,\n    isSearchReady: !error,\n    items,\n    onListChange,\n    onRetry,\n  }\n}\n","import React, {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {Box, Card, Code, TextInput} from '@sanity/ui'\nimport shallowEquals from 'shallow-equals'\nimport {isEqual} from 'lodash'\nimport {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport styled, {keyframes} from 'styled-components'\nimport {Observable, debounce, map, of, tap, timer} from 'rxjs'\nimport {useObservableCallback} from 'react-rx'\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {useDeskToolSetting} from '../../useDeskToolSetting'\nimport {BaseDeskToolPaneProps} from '../types'\nimport {PaneMenuItem} from '../../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {\n  applyOrderingFunctions,\n  getTypeNameFromSingleTypeFilter,\n  isSimpleTypeFilter,\n} from './helpers'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {DocumentListPaneHeader} from './DocumentListPaneHeader'\nimport {LoadingVariant, SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\nimport {GeneralPreviewLayoutKey, SourceProvider, useSchema, useSource, useUnique} from 'sanity'\n\ntype DocumentListPaneProps = BaseDeskToolPaneProps<'documentList'>\n\nconst EMPTY_ARRAY: never[] = []\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SearchCard = styled(Card)`\n  [data-ui='TextInput'] {\n    border-radius: inherit;\n  }\n`\n\nfunction useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralPreviewLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\n/**\n * @internal\n */\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n  const schema = useSchema()\n  const {name: parentSourceName} = useSource()\n  const {\n    defaultLayout = 'default',\n    displayOptions,\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n    title,\n  } = pane\n  const {apiVersion, defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => getTypeNameFromSingleTypeFilter(filter, params), [filter, params])\n  const showIcons = displayOptions?.showIcons !== false\n  const [layout, setLayout] = useDeskToolSetting<GeneralPreviewLayoutKey>(\n    typeName,\n    'layout',\n    defaultLayout,\n  )\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  // A ref to determine if we should show the loading spinner in the search input.\n  // This is used to avoid showing the spinner on initial load of the document list.\n  // We only wan't to show the spinner when the user interacts with the search input.\n  const showSearchLoadingRef = useRef<boolean>(false)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useDeskToolSetting<SortOrder>(\n    typeName,\n    'sortOrder',\n    defaultSortOrder,\n  )\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n  const filterIsSimpleTypeConstraint = isSimpleTypeFilter(filter)\n\n  const {\n    error,\n    hasMaxItems,\n    isLazyLoading,\n    isLoading,\n    isSearchReady,\n    items,\n    onListChange,\n    onRetry,\n  } = useDocumentList({\n    apiVersion,\n    filter,\n    params,\n    searchQuery: searchQuery?.trim(),\n    sortOrder,\n  })\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const handleQueryChange = useObservableCallback(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n    [],\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  useEffect(() => {\n    if (showSearchLoadingRef.current === false && !isLoading) {\n      showSearchLoadingRef.current = true\n    }\n\n    return () => {\n      showSearchLoadingRef.current = false\n    }\n  }, [isLoading])\n\n  useEffect(() => {\n    // Clear search field and reset showSearchLoadingRef ref\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    showSearchLoadingRef.current = false\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    const showSpinner = isLoading && items.length === 0 && showSearchLoadingRef.current\n\n    if (showSpinner) return 'spinner'\n\n    return 'initial'\n  }, [isLoading, items.length])\n\n  const searchInput = (\n    <Box paddingX={2} paddingBottom={2}>\n      <SearchCard radius={4} tone=\"transparent\">\n        <TextInput\n          aria-label=\"Search list\"\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={!isSearchReady}\n          fontSize={[2, 2, 1]}\n          icon={loadingVariant === 'spinner' ? AnimatedSpinnerIcon : SearchIcon}\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          placeholder=\"Search list\"\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </SearchCard>\n    </Box>\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        currentMaxWidth={350}\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        maxWidth={640}\n        minWidth={320}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <DocumentListPaneHeader\n          contentAfter={searchInput}\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n\n        <DocumentListPaneContent\n          childItemId={childItemId}\n          error={error}\n          filterIsSimpleTypeConstraint={filterIsSimpleTypeConstraint}\n          hasMaxItems={hasMaxItems}\n          hasSearchQuery={Boolean(searchQuery)}\n          isActive={isActive}\n          isLazyLoading={isLazyLoading}\n          isLoading={isLoading}\n          items={items}\n          key={paneKey}\n          layout={layout}\n          loadingVariant={loadingVariant}\n          onListChange={onListChange}\n          onRetry={onRetry}\n          paneTitle={title}\n          searchInputElement={searchInputElement}\n          showIcons={showIcons}\n        />\n      </Pane>\n    </SourceProvider>\n  )\n})\n"],"names":["PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","direction","EMPTY_RECORD","removePublishedWithDrafts","documents","collate","map","entry","doc","draft","published","hasPublished","hasDraft","RE_TYPE_NAME_IN_FILTER","getTypeNameFromSingleTypeFilter","filter","params","arguments","length","undefined","matches","match","trim","replace","k","slice","v","isSimpleTypeFilter","test","applyOrderingFunctions","order","schemaType","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","every","item","index","baseType","path","pathSegments","PathUtils","fromString","current","segment","getFieldTypeByName","isArrayAccessor","isKeySegment","isIndexSegment","memberType","otherType","of","isReferenceSchemaType","refType","otherRefType","to","type","fieldName","fields","find","name","ofType","_a","_b","RootBox","styled","Box","__template","CommandListBox","SKELETON_ITEMS","Array","keys","LoadingView","props","layout","jsx","Stack","padding","space","children","num","Card","SanityDefaultPreview","isPlaceholder","DocumentListPaneContent","childItemId","error","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isActive","isLazyLoading","isLoading","items","loadingVariant","onListChange","onRetry","paneTitle","searchInputElement","showIcons","schema","useSchema","collapsed","layoutCollapsed","usePaneLayout","usePane","shouldRender","setShouldRender","useState","handleEndReached","useCallback","useEffect","timer","setTimeout","clearTimeout","renderItem","_ref","activeIndex","publishedId","getPublishedId","_id","isSelected","pressed","selected","isLastItem","showSpinner","showMaxItemsMessage","jsxs","Fragment","PaneItem","icon","id","marginBottom","get","_type","value","Flex","align","justify","Spinner","muted","marginY","paddingX","paddingY","Text","size","noDocumentsContent","useMemo","height","Container","width","mainContent","Heading","as","message","Button","SyncIcon","onClick","text","tone","Delay","ms","key","concat","overflow","CommandList","activeItemDataAttr","ariaLabel","canReceiveFocus","focusRingOffset","inputElement","itemHeight","onEndReached","onlyShowSelectionWhenActive","overscan","paddingBottom","wrapAround","PaneContent","DocumentListPaneHeader","memo","_ref2","contentAfter","initialValueTemplates","menuItemGroups","menuItems","setLayout","setSortOrder","title","features","useDeskTool","isLast","tabIndex","actionHandlers","_ref3","sort","PaneHeader","actions","PaneHeaderActions","initialValueTemplateItems","backButton","BackLink","ArrowLeftIcon","mode","displayName","listenSearchQuery","options","client","limit","searchQuery","staticTypeNames","sortBy","extendedProjection","events$","defer","listen","events","includeResult","visibility","pipe","mergeMap","ev","i","isFirst","throwError","Error","share","welcome$","mutationAndReconnect$","partition","merge","take","throttleTime","asyncScheduler","leading","trailing","exhaustMapWithTrailing","event","typeNames$","observable","fetch","typeNames","types","flatMap","searchTerms","query","searchOptions","__unstable_extendedProjection","comments","createdQuery","createdParams","createSearchQuery","doFetch","EMPTY_ARRAY","INITIAL_STATE","result","INITIAL_QUERY_RESULTS","useDocumentList","opts","paramsProp","sortOrder","apiVersion","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","resultState","setResult","setIsLazyLoading","hasFullList","setHasFullList","shouldFetchFullList","setShouldFetchFullList","typeNameFromFilter","handleSetResult","res","documentsLength","isLoadingMoreItems","prev","queryResults$","onRetry$","Subject","_onRetry","next","results","startWith","catchError","err","ProgressEvent","caught$","fromEvent","window","scan","sub","subscribe","unsubscribe","reset","isSearchReady","_c","rotate","keyframes","AnimatedSpinnerIcon","default","SpinnerIcon","SearchCard","useShallowUnique","valueRef","useRef","shallowEquals","addSelectedStateToMenuItems","sortOrderRaw","_d","isEqual","DocumentListPane","pane","paneKey","parentSourceName","useSource","defaultLayout","displayOptions","defaultOrdering","sourceName","source","typeName","useDeskToolSetting","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","showSearchLoadingRef","defaultSortOrder","sortWithOrderingFn","useUnique","menuItemsWithSelectedState","handleQueryChange","useObservableCallback","event$","target","tap","debounce","handleClearSearch","handleSearchKeyDown","searchInput","radius","TextInput","autoComplete","border","clearButton","Boolean","disabled","fontSize","SearchIcon","onChange","onClear","onKeyDown","placeholder","ref","spellCheck","SourceProvider","Pane","currentMaxWidth","maxWidth","minWidth","_DEBUG"],"mappings":"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"}