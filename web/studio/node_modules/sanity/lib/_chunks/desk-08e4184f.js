import{PublishIcon,EditIcon,InfoOutlineIcon,UnknownIcon,WarningOutlineIcon,DocumentsIcon,ChevronDownIcon,CopyIcon,CheckmarkIcon,EllipsisVerticalIcon,ComposeIcon,TrashIcon,ResetIcon,RestoreIcon,UnpublishIcon,CheckmarkCircleIcon,UndoIcon,LinkIcon,ChevronRightIcon,LaunchIcon,MoonIcon,SunIcon,SelectIcon,MenuIcon,ControlsIcon,SearchIcon,DoubleChevronRightIcon,CommentIcon as CommentIcon$1,AddCircleIcon,CloseIcon,ErrorOutlineIcon,MasterDetailIcon,BinaryDocumentIcon,EarthAmericasIcon,SortIcon,StackCompactIcon,StackIcon}from'@sanity/icons';import React,{useState,useEffect,useMemo,isValidElement,createContext,forwardRef,useContext,useCallback,useId,memo,useRef,useImperativeHandle,Fragment as Fragment$1,createElement,Suspense,useReducer,lazy}from'react';import{jsx,Fragment,jsxs}from'react/jsx-runtime';import{useSchema,unstable_useValuePreview,createHookFromObservableFactory,getDraftId,getPublishedId,useClient,DEFAULT_STUDIO_CLIENT_OPTIONS,useDocumentStore,useTimeAgo,TextWithTone,isRecord as isRecord$1,getPreviewStateObservable,SanityDefaultPreview,getPreviewValueWithFallback,DocumentPreviewPresence,useUnique,useDocumentPresence,useDocumentPreviewStore,PreviewCard,TooltipOfDisabled,StatusButton,LegacyLayerProvider,useCurrentUser,InsufficientPermissionsMessage,useTemplates,useTemplatePermissions,EMPTY_ARRAY as EMPTY_ARRAY$7,EMPTY_OBJECT,useDocumentOperation,useDocumentPairPermissions,useDocumentOperationEvent,useValidationStatus,useSyncState,useEditState,useUser,isPortableTextTextBlock,isPortableTextSpan,useDidUpdate,CommandList,useProjectStore,useUserStore,useWorkspace,useFeatureEnabled,useSource,getValueAtPath,resolveConditionalProperty,getSchemaTypeTitle,defineDocumentInspector,definePlugin,UserAvatar,useTimelineSelector,visitDiff,ScrollContainer,ChangeFieldWrapper,DiffTooltip,NoChanges,DocumentChangeContext,ChangeList,isArray as isArray$1,isValidationError,isValidationWarning,usePresenceStore,useInitialValue,useConnectionState,useTimelineStore,toMutationPatches,setAtPath,useDocumentValuePermissions,useFormState,getExpandOperations,FieldActionsResolver,FieldActionsProvider,getConfigContextFromSource,useConfigContextFromSource}from'sanity';import{Tooltip,Box,Text,Inline,rem,Flex,Container,useToast,Card,Stack,Label,Button,Dialog,Grid,Spinner,ErrorBoundary,MenuDivider,MenuGroup,MenuItem,MenuButton,Menu,Layer,useForwardedRef,BoundaryElementProvider,TextSkeleton,rgba,useElementRect,LayerProvider,Avatar,Badge,Popover,useClickOutside,useGlobalKeyDown,PortalProvider,useBoundaryElement,ThemeColorProvider,DialogProvider,TooltipDelayGroupProvider,Checkbox,TextInput,Select,TextArea,Heading,Code,ToastProvider,Tab,TabList,TabPanel,Breadcrumbs,useMediaIndex,Tree,TreeItem,AvatarStack}from'@sanity/ui';import styled,{css,createGlobalStyle}from'styled-components';import{fromEvent,timer,EMPTY,of,map as map$1,switchMap as switchMap$1,forkJoin,mergeMap,concat,catchError as catchError$1,from}from'rxjs';import{switchMap,startWith,map,distinctUntilChanged,shareReplay,catchError,debounceTime}from'rxjs/operators';import CopyToClipboard from'react-copy-to-clipboard';import isNumber from'lodash/isNumber.js';import isString from'lodash/isString.js';import{useMemoObservable,useAsObservable}from'react-rx';import{StateLink,useIntentLink,IntentLink,useRouter,route,useRouterState}from'sanity/router';import omit from'lodash/omit.js';import*as PathUtils from'@sanity/util/paths';import{toString as toString$2,fromString,resolveKeyedPath}from'@sanity/util/paths';import uniqBy from'lodash/uniqBy.js';import negate from'lodash/negate.js';import{isValidationErrorMarker,defineField,defineArrayMember,isPortableTextSpan as isPortableTextSpan$1,isPortableTextTextBlock as isPortableTextTextBlock$1,isKeySegment,isArraySchemaType,isObjectSchemaType}from'@sanity/types';import{uuid}from'@sanity/uuid';import{PortableText}from'@portabletext/react';import{usePortableTextEditor,PortableTextEditor,usePortableTextEditorSelection,PortableTextEditable,keyGenerator}from'@sanity/portable-text-editor';import FocusLock from'react-focus-lock';import{Schema}from'@sanity/schema';import isEqual$1 from'lodash/isEqual.js';import{format}from'date-fns';import isEqual$2 from'lodash/isEqual';import'react-dom/client';import lodashDebounce from'lodash/debounce';import{hues}from'@sanity/color';import orderBy from'lodash/orderBy.js';import sortBy from'lodash/sortBy.js';import{parse,evaluate}from'groq-js';import findIndex from'lodash/findIndex.js';import startCase from'lodash/startCase.js';import scrollIntoView from'scroll-into-view-if-needed';import{motion,useInView,AnimatePresence}from'framer-motion';import upperFirst from'lodash/upperFirst.js';import isHotkey from'is-hotkey';import{isActionEnabled}from'@sanity/schema/_internal';import camelCase from'lodash/camelCase.js';import speakingurl from'speakingurl';import uniq from'lodash/uniq.js';import kebabCase from'lodash/kebabCase.js';import{generateHelpUrl}from'@sanity/generate-help-url';import pickBy from'lodash/pickBy.js';import find from'lodash/find.js';import uniqueId from'lodash/uniqueId.js';import{isValidElementType}from'react-is';function Delay(_ref12){let{children,ms=0}=_ref12;const[ready,setReady]=useState(ms<=0);useEffect(()=>{if(ms<=0){return void 0;}const timeoutId=setTimeout(()=>setReady(true),ms);return()=>{clearTimeout(timeoutId);};},[ms]);if(!ready||!children){return/* @__PURE__ */jsx(Fragment,{});}return typeof children==="function"?children():children;}function DocTitle(props){const{document:documentValue}=props;const schema=useSchema();const schemaType=schema.get(documentValue._type);const{error,value}=unstable_useValuePreview({schemaType,value:documentValue});if(!schemaType){return/* @__PURE__ */jsxs("code",{children:["Unknown schema type: ",documentValue._type]});}if(error){return/* @__PURE__ */jsxs(Fragment,{children:["Error: ",error.message]});}return/* @__PURE__ */jsx(Fragment,{children:(value==null?void 0:value.title)||/* @__PURE__ */jsx("span",{style:{color:"var(--card-muted-fg-color)"},children:"Untitled"})});}function isClientError(e){if(typeof e!=="object")return false;if(!e)return false;return"statusCode"in e&&"response"in e;}const POLL_INTERVAL=5e3;let visiblePoll$;const getVisiblePoll$=()=>{if(!visiblePoll$){visiblePoll$=fromEvent(document,"visibilitychange").pipe(// add empty emission to have this fire on creation
startWith(null),map(()=>document.visibilityState==="visible"),distinctUntilChanged(),switchMap(visible=>visible?// using timer instead of interval since timer will emit on creation
timer(0,POLL_INTERVAL):EMPTY),shareReplay({refCount:true,bufferSize:1}));}return visiblePoll$;};function getDocumentExistence(documentId,_ref13){let{versionedClient}=_ref13;const draftId=getDraftId(documentId);const publishedId=getPublishedId(documentId);const requestOptions={uri:versionedClient.getDataUrl("doc","".concat(draftId,",").concat(publishedId)),json:true,query:{excludeContent:"true"},tag:"use-referring-documents.document-existence"};return versionedClient.observable.request(requestOptions).pipe(map(_ref14=>{let{omitted}=_ref14;const nonExistant=omitted.filter(doc=>doc.reason==="existence");if(nonExistant.length===2){return void 0;}if(nonExistant.length===0){return publishedId;}return nonExistant.some(doc=>doc.id===draftId)?publishedId:draftId;}));}function fetchCrossDatasetReferences(documentId,context){const{versionedClient}=context;return getVisiblePoll$().pipe(switchMap(()=>getDocumentExistence(documentId,context)),switchMap(checkDocumentId=>{if(!checkDocumentId){return of({totalCount:0,references:[]});}const currentDataset=versionedClient.config().dataset;return versionedClient.observable.request({url:"/data/references/".concat(currentDataset,"/documents/").concat(checkDocumentId,"/to?excludeInternalReferences=true&excludePaths=true"),tag:"use-referring-documents.external"}).pipe(catchError(e=>{if(isClientError(e)&&e.statusCode===404){return of({totalCount:0,references:[]});}throw e;}));}));}const useInternalReferences=createHookFromObservableFactory(_ref15=>{let[documentId,documentStore]=_ref15;const referencesClause="*[references($documentId)][0...100]{_id,_type}";const totalClause="count(*[references($documentId)])";const fetchQuery='{"references":'.concat(referencesClause,',"totalCount":').concat(totalClause,"}");const listenQuery="*[references($documentId)]";return documentStore.listenQuery({fetch:fetchQuery,listen:listenQuery},{documentId},{tag:"use-referring-documents",transitions:["appear","disappear"],throttleTime:5e3});});const useCrossDatasetReferences=createHookFromObservableFactory(_ref16=>{let[documentId,versionedClient]=_ref16;return getVisiblePoll$().pipe(switchMap(()=>fetchCrossDatasetReferences(documentId,{versionedClient})));});function useReferringDocuments(documentId){const versionedClient=useClient(DEFAULT_STUDIO_CLIENT_OPTIONS);const documentStore=useDocumentStore();const publishedId=getPublishedId(documentId);const[internalReferences,isInternalReferencesLoading]=useInternalReferences(useMemo(()=>[publishedId,documentStore],[documentStore,publishedId]));const[crossDatasetReferences,isCrossDatasetReferencesLoading]=useCrossDatasetReferences(useMemo(()=>[publishedId,versionedClient],[publishedId,versionedClient]));const projectIds=useMemo(()=>{return Array.from(new Set(crossDatasetReferences==null?void 0:crossDatasetReferences.references.map(crossDatasetReference=>crossDatasetReference.projectId).filter(Boolean))).sort();},[crossDatasetReferences==null?void 0:crossDatasetReferences.references]);const datasetNames=useMemo(()=>{return Array.from(new Set(crossDatasetReferences==null?void 0:crossDatasetReferences.references.map(crossDatasetReference=>(crossDatasetReference==null?void 0:crossDatasetReference.datasetName)||"").filter(datasetName=>Boolean(datasetName)&&datasetName!==""))).sort();},[crossDatasetReferences==null?void 0:crossDatasetReferences.references]);const hasUnknownDatasetNames=useMemo(()=>{return Boolean(crossDatasetReferences==null?void 0:crossDatasetReferences.references.some(crossDatasetReference=>typeof crossDatasetReference.datasetName!=="string"));},[crossDatasetReferences==null?void 0:crossDatasetReferences.references]);return{totalCount:((internalReferences==null?void 0:internalReferences.totalCount)||0)+((crossDatasetReferences==null?void 0:crossDatasetReferences.totalCount)||0),projectIds,datasetNames,hasUnknownDatasetNames,internalReferences,crossDatasetReferences,isLoading:isInternalReferencesLoading||isCrossDatasetReferencesLoading};}function PublishedStatus(props){const{document}=props;const updatedAt=document&&"_updatedAt"in document&&document._updatedAt;const statusLabel=document?"Published":"Not published";const lastUpdatedTimeAgo=useTimeAgo(updatedAt||"",{minimal:true,agoSuffix:true});return/* @__PURE__ */jsx(Tooltip,{portal:true,content:/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{size:1,children:document?"Published ".concat(lastUpdatedTimeAgo):"Not published"})}),children:/* @__PURE__ */jsx(TextWithTone,{tone:"positive",dimmed:!document,muted:!document,size:1,children:/* @__PURE__ */jsx(PublishIcon,{"aria-label":statusLabel})})});}function DraftStatus(props){const{document}=props;const updatedAt=document&&"_updatedAt"in document&&document._updatedAt;const lastUpdatedTimeAgo=useTimeAgo(updatedAt||"",{minimal:true,agoSuffix:true});return/* @__PURE__ */jsx(Tooltip,{portal:true,content:/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{size:1,children:document?"Edited ".concat(lastUpdatedTimeAgo):"No unpublished edits"})}),children:/* @__PURE__ */jsx(TextWithTone,{tone:"caution",dimmed:!document,muted:!document,size:1,children:/* @__PURE__ */jsx(EditIcon,{})})});}function PaneItemPreview(props){const{icon,layout,presence,schemaType,value}=props;const title=isRecord$1(value.title)&&isValidElement(value.title)||isString(value.title)||isNumber(value.title)?value.title:null;const{draft,published,isLoading}=useMemoObservable(()=>getPreviewStateObservable(props.documentPreviewStore,schemaType,value._id,title),[props.documentPreviewStore,schemaType,value._id,title]);const status=isLoading?null:/* @__PURE__ */jsxs(Inline,{space:4,children:[presence&&presence.length>0&&/* @__PURE__ */jsx(DocumentPreviewPresence,{presence}),/* @__PURE__ */jsx(PublishedStatus,{document:published}),/* @__PURE__ */jsx(DraftStatus,{document:draft})]});return/* @__PURE__ */jsx(SanityDefaultPreview,{...getPreviewValueWithFallback({value,draft,published}),isPlaceholder:isLoading,icon,layout,status});}function missingContext(){throw new Error("Pane is missing router context");}const PaneRouterContext=createContext({index:0,groupIndex:0,siblingIndex:0,payload:void 0,params:{},hasGroupSiblings:false,groupLength:0,routerPanesState:[],BackLink:()=>missingContext(),ChildLink:()=>missingContext(),ReferenceChildLink:()=>missingContext(),handleEditReference:()=>missingContext(),ParameterizedLink:()=>missingContext(),replaceCurrent:()=>missingContext(),closeCurrentAndAfter:()=>missingContext(),closeCurrent:()=>missingContext(),duplicateCurrent:()=>missingContext(),setView:()=>missingContext(),setParams:()=>missingContext(),setPayload:()=>missingContext(),navigateIntent:()=>missingContext(),createPathWithParams:()=>missingContext()});const BackLink=forwardRef(function BackLink2(props,ref){const{routerPanesState,groupIndex}=useContext(PaneRouterContext);const panes=useMemo(()=>routerPanesState.slice(0,groupIndex),[groupIndex,routerPanesState]);const state=useMemo(()=>({panes}),[panes]);return/* @__PURE__ */jsx(StateLink,{...props,ref,state});});const PaneLayoutContext=createContext(null);function usePaneLayout(){const pane=useContext(PaneLayoutContext);if(!pane){throw new Error("PaneLayout: missing context value");}return pane;}const ChildLink=forwardRef(function ChildLink2(props,ref){const{childId,childPayload,childParameters,...rest}=props;const{routerPanesState,groupIndex}=useContext(PaneRouterContext);return/* @__PURE__ */jsx(StateLink,{...rest,ref,state:{panes:[...routerPanesState.slice(0,groupIndex+1),[{id:childId,params:childParameters,payload:childPayload}]]}});});const ReferenceChildLink=forwardRef(function ReferenceChildLink2(_ref17,ref){let{documentId,documentType,parentRefPath,children,template,...rest}=_ref17;return/* @__PURE__ */jsx(ChildLink,{...rest,ref,childId:documentId,childPayload:template==null?void 0:template.params,childParameters:{type:documentType,parentRefPath:toString$2(parentRefPath),...(template&&{template:template==null?void 0:template.id})},children});});const ParameterizedLink=forwardRef(function ParameterizedLink2(props,ref){const{routerPanesState:currentPanes,groupIndex,siblingIndex}=useContext(PaneRouterContext);const{params,payload,...rest}=props;const nextParams=useUnique(params);const nextPayload=useUnique(payload);const nextState=useMemo(()=>{const currentGroup=currentPanes[groupIndex];const currentSibling=currentGroup[siblingIndex];const nextSibling={...currentSibling,params:nextParams!=null?nextParams:currentSibling.params,payload:nextPayload!=null?nextPayload:currentSibling.payload};const nextGroup=[...currentGroup.slice(0,siblingIndex),nextSibling,...currentGroup.slice(siblingIndex+1)];const nextPanes=[...currentPanes.slice(0,groupIndex),nextGroup,...currentPanes.slice(groupIndex+1)];return{panes:nextPanes};},[currentPanes,groupIndex,nextParams,nextPayload,siblingIndex]);return/* @__PURE__ */jsx(StateLink,{ref,...rest,state:nextState});});function usePaneRouter(){return useContext(PaneRouterContext);}const EMPTY_ARRAY$6=[];function ReferencePreviewLink(props){const{onClick,type,value}=props;const publishedId=getPublishedId(value==null?void 0:value._id);const documentPresence=useDocumentPresence(publishedId);const documentPreviewStore=useDocumentPreviewStore();const{ReferenceChildLink}=usePaneRouter();const Link=useCallback(function LinkComponent(linkProps){return/* @__PURE__ */jsx(ReferenceChildLink,{documentId:value==null?void 0:value._id,documentType:type==null?void 0:type.name,parentRefPath:EMPTY_ARRAY$6,...linkProps});},[ReferenceChildLink,type==null?void 0:type.name,value==null?void 0:value._id]);return/* @__PURE__ */jsx(PreviewCard,{__unstable_focusRing:true,as:Link,"data-as":"a",onClick,padding:2,radius:2,children:/* @__PURE__ */jsx(PaneItemPreview,{documentPreviewStore,icon:type==null?void 0:type.icon,layout:"default",presence:(documentPresence==null?void 0:documentPresence.length)>0?documentPresence:EMPTY_ARRAY$6,schemaType:type,value})});}var __freeze$v=Object.freeze;var __defProp$K=Object.defineProperty;var __template$v=(cooked,raw)=>__freeze$v(__defProp$K(cooked,"raw",{value:__freeze$v(raw||cooked.slice())}));var _a$v,_b$d,_c$6,_d$4,_e$3;const ChevronWrapper=styled(Box)(_a$v||(_a$v=__template$v(["\n  margin-left: auto;\n"])));const CrossDatasetReferencesDetails=styled.details(_b$d||(_b$d=__template$v(["\n  flex: none;\n\n  &[open] "," {\n    transform: rotate(180deg);\n  }\n"])),ChevronWrapper);const CrossDatasetReferencesSummary=styled.summary(_c$6||(_c$6=__template$v(["\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n"])));const Table=styled.table(_d$4||(_d$4=__template$v(["\n  width: 100%;\n  text-align: left;\n  padding: 0 ",";\n  border-collapse: collapse;\n\n  th {\n    padding: ",";\n  }\n\n  td {\n    padding: 0 ",";\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n"])),_ref18=>{let{theme}=_ref18;return rem(theme.sanity.space[2]);},_ref19=>{let{theme}=_ref19;return rem(theme.sanity.space[1]);},_ref20=>{let{theme}=_ref20;return rem(theme.sanity.space[1]);});const DocumentIdFlex=styled(Flex)(_e$3||(_e$3=__template$v(["\n  min-height: 35px;\n"])));const OtherReferenceCount=props=>{const difference=props.totalCount-props.references.length;if(!difference)return null;return/* @__PURE__ */jsxs(Inline,{space:2,children:[/* @__PURE__ */jsxs(Text,{size:1,muted:true,children:[difference," other reference",difference===1?"":"s"," not shown"," "]}),/* @__PURE__ */jsx(Tooltip,{portal:true,placement:"top",content:/* @__PURE__ */jsx(Container,{width:0,children:/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{size:1,children:"We can't show metadata about these references because no token with access to the datasets they are in was found."})})}),children:/* @__PURE__ */jsx(Text,{size:1,muted:true,children:/* @__PURE__ */jsx(InfoOutlineIcon,{})})})]});};function ConfirmDeleteDialogBody(_ref21){let{crossDatasetReferences,internalReferences,documentTitle,totalCount,action,datasetNames,hasUnknownDatasetNames,onReferenceLinkClick}=_ref21;const schema=useSchema();const toast=useToast();const renderPreviewItem=useCallback(item=>{const type=schema.get(item._type);if(type){return/* @__PURE__ */jsx(ReferencePreviewLink,{type,value:item,onClick:onReferenceLinkClick});}return(// Padding added to match the ReferencePreviewLink styling
/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(SanityDefaultPreview,{icon:UnknownIcon,title:"Preview Unavailable",subtitle:"ID: ".concat(item._id),layout:"default"})}));},[schema,onReferenceLinkClick]);if((internalReferences==null?void 0:internalReferences.totalCount)===0&&(crossDatasetReferences==null?void 0:crossDatasetReferences.totalCount)===0){return/* @__PURE__ */jsxs(Text,{as:"p",children:["Are you sure you want to ",action," ",/* @__PURE__ */jsxs("strong",{children:["\u201C",documentTitle,"\u201D"]}),"?"]});}const documentCount=crossDatasetReferences.totalCount===1?"1 document":"".concat(crossDatasetReferences.totalCount.toLocaleString()," documents");const normalizedDatasetNames=[...datasetNames,...(hasUnknownDatasetNames?["unavailable"]:[])];const datasetsCount=normalizedDatasetNames.length===1?"another dataset":"".concat(normalizedDatasetNames.length," datasets");let datasetNameList="Dataset".concat(normalizedDatasetNames.length===1?"":"s",": ").concat(normalizedDatasetNames.join(", "));if(hasUnknownDatasetNames&&normalizedDatasetNames.length===1){datasetNameList="Unavailable dataset";}return/* @__PURE__ */jsxs(Card,{children:[/* @__PURE__ */jsx(Card,{padding:3,radius:2,tone:"caution",marginBottom:4,flex:"none",children:/* @__PURE__ */jsxs(Flex,{children:[/* @__PURE__ */jsx(Text,{"aria-hidden":"true",size:1,children:/* @__PURE__ */jsx(WarningOutlineIcon,{})}),/* @__PURE__ */jsx(Box,{flex:1,marginLeft:3,children:/* @__PURE__ */jsx(Text,{size:1,children:totalCount===1?/* @__PURE__ */jsxs(Fragment,{children:["1 document refers to \u201C",documentTitle,"\u201D"]}):/* @__PURE__ */jsxs(Fragment,{children:[totalCount.toLocaleString()," documents refer to \u201C",documentTitle,"\u201D"]})})})]})}),/* @__PURE__ */jsx(Box,{flex:"none",marginBottom:4,children:/* @__PURE__ */jsxs(Text,{children:["You may not be able to ",action," \u201C",documentTitle,"\u201D because the following documents refer to it:"]})}),/* @__PURE__ */jsx(Card,{radius:2,shadow:1,marginBottom:4,flex:"auto",children:/* @__PURE__ */jsxs(Flex,{direction:"column",children:[internalReferences.totalCount>0&&/* @__PURE__ */jsxs(Stack,{as:"ul",padding:2,space:3,"data-testid":"internal-references",children:[internalReferences==null?void 0:internalReferences.references.map(item=>/* @__PURE__ */jsx(Box,{as:"li",children:renderPreviewItem(item)},item._id)),internalReferences.totalCount>internalReferences.references.length&&/* @__PURE__ */jsx(Box,{as:"li",padding:3,children:/* @__PURE__ */jsx(OtherReferenceCount,{...internalReferences})})]}),crossDatasetReferences.totalCount>0&&/* @__PURE__ */jsxs(CrossDatasetReferencesDetails,{"data-testid":"cross-dataset-references",style:{// only add the border if needed
borderTop:internalReferences.totalCount>0?"1px solid var(--card-shadow-outline-color)":void 0},children:[/* @__PURE__ */jsx(CrossDatasetReferencesSummary,{children:/* @__PURE__ */jsx(Card,{as:"a",margin:2,radius:2,shadow:1,paddingY:1,children:/* @__PURE__ */jsxs(Flex,{align:"center",margin:2,children:[/* @__PURE__ */jsx(Box,{marginLeft:3,marginRight:4,children:/* @__PURE__ */jsx(Text,{size:3,children:/* @__PURE__ */jsx(DocumentsIcon,{})})}),/* @__PURE__ */jsxs(Flex,{marginRight:4,direction:"column",children:[/* @__PURE__ */jsx(Box,{marginBottom:2,children:/* @__PURE__ */jsxs(Text,{children:[documentCount," in ",datasetsCount]})}),/* @__PURE__ */jsx(Box,{children:/* @__PURE__ */jsx(Text,{title:datasetNameList,textOverflow:"ellipsis",size:1,muted:true,children:datasetNameList})})]}),/* @__PURE__ */jsx(ChevronWrapper,{children:/* @__PURE__ */jsx(Text,{muted:true,children:/* @__PURE__ */jsx(ChevronDownIcon,{})})})]})})}),/* @__PURE__ */jsxs(Box,{overflow:"auto",paddingBottom:2,paddingX:2,children:[/* @__PURE__ */jsxs(Table,{children:[/* @__PURE__ */jsx("thead",{children:/* @__PURE__ */jsxs("tr",{children:[/* @__PURE__ */jsx("th",{children:/* @__PURE__ */jsx(Label,{muted:true,size:0,style:{minWidth:"5rem"},children:"Project ID"})}),/* @__PURE__ */jsx("th",{children:/* @__PURE__ */jsx(Label,{muted:true,size:0,children:"Dataset"})}),/* @__PURE__ */jsx("th",{children:/* @__PURE__ */jsx(Label,{muted:true,size:0,children:"Document ID"})})]})}),/* @__PURE__ */jsx("tbody",{children:crossDatasetReferences.references.filter(reference=>{return"projectId"in reference;}).map((_ref22,index)=>{let{projectId,datasetName,documentId}=_ref22;return(// eslint-disable-next-line react/no-array-index-key
/* @__PURE__ */jsxs("tr",{children:[/* @__PURE__ */jsx("td",{children:/* @__PURE__ */jsx(Text,{size:1,children:projectId})}),/* @__PURE__ */jsx("td",{children:/* @__PURE__ */jsx(Text,{size:1,children:datasetName||"unavailable"})}),/* @__PURE__ */jsx("td",{children:/* @__PURE__ */jsxs(DocumentIdFlex,{align:"center",gap:2,justify:"flex-end",children:[/* @__PURE__ */jsx(Text,{textOverflow:"ellipsis",size:1,children:documentId||"unavailable"}),documentId&&/* @__PURE__ */jsx(CopyToClipboard,{text:documentId,onCopy:()=>{toast.push({title:"Copied document ID to clipboard!",status:"success"});},children:/* @__PURE__ */jsx(Button,{title:"Copy ID to clipboard",mode:"bleed",icon:CopyIcon,fontSize:0})})]})})]},"".concat(documentId,"-").concat(index)));})})]}),/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(OtherReferenceCount,{...crossDatasetReferences})})]})]})]})}),/* @__PURE__ */jsx(Box,{flex:"none",children:/* @__PURE__ */jsxs(Text,{children:["If you ",action," this document, documents that refer to it will no longer be able to access it."]})})]});}var __freeze$u=Object.freeze;var __defProp$J=Object.defineProperty;var __template$u=(cooked,raw)=>__freeze$u(__defProp$J(cooked,"raw",{value:__freeze$u(raw||cooked.slice())}));var _a$u,_b$c;const DialogBody=styled(Box).attrs({padding:4})(_a$u||(_a$u=__template$u(["\n  box-sizing: border-box;\n"])));const LoadingContainer=styled(Flex).attrs({align:"center",direction:"column",justify:"center"})(_b$c||(_b$c=__template$u(["\n  height: 300px;\n"])));function ConfirmDeleteDialog(_ref23){let{id,type,action="delete",onCancel,onConfirm}=_ref23;const dialogId="deletion-confirmation-".concat(useId());const{internalReferences,crossDatasetReferences,isLoading,totalCount,projectIds,datasetNames,hasUnknownDatasetNames}=useReferringDocuments(id);const capitalizedAction="".concat(action.substring(0,1).toUpperCase()).concat(action.substring(1));const documentTitle=/* @__PURE__ */jsx(DocTitle,{document:useMemo(()=>({_id:id,_type:type}),[id,type])});const showConfirmButton=!isLoading;return/* @__PURE__ */jsx(Dialog,{width:1,id:dialogId,header:"".concat(capitalizedAction," document?"),footer:/* @__PURE__ */jsxs(Grid,{columns:showConfirmButton?2:1,gap:2,paddingX:4,paddingY:3,children:[/* @__PURE__ */jsx(Button,{mode:"ghost",onClick:onCancel,text:"Cancel"}),showConfirmButton&&/* @__PURE__ */jsx(Button,{"data-testid":"confirm-delete-button",text:totalCount>0?"".concat(capitalizedAction," anyway"):"".concat(capitalizedAction," now"),tone:"critical",onClick:onConfirm})]}),onClose:onCancel,onClickOutside:onCancel,children:/* @__PURE__ */jsx(DialogBody,{children:crossDatasetReferences&&internalReferences&&!isLoading?/* @__PURE__ */jsx(ConfirmDeleteDialogBody,{crossDatasetReferences,internalReferences,documentTitle,isLoading,totalCount,action,projectIds,datasetNames,hasUnknownDatasetNames,onReferenceLinkClick:onCancel}):/* @__PURE__ */jsxs(LoadingContainer,{"data-testid":"loading-container",children:[/* @__PURE__ */jsx(Spinner,{muted:true}),/* @__PURE__ */jsx(Box,{marginTop:3,children:/* @__PURE__ */jsx(Text,{align:"center",muted:true,size:1,children:"Looking for referring documents\u2026"})})]})})});}function ConfirmDeleteDialogContainer(props){const id=useId();const[error,setError]=useState(null);const handleRetry=useCallback(()=>setError(null),[]);return error?/* @__PURE__ */jsx(Dialog,{id:"dialog-error-".concat(id),"data-testid":"confirm-delete-error-dialog",header:"Error",footer:/* @__PURE__ */jsx(Flex,{paddingX:4,paddingY:3,direction:"column",children:/* @__PURE__ */jsx(Button,{mode:"ghost",text:"Retry",onClick:handleRetry})}),onClose:props.onCancel,children:/* @__PURE__ */jsx(Box,{padding:4,children:/* @__PURE__ */jsx(Text,{children:"An error occurred while loading referencing documents."})})}):/* @__PURE__ */jsx(ErrorBoundary,{onCatch:setError,children:/* @__PURE__ */jsx(ConfirmDeleteDialog,{...props})});}const MENU_GROUP_POPOVER_PROPS={constrainSize:true,placement:"left-start",portal:true};function PaneMenuButtonItem(props){const{disabled,isAfterGroup,node}=props;if(node.type==="divider"){return/* @__PURE__ */jsx(MenuDivider,{});}if(node.type==="group"){if(node.children.length===0){return null;}if(node.expanded){return/* @__PURE__ */jsxs(Fragment,{children:[isAfterGroup&&/* @__PURE__ */jsx(MenuDivider,{}),node.title&&/* @__PURE__ */jsx(Box,{padding:2,paddingBottom:1,children:/* @__PURE__ */jsx(Label,{muted:true,size:0,children:node.title})}),node.children.map((child,childIndex)=>{var _a;return/* @__PURE__ */jsx(PaneMenuButtonItem,{disabled:disabled||Boolean(node.disabled),isAfterGroup:((_a=node.children[childIndex-1])==null?void 0:_a.type)==="group",node:child},child.key);})]});}return/* @__PURE__ */jsxs(Fragment,{children:[isAfterGroup&&/* @__PURE__ */jsx(MenuDivider,{}),/* @__PURE__ */jsx(MenuGroup,{disabled,icon:node.icon,popover:MENU_GROUP_POPOVER_PROPS,text:node.title,children:node.children.map((child,childIndex)=>{var _a;return/* @__PURE__ */jsx(PaneMenuButtonItem,{disabled:disabled||Boolean(node.disabled),isAfterGroup:((_a=node.children[childIndex-1])==null?void 0:_a.type)==="group",node:child},child.key);})})]});}return/* @__PURE__ */jsxs(Fragment,{children:[isAfterGroup&&/* @__PURE__ */jsx(MenuDivider,{}),/* @__PURE__ */jsx(PaneContextMenuItemResolver,{disabled,node})]});}function PaneContextMenuItemResolver(props){const{node}=props;if(node.intent){return/* @__PURE__ */jsx(PaneContextIntentMenuItem,{...props,intent:node.intent});}return/* @__PURE__ */jsx(PaneContextMenuItem,{...props});}function PaneContextMenuItem(props){var _a;const{disabled,node}=props;const tooltipContent=typeof node.disabled==="object"&&/* @__PURE__ */jsx(Text,{size:1,children:node.disabled.reason});return/* @__PURE__ */jsx(TooltipOfDisabled,{content:tooltipContent,placement:"left",children:/* @__PURE__ */jsx(MenuItem,{disabled:disabled||Boolean(node.disabled),hotkeys:(_a=node.hotkey)==null?void 0:_a.split("+"),icon:node.icon,iconRight:node.iconRight||node.selected&&CheckmarkIcon,onClick:node.onAction,pressed:node.selected,text:node.title,tone:node.tone})});}function PaneContextIntentMenuItem(props){var _a;const{disabled,intent,node}=props;const tooltipContent=typeof node.disabled==="object"&&/* @__PURE__ */jsx(Text,{size:1,children:node.disabled.reason});const intentLink=useIntentLink({intent:intent.type,params:intent.params});const handleClick=useCallback(event=>{intentLink.onClick(event);node.onAction();},[intentLink,node]);return/* @__PURE__ */jsx(TooltipOfDisabled,{content:tooltipContent,placement:"left",children:/* @__PURE__ */jsx(MenuItem,{as:"a",disabled:disabled||Boolean(node.disabled),hotkeys:(_a=node.hotkey)==null?void 0:_a.split("+"),href:intentLink.href,icon:node.icon,iconRight:node.selected?CheckmarkIcon:void 0,onClick:handleClick,pressed:node.selected,text:node.title,tone:node.tone})});}const CONTEXT_MENU_POPOVER_PROPS={constrainSize:true,placement:"bottom",portal:true};function nodesHasTone(nodes,tone){return nodes.some(node=>{return node.type==="item"&&node.tone===tone||node.type==="group"&&nodesHasTone(node.children,tone);});}function PaneContextMenuButton(props){const{nodes}=props;const id=useId();const hasCritical=nodesHasTone(nodes,"critical");const hasCaution=nodesHasTone(nodes,"caution");return/* @__PURE__ */jsx(MenuButton,{button:/* @__PURE__ */jsx(StatusButton,{icon:EllipsisVerticalIcon,mode:"bleed",title:"Show menu",tone:hasCritical?"critical":hasCaution?"caution":void 0}),id,menu:/* @__PURE__ */jsx(Menu,{children:nodes.map((node,nodeIndex)=>{var _a;const isAfterGroup=((_a=nodes[nodeIndex-1])==null?void 0:_a.type)==="group";return/* @__PURE__ */jsx(PaneMenuButtonItem,{isAfterGroup,node},node.key);})}),popover:CONTEXT_MENU_POPOVER_PROPS});}const PANE_DEBUG=false;const PANE_COLLAPSED_WIDTH=51;const PANE_DEFAULT_MIN_WIDTH=PANE_COLLAPSED_WIDTH*4;const PaneContext=createContext(null);var __freeze$t=Object.freeze;var __defProp$I=Object.defineProperty;var __template$t=(cooked,raw)=>__freeze$t(__defProp$I(cooked,"raw",{value:__freeze$t(raw||cooked.slice())}));var _a$t;const Root$e=styled(Layer)(_a$t||(_a$t=__template$t(["\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n"])));function PaneDivider(_ref24){let{disabled,element}=_ref24;const{resize}=usePaneLayout();const[dragging,setDragging]=useState(false);const handleMouseDown=useCallback(event=>{if(!element)return;setDragging(true);event.preventDefault();const startX=event.pageX;resize("start",element,0);const handleMouseMove=e=>{e.preventDefault();const deltaX=e.pageX-startX;resize("move",element,deltaX);};const handleMouseUp=e=>{e.preventDefault();setDragging(false);window.removeEventListener("mousemove",handleMouseMove);window.removeEventListener("mouseup",handleMouseUp);resize("end",element,0);};window.addEventListener("mousemove",handleMouseMove);window.addEventListener("mouseup",handleMouseUp);},[element,resize]);return/* @__PURE__ */jsx(Root$e,{"data-disabled":disabled?"":void 0,"data-dragging":dragging?"":void 0,onMouseDown:handleMouseDown});}var __freeze$s=Object.freeze;var __defProp$H=Object.defineProperty;var __template$s=(cooked,raw)=>__freeze$s(__defProp$H(cooked,"raw",{value:__freeze$s(raw||cooked.slice())}));var _a$s;const Root$d=styled(Card)(_a$s||(_a$s=__template$s(["\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n"])));const Pane=forwardRef(function Pane2(props,ref){var _a2,_b,_c;const{children,currentMinWidth:currentMinWidthProp,currentMaxWidth:currentMaxWidthProp,flex:flexProp=1,id,minWidth:minWidthProp,maxWidth:maxWidthProp,selected=false,...restProps}=props;const[rootElement,setRootElement]=useState(null);const{collapse,collapsed:layoutCollapsed,expand,expandedElement,mount,panes}=usePaneLayout();const pane=panes.find(p=>p.element===rootElement);const paneIndex=pane&&panes.indexOf(pane);const nextPane=typeof paneIndex==="number"?panes[paneIndex+1]:void 0;const isLast=paneIndex===panes.length-1;const collapsed=layoutCollapsed?false:(pane==null?void 0:pane.collapsed)||false;const nextCollapsed=(nextPane==null?void 0:nextPane.collapsed)||false;const forwardedRef=useForwardedRef(ref);const flex=(_a2=pane==null?void 0:pane.flex)!=null?_a2:flexProp;const currentMinWidth=(_b=pane==null?void 0:pane.currentMinWidth)!=null?_b:currentMinWidthProp;const currentMaxWidth=(_c=pane==null?void 0:pane.currentMaxWidth)!=null?_c:currentMaxWidthProp;const setRef=useCallback(refValue=>{setRootElement(refValue);forwardedRef.current=refValue;},[forwardedRef]);useEffect(()=>{if(!rootElement)return void 0;return mount(rootElement,{currentMinWidth:currentMinWidthProp,currentMaxWidth:currentMaxWidthProp,flex:flexProp,id,minWidth:minWidthProp,maxWidth:maxWidthProp});},[currentMinWidthProp,currentMaxWidthProp,flexProp,id,minWidthProp,maxWidthProp,mount,rootElement]);const handleCollapse=useCallback(()=>{if(!rootElement)return;collapse(rootElement);},[collapse,rootElement]);const handleExpand=useCallback(()=>{if(!rootElement)return;expand(rootElement);},[expand,rootElement]);const contextValue=useMemo(()=>({collapse:handleCollapse,collapsed:layoutCollapsed?false:collapsed,expand:handleExpand,index:paneIndex,isLast,rootElement}),[collapsed,handleCollapse,handleExpand,isLast,layoutCollapsed,paneIndex,rootElement]);const minWidth=useMemo(()=>{if(layoutCollapsed){return void 0;}if(collapsed)return PANE_COLLAPSED_WIDTH;if(currentMinWidth===0){return minWidthProp||PANE_DEFAULT_MIN_WIDTH;}if(isLast){return minWidthProp||PANE_DEFAULT_MIN_WIDTH;}return currentMinWidth||minWidthProp||PANE_DEFAULT_MIN_WIDTH;},[collapsed,currentMinWidth,isLast,layoutCollapsed,minWidthProp]);const maxWidth=useMemo(()=>{if(collapsed)return PANE_COLLAPSED_WIDTH;if(layoutCollapsed&&isLast){return void 0;}if(isLast){if(maxWidthProp){return currentMaxWidth!=null?currentMaxWidth:maxWidthProp;}return void 0;}return currentMaxWidth!=null?currentMaxWidth:maxWidthProp;},[collapsed,currentMaxWidth,isLast,layoutCollapsed,maxWidthProp]);const hidden=layoutCollapsed&&!isLast;const divider=useMemo(()=>!isLast&&!layoutCollapsed&&/* @__PURE__ */jsx(LegacyLayerProvider,{zOffset:"paneResizer",children:/* @__PURE__ */jsx(PaneDivider,{disabled:collapsed||nextCollapsed,element:rootElement})}),[collapsed,isLast,layoutCollapsed,nextCollapsed,rootElement]);const style=useMemo(()=>({flex,minWidth,maxWidth:maxWidth===Infinity?void 0:maxWidth}),[flex,minWidth,maxWidth]);return/* @__PURE__ */jsxs(Fragment,{children:[/* @__PURE__ */jsx(LegacyLayerProvider,{zOffset:"pane",children:/* @__PURE__ */jsx(PaneContext.Provider,{value:contextValue,children:/* @__PURE__ */jsxs(Root$d,{"data-testid":"pane","data-ui":"Pane",tone:"inherit",hidden,id,overflow:layoutCollapsed?void 0:"hidden",...restProps,"data-pane-collapsed":collapsed?"":void 0,"data-pane-index":paneIndex,"data-pane-selected":selected?"":void 0,ref:setRef,style,children:[PANE_DEBUG,/* @__PURE__ */jsx(BoundaryElementProvider,{element:rootElement,children:!hidden&&/* @__PURE__ */jsx(Flex,{direction:"column",height:"fill",children})})]})})}),divider]});});function usePane(){const pane=useContext(PaneContext);if(!pane){throw new Error("Pane: missing context value");}return pane;}var __freeze$r=Object.freeze;var __defProp$G=Object.defineProperty;var __template$r=(cooked,raw)=>__freeze$r(__defProp$G(cooked,"raw",{value:__freeze$r(raw||cooked.slice())}));var _a$r;const Root$c=styled(Card)(_a$r||(_a$r=__template$r(["\n  position: relative;\n  outline: none;\n"])));Root$c.displayName="PaneContent__root";const PaneContent=forwardRef(function PaneContent2(props,ref){const{as,children,overflow,padding,...restProps}=props;const{collapsed}=usePane();const{collapsed:layoutCollapsed}=usePaneLayout();return/* @__PURE__ */jsx(Root$c,{"data-testid":"pane-content",forwardedAs:as,...restProps,flex:1,hidden:collapsed,overflow:layoutCollapsed?void 0:overflow,padding,ref,tone:"inherit",children});});var __freeze$q=Object.freeze;var __defProp$F=Object.defineProperty;var __template$q=(cooked,raw)=>__freeze$q(__defProp$F(cooked,"raw",{value:__freeze$q(raw||cooked.slice())}));var _a$q,_b$b;const Root$b=styled(Layer)(_a$q||(_a$q=__template$q(["\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-shadow-outline-color);\n  }\n"])));const RootCard$1=styled(Card)(_b$b||(_b$b=__template$q(["\n  padding-bottom: env(safe-area-inset-bottom);\n"])));const PaneFooter=forwardRef(function PaneFooter2(props,ref){const{children,padding}=props;const{collapsed}=usePane();return/* @__PURE__ */jsx(LegacyLayerProvider,{zOffset:"paneFooter",children:/* @__PURE__ */jsx(Root$b,{"data-testid":"pane-footer",hidden:collapsed,ref,children:/* @__PURE__ */jsx(RootCard$1,{tone:"inherit",children:/* @__PURE__ */jsx(Box,{padding,children})})})});});var __freeze$p=Object.freeze;var __defProp$E=Object.defineProperty;var __template$p=(cooked,raw)=>__freeze$p(__defProp$E(cooked,"raw",{value:__freeze$p(raw||cooked.slice())}));var _a$p,_b$a,_c$5,_d$3,_e$2,_f$2;const Root$a=styled(Layer)(_a$p||(_a$p=__template$p(["\n  line-height: 0;\n  position: sticky;\n  top: 0;\n\n  &:not([data-collapsed]):after {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: -1px;\n    border-bottom: 1px solid var(--card-shadow-outline-color);\n  }\n"])));const Layout=styled(Flex)(_b$a||(_b$a=__template$p(["\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n"])));const TitleCard=styled(Card)(_ref25=>{let{theme}=_ref25;const{fg,bg}=theme.sanity.color.card.enabled;return css(_c$5||(_c$5=__template$p(["\n    background-color: ",";\n\n    [data-ui='Text'] {\n      color: ",";\n    }\n  "])),bg,fg);});const TitleTextSkeleton=styled(TextSkeleton)(_d$3||(_d$3=__template$p(["\n  width: 66%;\n  max-width: 175px;\n"])));const TitleText=styled(Text)(_e$2||(_e$2=__template$p(["\n  cursor: default;\n  outline: none;\n"])));const TabsBox=styled(Box)(_ref26=>{let{theme}=_ref26;const{color,space}=theme.sanity;return css(_f$2||(_f$2=__template$p(["\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ","px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ",", var(--card-bg-color));\n      width: ","px;\n      pointer-events: none;\n    }\n  "])),space[3],rgba(color.base.bg,0),space[3]);});const PaneHeader=forwardRef(function PaneHeader2(props,ref){const{actions,backButton,contentAfter,loading,subActions,tabs,tabIndex,title}=props;const{collapse,collapsed,expand,rootElement:paneElement}=usePane();const paneRect=useElementRect(paneElement||null);const layoutStyle=useMemo(()=>({width:collapsed?(paneRect==null?void 0:paneRect.height)||window.innerHeight:void 0}),[collapsed,paneRect]);const handleTitleClick=useCallback(()=>{if(collapsed)return;collapse();},[collapse,collapsed]);const handleLayoutClick=useCallback(()=>{if(!collapsed)return;expand();},[collapsed,expand]);const showTabsOrSubActions=Boolean(!collapsed&&(tabs||subActions));return/* @__PURE__ */jsx(LayerProvider,{zOffset:100,children:/* @__PURE__ */jsx(Root$a,{"data-collapsed":collapsed?"":void 0,"data-testid":"pane-header",ref,children:/* @__PURE__ */jsx(LegacyLayerProvider,{zOffset:"paneHeader",children:/* @__PURE__ */jsxs(Card,{"data-collapsed":collapsed?"":void 0,tone:"inherit",children:[/* @__PURE__ */jsxs(Layout,{onClick:handleLayoutClick,padding:2,sizing:"border",style:layoutStyle,children:[backButton&&/* @__PURE__ */jsx(Box,{flex:"none",padding:1,children:backButton}),/* @__PURE__ */jsxs(TitleCard,{__unstable_focusRing:true,flex:1,forwardedAs:"button",marginRight:actions?1:0,onClick:handleTitleClick,paddingLeft:backButton?1:3,paddingY:3,tabIndex,children:[loading&&/* @__PURE__ */jsx(TitleTextSkeleton,{animated:true,radius:1}),!loading&&/* @__PURE__ */jsx(TitleText,{textOverflow:"ellipsis",weight:"semibold",children:title})]}),actions&&/* @__PURE__ */jsx(Flex,{align:"center",hidden:collapsed,children:/* @__PURE__ */jsx(LegacyLayerProvider,{zOffset:"paneHeader",children:actions})})]}),showTabsOrSubActions&&/* @__PURE__ */jsxs(Flex,{align:"center",hidden:collapsed,overflow:"auto",paddingBottom:3,paddingX:3,paddingTop:1,children:[/* @__PURE__ */jsx(TabsBox,{flex:1,marginRight:subActions?3:0,children:tabs}),subActions&&subActions]}),!collapsed&&contentAfter&&contentAfter]})})})});});function PaneHeaderActionButton(props){const{node,padding}=props;if(node.type==="item"){return/* @__PURE__ */jsx(PaneHeaderMenuItemActionButton,{node,padding});}if(node.type==="group"){return/* @__PURE__ */jsx(PaneHeaderMenuGroupActionButton,{node,padding});}console.warn('unknown menu node (expected `type: "item" | "group"`):',node);return null;}function PaneHeaderMenuItemActionButton(props){var _a;const{node,padding}=props;if(node.intent){return/* @__PURE__ */jsx(PaneHeaderActionIntentButton,{...props,intent:node.intent});}const disabledTooltipContent=typeof node.disabled==="object"&&/* @__PURE__ */jsx(Text,{size:1,children:node.disabled.reason});return/* @__PURE__ */jsx(TooltipOfDisabled,{content:disabledTooltipContent,placement:"bottom",children:/* @__PURE__ */jsx(StatusButton,{disabled:Boolean(node.disabled),hotkey:(_a=node.hotkey)==null?void 0:_a.split("+"),icon:node.icon,label:disabledTooltipContent?void 0:node.title,onClick:node.onAction,padding,selected:node.selected,tone:node.tone})});}function PaneHeaderActionIntentButton(props){var _a;const{intent,node,padding}=props;const disabledTooltipContent=typeof node.disabled==="object"&&/* @__PURE__ */jsx(Text,{size:1,children:node.disabled.reason});const intentLink=useIntentLink({intent:intent.type,params:intent.params});const handleClick=useCallback(event=>{intentLink.onClick(event);node.onAction();},[intentLink,node]);return/* @__PURE__ */jsx(TooltipOfDisabled,{content:disabledTooltipContent,placement:"bottom",children:/* @__PURE__ */jsx(StatusButton,{as:"a",disabled:Boolean(node.disabled),hotkey:(_a=node.hotkey)==null?void 0:_a.split("+"),href:intentLink.href,icon:node.icon,label:disabledTooltipContent?void 0:node.title,onClick:handleClick,padding,selected:node.selected,tone:node.tone})});}function PaneHeaderMenuGroupActionButton(props){var _a;const{node,padding}=props;return/* @__PURE__ */jsx(MenuButton,{button:/* @__PURE__ */jsx(StatusButton,{disabled:node.disabled,icon:(_a=node.icon)!=null?_a:UnknownIcon,label:node.title,padding}),id:useId(),menu:/* @__PURE__ */jsx(Menu,{children:node.children.map((child,idx)=>{var _a2;return/* @__PURE__ */jsx(PaneMenuButtonItem,{disabled:Boolean(node.disabled),isAfterGroup:((_a2=node.children[idx-1])==null?void 0:_a2.type)==="group",node:child},child.key);})})});}var __freeze$o=Object.freeze;var __defProp$D=Object.defineProperty;var __template$o=(cooked,raw)=>__freeze$o(__defProp$D(cooked,"raw",{value:__freeze$o(raw||cooked.slice())}));var _a$o;const Root$9=styled(Card)(_a$o||(_a$o=__template$o(["\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n"])));function isMenuNodeButton(node){return(node.type==="item"||node.type==="group")&&node.renderAsButton;}const isNotMenuNodeButton=negate(isMenuNodeButton);function resolveMenuNodes(params){var _a,_b;const{fieldActions=[],menuItems,menuItemGroups}=params;const nodes=[];let keyOffset=0;for(let i=0;i<fieldActions.length;i+=1){const a=fieldActions[i];nodes.push(mapFieldActionToPaneMenuNode(a,"".concat(i,"-").concat(a.type)));}keyOffset+=nodes.length;const groups=[];for(const itemGroup of menuItemGroups){const group=groups.find(g=>g.key===itemGroup.id);if(!group){groups.push({type:"group",key:itemGroup.id,children:[],expanded:true,renderAsButton:false,title:itemGroup.title});}}const ungroupedItems=[];for(let i=0;i<menuItems.length;i+=1){const item=menuItems[i];let group=item.group&&groups.find(g=>g.key===item.group);if(item.group&&!group){group={type:"group",key:item.group,expanded:true,icon:item.icon,title:item.group,children:[],renderAsButton:false};groups.push(group);}if(group){group.children.push({type:"item",key:"".concat(keyOffset+i,"-item"),hotkey:item.shortcut,icon:item.icon,onAction:()=>params.actionHandler(item),renderAsButton:(_a=item.showAsAction)!=null?_a:false,selected:item.selected,title:item.title,tone:item.tone});}else{ungroupedItems.push({type:"item",key:"".concat(keyOffset+i,"-item"),hotkey:item.shortcut,icon:item.icon,onAction:()=>params.actionHandler(item),renderAsButton:(_b=item.showAsAction)!=null?_b:false,selected:item.selected,title:item.title,tone:item.tone});}}return[...ungroupedItems,...groups,...nodes];}function mapFieldActionToPaneMenuNode(a,key){var _a,_b,_c;if(a.type==="divider"){return{type:"divider",key};}if(a.type==="group"){return{type:"group",key,children:a.children.map((child,childIdx)=>mapFieldActionToPaneMenuNode(child,"".concat(key,"-").concat(childIdx,"-").concat(child.type))),disabled:a.disabled,expanded:(_a=a.expanded)!=null?_a:true,icon:a.icon,title:a.title,renderAsButton:(_b=a.renderAsButton)!=null?_b:false};}return{type:"item",key,intent:a.intent,disabled:a.disabled,icon:a.icon,iconRight:a.iconRight,onAction:a.onAction,renderAsButton:(_c=a.renderAsButton)!=null?_c:false,selected:a.selected,title:a.title,tone:a.tone};}const IntentButton=forwardRef(function IntentButton2(props,ref){const{intent,...restProps}=props;const Link=useMemo(()=>// eslint-disable-next-line @typescript-eslint/no-shadow
forwardRef(function Link2(linkProps,linkRef){return/* @__PURE__ */jsx(IntentLink,{...linkProps,intent:intent.type,params:intent.params,ref:linkRef});}),[intent]);return props.disabled?/* @__PURE__ */jsx(Button,{...props,as:"a",role:"link","aria-disabled":"true"}):/* @__PURE__ */jsx(Button,{...restProps,as:Link,"data-as":"a",ref});});function InsufficientPermissionsMessageTooltip(_ref27){let{reveal,loading,children}=_ref27;const currentUser=useCurrentUser();if(!reveal){return/* @__PURE__ */jsx(Fragment,{children});}return/* @__PURE__ */jsx(Tooltip,{content:loading?/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{children:"Loading\u2026"})}):/* @__PURE__ */jsx(InsufficientPermissionsMessage,{currentUser}),portal:true,children:/* @__PURE__ */jsx("div",{children})});}const POPOVER_PROPS$3={constrainSize:true,placement:"bottom",portal:true};const getIntent=(schema,templates,item)=>{var _a;const typeName=(_a=templates.find(t=>t.id===item.templateId))==null?void 0:_a.schemaType;if(!typeName)return null;const baseParams={template:item.templateId,type:typeName,id:item.initialDocumentId};return{type:"create",params:item.parameters?[baseParams,item.parameters]:baseParams};};function PaneHeaderCreateButton(_ref28){let{templateItems}=_ref28;const schema=useSchema();const templates=useTemplates();const[templatePermissions,isTemplatePermissionsLoading]=useTemplatePermissions({templateItems});const nothingGranted=useMemo(()=>{return!isTemplatePermissionsLoading&&(templatePermissions==null?void 0:templatePermissions.every(permission=>!permission.granted));},[isTemplatePermissionsLoading,templatePermissions]);const permissionsById=useMemo(()=>{if(!templatePermissions)return{};return templatePermissions.reduce((acc,permission)=>{acc[permission.id]=permission;return acc;},{});},[templatePermissions]);if(nothingGranted){return/* @__PURE__ */jsx(InsufficientPermissionsMessageTooltip,{reveal:true,loading:isTemplatePermissionsLoading,children:/* @__PURE__ */jsx(Button,{"aria-label":"Insufficient permissions",icon:ComposeIcon,mode:"bleed",disabled:true,"data-testid":"action-intent-button"})});}if(templateItems.length===1){const firstItem=templateItems[0];const permissions=permissionsById[firstItem.id];const disabled=!(permissions==null?void 0:permissions.granted);const intent=getIntent(schema,templates,firstItem);if(!intent)return null;return/* @__PURE__ */jsx(InsufficientPermissionsMessageTooltip,{reveal:disabled,loading:isTemplatePermissionsLoading,children:/* @__PURE__ */jsx(IntentButton,{"aria-label":firstItem.title,icon:firstItem.icon||ComposeIcon,intent,mode:"bleed",disabled,"data-testid":"action-intent-button"})});}return/* @__PURE__ */jsx(MenuButton,{button:/* @__PURE__ */jsx(Button,{icon:ComposeIcon,mode:"bleed","data-testid":"multi-action-intent-button"}),id:"create-menu",menu:/* @__PURE__ */jsxs(Menu,{children:[/* @__PURE__ */jsx(Box,{paddingX:3,paddingTop:3,paddingBottom:2,children:/* @__PURE__ */jsx(Label,{muted:true,children:"Create"})}),templateItems.map((item,itemIndex)=>{const permissions=permissionsById[item.id];const disabled=!(permissions==null?void 0:permissions.granted);const intent=getIntent(schema,templates,item);const template=templates.find(t=>t.id===item.templateId);if(!template||!intent)return null;const Link=forwardRef((linkProps,linkRef)=>disabled?/* @__PURE__ */jsx("button",{type:"button",disabled:true,...linkProps,ref:linkRef}):/* @__PURE__ */jsx(IntentLink,{...linkProps,intent:intent.type,params:intent.params,ref:linkRef}));Link.displayName="Link";return/* @__PURE__ */jsx(InsufficientPermissionsMessageTooltip,{reveal:disabled,loading:isTemplatePermissionsLoading,children:/* @__PURE__ */jsx(MenuItem,{as:Link,"data-as":disabled?"button":"a",text:item.title||template.title,"aria-label":disabled?"Insufficient permissions":item.title||template.title,disabled,"data-testid":"action-intent-button-".concat(itemIndex)})},item.id);})]}),popover:POPOVER_PROPS$3});}function isNonNullable(value){return value!==null&&value!==void 0;}const hashObject=value=>{const sortObject=v=>{if(typeof v!=="object"||!v)return v;if(Array.isArray(v))return v.map(sortObject);return Object.entries(v).sort((_ref29,_ref30)=>{let[keyA]=_ref29;let[keyB]=_ref30;return keyA.localeCompare(keyB,"en");});};const normalize=v=>JSON.parse(JSON.stringify(v));return JSON.stringify(sortObject(normalize(value)));};const PaneHeaderActions=memo(function PaneHeaderActions2(props){const{initialValueTemplateItems:initialValueTemplateItemsFromStructure=EMPTY_ARRAY$7,menuItems=EMPTY_ARRAY$7,menuItemGroups=EMPTY_ARRAY$7,actionHandlers=EMPTY_OBJECT}=props;const templates=useTemplates();const handleAction=useCallback(item=>{if(typeof item.action==="string"&&!(item.action in actionHandlers)){console.warn("No handler for action:",item.action);return false;}const handler=// eslint-disable-next-line no-nested-ternary
typeof item.action==="function"?item.action:typeof item.action==="string"?actionHandlers[item.action]:null;if(handler){handler(item.params);return true;}return false;},[actionHandlers]);const menuNodes=useMemo(()=>resolveMenuNodes({actionHandler:handleAction,menuItemGroups,menuItems:menuItems.filter(item=>{var _a;return((_a=item.intent)==null?void 0:_a.type)!=="create";})}),[handleAction,menuItemGroups,menuItems]);const actionNodes=useMemo(()=>menuNodes.filter(isMenuNodeButton),[menuNodes]);const contextMenuNodes=useMemo(()=>menuNodes.filter(isNotMenuNodeButton),[menuNodes]);const initialValueTemplateItemFromMenuItems=useMemo(()=>{return menuItems.map((item,menuItemIndex)=>{var _a;if(((_a=item.intent)==null?void 0:_a.type)!=="create")return null;const{params}=item.intent;if(!params)return null;const intentParams=Array.isArray(params)?params[0]:params;const templateParams=Array.isArray(params)?params[1]:void 0;const templateId=intentParams.template||intentParams.type;if(!templateId)return null;const template=templates.find(t=>t.id===templateId);if(!template)return null;const initialDocumentId=intentParams.id;return{item,template,templateParams,menuItemIndex,initialDocumentId};}).filter(isNonNullable).map(_ref31=>{let{initialDocumentId,item,template,menuItemIndex,templateParams}=_ref31;const initialValueTemplateItem={id:"menuItem".concat(menuItemIndex),initialDocumentId,templateId:template.id,type:"initialValueTemplateItem",title:item.title||template.title,icon:item.icon,description:template.description,parameters:templateParams,schemaType:template.schemaType};return initialValueTemplateItem;});},[menuItems,templates]);const combinedInitialValueTemplates=useMemo(()=>{return uniqBy([...initialValueTemplateItemFromMenuItems,...initialValueTemplateItemsFromStructure],item=>hashObject([item.initialDocumentId,item.templateId,item.parameters]));},[initialValueTemplateItemFromMenuItems,initialValueTemplateItemsFromStructure]);return/* @__PURE__ */jsxs(Flex,{gap:1,children:[combinedInitialValueTemplates.length>0&&/* @__PURE__ */jsx(PaneHeaderCreateButton,{templateItems:combinedInitialValueTemplates}),actionNodes.map(node=>/* @__PURE__ */jsx(PaneHeaderActionButton,{node},node.key)),contextMenuNodes.length>0&&/* @__PURE__ */jsx(PaneContextMenuButton,{nodes:contextMenuNodes})]});});const DocumentPaneContext=createContext(null);function useDocumentPane(){const documentPane=useContext(DocumentPaneContext);if(!documentPane){throw new Error("DocumentPane: missing context value");}return documentPane;}const DISABLED_REASON_TITLE$4={NOTHING_TO_DELETE:"This document doesn\u2019t yet exist or is already deleted"};const DeleteAction=_ref32=>{let{id,type,draft,onComplete}=_ref32;const{setIsDeleting:paneSetIsDeleting}=useDocumentPane();const{delete:deleteOp}=useDocumentOperation(id,type);const[isDeleting,setIsDeleting]=useState(false);const[isConfirmDialogOpen,setConfirmDialogOpen]=useState(false);const handleCancel=useCallback(()=>{setConfirmDialogOpen(false);onComplete();},[onComplete]);const handleConfirm=useCallback(()=>{setIsDeleting(true);setConfirmDialogOpen(false);paneSetIsDeleting(true);deleteOp.execute();onComplete();},[deleteOp,onComplete,paneSetIsDeleting]);const handle=useCallback(()=>{setConfirmDialogOpen(true);},[]);const[permissions,isPermissionsLoading]=useDocumentPairPermissions({id,type,permission:"delete"});const currentUser=useCurrentUser();if(!isPermissionsLoading&&!(permissions==null?void 0:permissions.granted)){return{tone:"critical",icon:TrashIcon,disabled:true,label:"Delete",title:/* @__PURE__ */jsx(InsufficientPermissionsMessage,{operationLabel:"delete this document",currentUser})};}return{tone:"critical",icon:TrashIcon,disabled:isDeleting||Boolean(deleteOp.disabled)||isPermissionsLoading,title:deleteOp.disabled&&DISABLED_REASON_TITLE$4[deleteOp.disabled]||"",label:isDeleting?"Deleting\u2026":"Delete",shortcut:"Ctrl+Alt+D",onHandle:handle,dialog:isConfirmDialogOpen&&{type:"custom",component:/* @__PURE__ */jsx(ConfirmDeleteDialogContainer,{action:"delete",id:(draft==null?void 0:draft._id)||id,type,onCancel:handleCancel,onConfirm:handleConfirm})}};};DeleteAction.action="delete";const DISABLED_REASON_TITLE$3={NO_CHANGES:"This document has no unpublished changes",NOT_PUBLISHED:"This document is not published"};const DiscardChangesAction=_ref33=>{let{id,type,published,liveEdit,onComplete}=_ref33;const{discardChanges}=useDocumentOperation(id,type);const[isConfirmDialogOpen,setConfirmDialogOpen]=useState(false);const[permissions,isPermissionsLoading]=useDocumentPairPermissions({id,type,permission:"discardDraft"});const currentUser=useCurrentUser();const handleConfirm=useCallback(()=>{discardChanges.execute();onComplete();},[discardChanges,onComplete]);const handle=useCallback(()=>{setConfirmDialogOpen(true);},[]);const dialog=useMemo(()=>isConfirmDialogOpen&&{type:"confirm",tone:"critical",onCancel:onComplete,onConfirm:handleConfirm,message:/* @__PURE__ */jsx(Fragment,{children:"Are you sure you want to discard all changes since last published?"})},[handleConfirm,isConfirmDialogOpen,onComplete]);if(!published||liveEdit){return null;}if(!isPermissionsLoading&&!(permissions==null?void 0:permissions.granted)){return{tone:"critical",icon:ResetIcon,disabled:true,label:"Discard changes",title:/* @__PURE__ */jsx(InsufficientPermissionsMessage,{operationLabel:"discard changes in this document",currentUser})};}return{tone:"critical",icon:ResetIcon,disabled:Boolean(discardChanges.disabled)||isPermissionsLoading,title:discardChanges.disabled&&DISABLED_REASON_TITLE$3[discardChanges.disabled]||"",label:"Discard changes",onHandle:handle,dialog};};DiscardChangesAction.action="discardChanges";const DISABLED_REASON_TITLE$2={NOTHING_TO_DUPLICATE:"This document doesn\u2019t yet exist so there\u2018s nothing to duplicate"};const DuplicateAction=_ref34=>{let{id,type,onComplete}=_ref34;const{duplicate}=useDocumentOperation(id,type);const{navigateIntent}=useRouter();const[isDuplicating,setDuplicating]=useState(false);const[permissions,isPermissionsLoading]=useDocumentPairPermissions({id,type,permission:"duplicate"});const currentUser=useCurrentUser();const handle=useCallback(()=>{const dupeId=uuid();setDuplicating(true);duplicate.execute(dupeId);navigateIntent("edit",{id:dupeId,type});onComplete();},[duplicate,navigateIntent,onComplete,type]);if(!isPermissionsLoading&&!(permissions==null?void 0:permissions.granted)){return{icon:CopyIcon,disabled:true,label:"Duplicate",title:/* @__PURE__ */jsx(InsufficientPermissionsMessage,{operationLabel:"duplicate this document",currentUser})};}return{icon:CopyIcon,disabled:isDuplicating||Boolean(duplicate.disabled)||isPermissionsLoading,label:isDuplicating?"Duplicating\u2026":"Duplicate",title:duplicate.disabled&&DISABLED_REASON_TITLE$2[duplicate.disabled]||"",onHandle:handle};};DuplicateAction.action="duplicate";const HistoryRestoreAction=_ref35=>{let{id,type,revision,onComplete}=_ref35;const{restore}=useDocumentOperation(id,type);const event=useDocumentOperationEvent(id,type);const{navigateIntent}=useRouter();const prevEvent=useRef(event);const[isConfirmDialogOpen,setConfirmDialogOpen]=useState(false);const handleConfirm=useCallback(()=>{restore.execute(revision);onComplete();},[restore,revision,onComplete]);useEffect(()=>{if(!event||event===prevEvent.current)return;if(event.type==="success"&&event.op==="restore"){navigateIntent("edit",{id,type});}prevEvent.current=event;},[event,id,navigateIntent,type]);const handle=useCallback(()=>{setConfirmDialogOpen(true);},[]);const dialog=useMemo(()=>{if(isConfirmDialogOpen){return{type:"confirm",tone:"critical",onCancel:onComplete,onConfirm:handleConfirm,message:/* @__PURE__ */jsx(Fragment,{children:"Are you sure you want to restore this document?"})};}return null;},[handleConfirm,isConfirmDialogOpen,onComplete]);const isRevisionInitialVersion=revision==="@initial";const isRevisionLatestVersion=revision===void 0;if(isRevisionLatestVersion){return null;}return{label:"Restore",color:"primary",onHandle:handle,title:isRevisionInitialVersion?"You can't restore to the initial version":"Restore to this version",icon:RestoreIcon,dialog,disabled:isRevisionInitialVersion};};HistoryRestoreAction.action="restore";const DISABLED_REASON_TITLE$1={LIVE_EDIT_ENABLED:"Cannot publish since liveEdit is enabled for this document type",ALREADY_PUBLISHED:"Already published",NO_CHANGES:"No unpublished changes",NOT_READY:"Operation not ready"};function getDisabledReason(reason,publishedAt){if(reason==="ALREADY_PUBLISHED"&&publishedAt){return/* @__PURE__ */jsx(Fragment,{children:/* @__PURE__ */jsxs("span",{children:["Published ",publishedAt]})});}return DISABLED_REASON_TITLE$1[reason];}const PublishAction=props=>{var _a;const{id,type,liveEdit,draft,published}=props;const[publishState,setPublishState]=useState(null);const{publish}=useDocumentOperation(id,type);const validationStatus=useValidationStatus(id,type);const syncState=useSyncState(id,type);const{changesOpen,onHistoryOpen,documentId,documentType}=useDocumentPane();const editState=useEditState(documentId,documentType);const revision=((editState==null?void 0:editState.draft)||(editState==null?void 0:editState.published)||{})._rev;const hasValidationErrors=validationStatus.validation.some(isValidationErrorMarker);const[publishScheduled,setPublishScheduled]=useState(false);const isSyncing=syncState.isSyncing;const isValidating=validationStatus.isValidating;const[permissions,isPermissionsLoading]=useDocumentPairPermissions({id,type,permission:"publish"});const currentUser=useCurrentUser();const lastPublishedTimeAgo=useTimeAgo((published==null?void 0:published._updatedAt)||"",{minimal:true,agoSuffix:true});const title=publish.disabled?getDisabledReason(publish.disabled,lastPublishedTimeAgo)||"":hasValidationErrors?"There are validation errors that need to be fixed before this document can be published":"";const hasDraft=Boolean(draft);const doPublish=useCallback(()=>{publish.execute();setPublishState("publishing");},[publish]);useEffect(()=>{const validationComplete=validationStatus.isValidating===false&&validationStatus.revision!==revision;if(!publishScheduled||isSyncing||!validationComplete){return;}if(!hasValidationErrors){doPublish();}setPublishScheduled(false);},[isSyncing,doPublish,hasValidationErrors,publishScheduled,validationStatus.revision,revision,isValidating,validationStatus.isValidating]);useEffect(()=>{const didPublish=publishState==="publishing"&&!hasDraft;if(didPublish){if(changesOpen){onHistoryOpen();}}const nextState=didPublish?"published":null;const delay=didPublish?200:4e3;const timer=setTimeout(()=>{setPublishState(nextState);},delay);return()=>clearTimeout(timer);},[changesOpen,publishState,hasDraft,onHistoryOpen]);const handle=useCallback(()=>{if(syncState.isSyncing||validationStatus.isValidating||validationStatus.revision!==revision){setPublishScheduled(true);}else{doPublish();}},[syncState.isSyncing,validationStatus.isValidating,validationStatus.revision,revision,doPublish]);if(liveEdit){return{tone:"positive",label:"Publish",title:"Live Edit is enabled for this content type and publishing happens automatically as you make changes",disabled:true};}if(!isPermissionsLoading&&!(permissions==null?void 0:permissions.granted)){return{tone:"positive",label:"Publish",title:/* @__PURE__ */jsx(InsufficientPermissionsMessage,{operationLabel:"publish this document",currentUser}),disabled:true};}const disabled=Boolean(publishScheduled||((_a=editState==null?void 0:editState.transactionSyncLock)==null?void 0:_a.enabled)||publishState==="publishing"||publishState==="published"||hasValidationErrors||publish.disabled);return{disabled:disabled||isPermissionsLoading,tone:"positive",label:// eslint-disable-next-line no-nested-ternary
publishState==="published"?"Published":publishScheduled||publishState==="publishing"?"Publishing\u2026":"Publish",// @todo: Implement loading state, to show a `<Button loading />` state
// loading: publishScheduled || publishState === 'publishing',
icon:publishState==="published"?CheckmarkIcon:PublishIcon,// eslint-disable-next-line no-nested-ternary
title:publishScheduled?"Waiting for tasks to finish before publishing":publishState==="published"||publishState==="publishing"?null:title,shortcut:disabled||publishScheduled?null:"Ctrl+Alt+P",onHandle:handle};};PublishAction.action="publish";const DISABLED_REASON_TITLE={NOT_PUBLISHED:"This document is not published"};const UnpublishAction=_ref36=>{let{id,type,draft,onComplete,liveEdit}=_ref36;const{unpublish}=useDocumentOperation(id,type);const[isConfirmDialogOpen,setConfirmDialogOpen]=useState(false);const[permissions,isPermissionsLoading]=useDocumentPairPermissions({id,type,permission:"unpublish"});const currentUser=useCurrentUser();const handleCancel=useCallback(()=>{setConfirmDialogOpen(false);onComplete();},[onComplete]);const handleConfirm=useCallback(()=>{setConfirmDialogOpen(false);unpublish.execute();onComplete();},[onComplete,unpublish]);const dialog=useMemo(()=>{if(isConfirmDialogOpen){return{type:"dialog",onClose:onComplete,content:/* @__PURE__ */jsx(ConfirmDeleteDialogContainer,{id:(draft==null?void 0:draft._id)||id,type,action:"unpublish",onCancel:handleCancel,onConfirm:handleConfirm})};}return null;},[draft,id,handleCancel,handleConfirm,isConfirmDialogOpen,onComplete,type]);if(liveEdit){return null;}if(!isPermissionsLoading&&!(permissions==null?void 0:permissions.granted)){return{tone:"critical",icon:UnpublishIcon,label:"Unpublish",title:/* @__PURE__ */jsx(InsufficientPermissionsMessage,{operationLabel:"unpublish this document",currentUser}),disabled:true};}return{tone:"critical",icon:UnpublishIcon,disabled:Boolean(unpublish.disabled)||isPermissionsLoading,label:"Unpublish",title:unpublish.disabled?DISABLED_REASON_TITLE[unpublish.disabled]:"",onHandle:()=>setConfirmDialogOpen(true),dialog};};UnpublishAction.action="unpublish";const LiveEditBadge=props=>{const{liveEdit}=props;if(liveEdit){return{label:"Live",color:"danger"};}return null;};const _DEBUG=false;const EMPTY_PARAMS$2={};const LOADING_PANE=Symbol("LOADING_PANE");const DOCUMENT_PANEL_PORTAL_ELEMENT="documentPanelPortalElement";const state={activePanes:[]};function setActivePanes(panes){state.activePanes=panes;}function getIntentState(intent,params,routerState,payload){var _a;const panes=(routerState==null?void 0:routerState.panes)||[];const activePanes=state.activePanes||[];const editDocumentId=params.id||uuid();const isTemplate=intent==="create"&&params.template;for(let i=activePanes.length-1;i>=0;i--){const pane=activePanes[i];if(typeof pane!=="object")continue;if(((_a=pane.canHandleIntent)==null?void 0:_a.call(pane,intent,params,{pane,index:i}))||// see `resolveIntent.ts` for more info
pane.type==="documentList"&&pane.schemaTypeName===params.type&&pane.options.filter==="_type == $type"){const paneParams=isTemplate?{template:params.template}:EMPTY_PARAMS$2;return{panes:panes.slice(0,i).concat([[{id:editDocumentId,params:paneParams,payload}]])};}}return{intent,params,payload};}const EMPTY_PARAMS$1={};function legacyEditParamsToState(params){try{return JSON.parse(decodeURIComponent(params));}catch(err){console.warn("Failed to parse JSON parameters");return{};}}function encodePanesSegment(panes){return(panes||[]).map(group=>group.map(encodeChunks).join("|")).map(encodeURIComponent).join(";");}function legacyEditParamsToPath(params){return JSON.stringify(params);}function toState(pathSegment){return parsePanesSegment(decodeURIComponent(pathSegment));}function toPath(panes){return encodePanesSegment(panes);}const router=route.create("/",[// "Asynchronous intent resolving" route
route.intents("/intent"),// Legacy fallback route, will be redirected to new format
route.create("/edit/:type/:editDocumentId",[route.create({path:"/:params",transform:{params:{toState:legacyEditParamsToState,toPath:legacyEditParamsToPath}}})]),// The regular path - when the intent can be resolved to a specific pane
route.create({path:"/:panes",// Legacy URLs, used to handle redirects
children:[route.create("/:action",route.create("/:legacyEditDocumentId"))],transform:{panes:{toState,toPath}}})]);const panePattern=/^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i;const isParam=str=>/^[a-z0-9]+=[^=]+/i.test(str);const isPayload=str=>/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);const exclusiveParams=["view","since","rev","inspect","comment"];const isTruthy=Boolean;function parseChunks(chunks,initial){return chunks.reduce((pane,chunk)=>{if(isParam(chunk)){const key=chunk.slice(0,chunk.indexOf("="));const value=chunk.slice(key.length+1);pane.params={...pane.params,[decodeURIComponent(key)]:decodeURIComponent(value)};}else if(isPayload(chunk)){pane.payload=tryParseBase64Payload(chunk);}else{console.warn("Unknown pane segment: %s - skipping",chunk);}return pane;},{...initial,params:EMPTY_PARAMS$1,payload:void 0});}function encodeChunks(pane,index,group){const{payload,params={},id}=pane;const[firstSibling]=group;const paneIsFirstSibling=pane===firstSibling;const sameAsFirst=index!==0&&id===firstSibling.id;const encodedPayload=typeof payload==="undefined"?void 0:btoa(JSON.stringify(payload));const encodedParams=Object.entries(params).filter(entry=>{var _a;const[key,value]=entry;if(!value)return false;if(paneIsFirstSibling)return true;const valueFromFirstSibling=(_a=firstSibling.params)==null?void 0:_a[key];if(value===valueFromFirstSibling&&!exclusiveParams.includes(key))return false;return true;}).map(_ref37=>{let[key,value]=_ref37;return"".concat(encodeURIComponent(key),"=").concat(encodeURIComponent(value));});return[sameAsFirst?"":id].concat([encodedParams.length>0&&encodedParams,encodedPayload].filter(isTruthy).flat()).join(",")||",";}function parsePanesSegment(str){if(str.indexOf(",{")!==-1){return parseOldPanesSegment(str);}return str.split(";").map(group=>{const[firstSibling,...restOfSiblings]=group.split("|").map(segment=>{const[id,...chunks]=segment.split(",");return parseChunks(chunks,{id});});return[firstSibling,...restOfSiblings.map(sibling=>({...firstSibling,...sibling,id:sibling.id||firstSibling.id,params:{...omit(firstSibling.params,exclusiveParams),...sibling.params},payload:sibling.payload||firstSibling.payload}))];}).filter(group=>group.length>0);}function parseOldPanesSegment(str){const chunks=[];let buffer=str;while(buffer.length){const[match,id,payloadChunk]=buffer.match(panePattern)||[];if(!match){buffer=buffer.slice(1);continue;}const payload=payloadChunk&&tryParsePayload(payloadChunk);chunks.push({id,payload});buffer=buffer.slice(match.length);}return[chunks];}function tryParsePayload(json){try{return JSON.parse(json);}catch(err){console.warn("Failed to parse parameters: ".concat(err.message));return void 0;}}function tryParseBase64Payload(data){return data?tryParsePayload(atob(data)):void 0;}const DOCUMENT_PANEL_MIN_WIDTH=320;const DOCUMENT_PANEL_INITIAL_MIN_WIDTH=600;const DOCUMENT_INSPECTOR_MIN_WIDTH=320;const DOCUMENT_INSPECTOR_MAX_WIDTH=540;const EMPTY_PARAMS={};const INSPECT_ACTION_PREFIX="inspect:";const DEFAULT_MENU_ITEM_GROUPS=[{id:"inspectors"},{id:"links"}];const HISTORY_INSPECTOR_NAME="sanity/desk/history";const VALIDATION_INSPECTOR_NAME="sanity/desk/validation";const COMMENTS_INSPECTOR_NAME="sanity/desk/comments";var __freeze$n=Object.freeze;var __defProp$C=Object.defineProperty;var __template$n=(cooked,raw)=>__freeze$n(__defProp$C(cooked,"raw",{value:__freeze$n(raw||cooked.slice())}));var _a$n;const StyledAvatar=styled(Avatar)(_a$n||(_a$n=__template$n(["\n  svg > ellipse {\n    stroke: transparent;\n  }\n"])));const SYMBOLS=/[^\p{Alpha}\p{White_Space}]/gu;const WHITESPACE=/\p{White_Space}+/u;function nameToInitials(fullName){const namesArray=fullName.replace(SYMBOLS,"").split(WHITESPACE);if(namesArray.length===1){return"".concat(namesArray[0].charAt(0)).toUpperCase();}return"".concat(namesArray[0].charAt(0)).concat(namesArray[namesArray.length-1].charAt(0));}function CommentsAvatar(props){const{user:userProp,...restProps}=props;const user=userProp;const initials=useMemo(()=>nameToInitials((user==null?void 0:user.displayName)||""),[user==null?void 0:user.displayName]);if(!user)return/* @__PURE__ */jsx(StyledAvatar,{...restProps});return/* @__PURE__ */jsx(StyledAvatar,{initials,src:user==null?void 0:user.imageUrl,title:user==null?void 0:user.displayName,...restProps});}const AVATAR_HEIGHT=25;const INLINE_STYLE$1={minWidth:AVATAR_HEIGHT};function SpacerAvatar(){return/* @__PURE__ */jsx("div",{style:INLINE_STYLE$1});}var __freeze$m=Object.freeze;var __defProp$B=Object.defineProperty;var __template$m=(cooked,raw)=>__freeze$m(__defProp$B(cooked,"raw",{value:__freeze$m(raw||cooked.slice())}));var _a$m;const TOOLTIP_DELAY$3={open:500,close:0};const Span=styled.span(_ref38=>{let{theme}=_ref38;var _a2,_b,_c;const{regular}=(_a2=theme.sanity.fonts)==null?void 0:_a2.text.weights;const{hovered}=(_b=theme.sanity.color)==null?void 0:_b.card;const{bg}=((_c=theme.sanity.color.selectable)==null?void 0:_c.caution.pressed)||{};return css(_a$m||(_a$m=__template$m(["\n    font-weight: ",";\n    color: var(--card-link-fg-color);\n    border-radius: 2px;\n    background-color: ",";\n    padding: 1px;\n    box-sizing: border-box;\n\n    &[data-active='true'] {\n      background-color: ",";\n    }\n  "])),regular,hovered.bg,bg);});function MentionInlineBlock(props){const{selected,userId}=props;const[user,loading]=useUser(userId);const currentUser=useCurrentUser();if(!user||loading)return/* @__PURE__ */jsx(Span,{children:"@Loading"});return/* @__PURE__ */jsx(Tooltip,{portal:true,open:selected,delay:TOOLTIP_DELAY$3,content:/* @__PURE__ */jsxs(Flex,{align:"center",padding:2,gap:1,children:[/* @__PURE__ */jsx(Flex,{children:/* @__PURE__ */jsx(CommentsAvatar,{user})}),/* @__PURE__ */jsx(Text,{size:1,children:user.displayName})]}),children:/* @__PURE__ */jsxs(Span,{"data-selected":selected,"data-active":(currentUser==null?void 0:currentUser.id)===userId,children:["@",user.displayName]})});}var __freeze$l=Object.freeze;var __defProp$A=Object.defineProperty;var __template$l=(cooked,raw)=>__freeze$l(__defProp$A(cooked,"raw",{value:__freeze$l(raw||cooked.slice())}));var _a$l;const NormalText=styled(Text)(_a$l||(_a$l=__template$l(["\n  word-break: break-word;\n"])));function NormalBlock(props){const{children}=props;return/* @__PURE__ */jsx(NormalText,{size:1,children});}var __freeze$k=Object.freeze;var __defProp$z=Object.defineProperty;var __template$k=(cooked,raw)=>__freeze$k(__defProp$z(cooked,"raw",{value:__freeze$k(raw||cooked.slice())}));var _a$k;const PortableTextWrap=styled(Stack)(()=>{return css(_a$k||(_a$k=__template$k(["\n    & > [data-ui='Text']:not(:first-child) {\n      margin-top: 1em; // todo: improve\n    }\n\n    & > [data-ui='Text']:has(> span:empty) {\n      display: none;\n    }\n  "])));});const EMPTY_ARRAY$5=[];const components={block:{normal:_ref39=>{let{children}=_ref39;return/* @__PURE__ */jsx(NormalBlock,{children});},// Since we do not offer any formatting options, we can just use the normal block for all of these.
h1:_ref40=>{let{children}=_ref40;return/* @__PURE__ */jsx(NormalBlock,{children});},h2:_ref41=>{let{children}=_ref41;return/* @__PURE__ */jsx(NormalBlock,{children});},h3:_ref42=>{let{children}=_ref42;return/* @__PURE__ */jsx(NormalBlock,{children});},h4:_ref43=>{let{children}=_ref43;return/* @__PURE__ */jsx(NormalBlock,{children});},h5:_ref44=>{let{children}=_ref44;return/* @__PURE__ */jsx(NormalBlock,{children});},h6:_ref45=>{let{children}=_ref45;return/* @__PURE__ */jsx(NormalBlock,{children});},blockquote:_ref46=>{let{children}=_ref46;return/* @__PURE__ */jsx(NormalBlock,{children});},code:_ref47=>{let{children}=_ref47;return/* @__PURE__ */jsx(NormalBlock,{children});}},list:{bullet:_ref48=>{let{children}=_ref48;return children;},number:_ref49=>{let{children}=_ref49;return/* @__PURE__ */jsx(Fragment,{children});},checkmarks:_ref50=>{let{children}=_ref50;return/* @__PURE__ */jsx(Fragment,{children});}},listItem:{bullet:_ref51=>{let{children}=_ref51;return/* @__PURE__ */jsx(NormalBlock,{children});},number:_ref52=>{let{children}=_ref52;return/* @__PURE__ */jsx(NormalBlock,{children});},checkmarks:_ref53=>{let{children}=_ref53;return/* @__PURE__ */jsx(NormalBlock,{children});}},marks:{// Since we do not offer any formatting options, we can just use the normal block for all of these.
strong:_ref54=>{let{children}=_ref54;return/* @__PURE__ */jsx(Fragment,{children});},em:_ref55=>{let{children}=_ref55;return/* @__PURE__ */jsx(Fragment,{children});},code:_ref56=>{let{children}=_ref56;return/* @__PURE__ */jsx(Fragment,{children});},underline:_ref57=>{let{children}=_ref57;return/* @__PURE__ */jsx(Fragment,{children});},strikeThrough:_ref58=>{let{children}=_ref58;return/* @__PURE__ */jsx(Fragment,{children});},link:_ref59=>{let{children}=_ref59;return/* @__PURE__ */jsx(Fragment,{children});}},types:{mention:props=>{var _a2;return/* @__PURE__ */jsx(MentionInlineBlock,{userId:(_a2=props==null?void 0:props.value)==null?void 0:_a2.userId,selected:false});}}};function CommentMessageSerializer(props){const{blocks}=props;return/* @__PURE__ */jsx(PortableTextWrap,{children:/* @__PURE__ */jsx(PortableText,{value:blocks||EMPTY_ARRAY$5,components})});}const mentionObject=defineField({name:"mention",type:"object",fields:[{name:"userId",type:"string"}]});const blockType=defineField({type:"block",name:"block",of:[mentionObject],styles:[{title:"Normal",value:"normal"}],lists:[]});const portableTextType=defineArrayMember({type:"array",name:"body",of:[blockType]});const schema=Schema.compile({name:"comments",types:[portableTextType]});const editorSchemaType=schema.get("body");const SendIcon=forwardRef(function Icon(props,ref){return/* @__PURE__ */jsx("svg",{"data-sanity-icon":"send",fill:"none",height:"1em",ref,viewBox:"0 0 25 25",width:"1em",xmlns:"http://www.w3.org/2000/svg",...props,children:/* @__PURE__ */jsx("path",{clipRule:"evenodd",d:"M21.1602 12.5L7.16016 19.5V14.8765L13.6656 12.4989L7.16016 9.97149L7.16016 5.5L21.1602 12.5Z",stroke:"currentColor",strokeWidth:1.2,strokeLinejoin:"round"})});});const MentionIcon=forwardRef(function Icon(props,ref){return/* @__PURE__ */jsxs("svg",{"data-sanity-icon":"mention",fill:"none",height:"1em",ref,viewBox:"0 0 25 25",width:"1em",xmlns:"http://www.w3.org/2000/svg",...props,children:[/* @__PURE__ */jsx("path",{d:"M16.6633 18.9383C15.539 19.6562 14.2034 20.0723 12.7705 20.0723C8.77022 20.0723 5.52734 16.8294 5.52734 12.8291C5.52734 8.82881 8.77022 5.58594 12.7705 5.58594C16.7708 5.58594 20.0137 8.82881 20.0137 12.8291C20.0137 13.6623 19.8249 14.7093 19.6141 15.2077C19.5578 15.3408 19.479 15.4845 19.3936 15.6238C19.0955 16.1106 18.5507 16.3721 17.9807 16.4018V16.4018C16.8271 16.462 15.8588 15.5428 15.8588 14.3877V9.27302",stroke:"currentColor",strokeWidth:1.2,strokeLinejoin:"round"}),/* @__PURE__ */jsx("circle",{cx:"12.5732",cy:"12.8291",r:"3.08691",stroke:"currentColor",strokeWidth:1.2})]});});const AddCommentIcon=forwardRef(function Icon(props,ref){return/* @__PURE__ */jsxs("svg",{"data-sanity-icon":"add-comment",fill:"none",height:"1em",ref,viewBox:"0 0 25 25",width:"1em",xmlns:"http://www.w3.org/2000/svg",...props,children:[/* @__PURE__ */jsx("path",{d:"M12.3368 5.97917H6.89453C5.78996 5.97917 4.89453 6.8746 4.89453 7.97917V13.4881C4.89453 14.5926 5.78996 15.4881 6.89453 15.4881H8.69808V19.2916L12.5016 15.4881H16.207C17.3115 15.4881 18.207 14.5926 18.207 13.4881V11.7158",stroke:"currentColor",strokeWidth:1.2,strokeLinejoin:"round"}),/* @__PURE__ */jsx("path",{d:"M18.2081 2.08333V9.87058M14.3145 5.97695H22.1017",stroke:"currentColor",strokeWidth:1.2,strokeLinejoin:"round"})]});});const CommentIcon=forwardRef(function Icon(props,ref){return/* @__PURE__ */jsx("svg",{"data-sanity-icon":"comment",width:"1em",height:"1em",ref,viewBox:"0 0 25 25",fill:"none",xmlns:"http://www.w3.org/2000/svg",...props,children:/* @__PURE__ */jsx("path",{d:"M7.5 15.5H9.5V19.5L13.5 15.5H17.5C18.6046 15.5 19.5 14.6046 19.5 13.5V7.5C19.5 6.39543 18.6046 5.5 17.5 5.5H7.5C6.39543 5.5 5.5 6.39543 5.5 7.5V13.5C5.5 14.6046 6.39543 15.5 7.5 15.5Z",stroke:"currentColor",strokeLinejoin:"round",strokeWidth:"1.2"})});});function useCommentHasChanged(message){const prevMessage=useRef(message);return useMemo(()=>!isEqual$1(prevMessage.current,message),[message]);}function hasCommentMessageValue(value){if(!value)return false;return value==null?void 0:value.some(block=>{var _a;return isPortableTextTextBlock(block)&&((_a=(block==null?void 0:block.children)||[])==null?void 0:_a.some(c=>isPortableTextSpan(c)?c.text:c.userId));});}const CommentInputContext=React.createContext(null);function CommentInputProvider(props){const{children,expandOnFocus=false,focused,focusOnMount=false,mentionOptions,onMentionMenuOpenChange,value,readOnly}=props;const editor=usePortableTextEditor();const[mentionsMenuOpen,setMentionsMenuOpen]=useState(false);const[mentionsSearchTerm,setMentionsSearchTerm]=useState("");const[selectionAtMentionInsert,setSelectionAtMentionInsert]=useState(null);const canSubmit=useMemo(()=>hasCommentMessageValue(value),[value]);const hasChanges=useCommentHasChanged(value);const focusEditor=useCallback(()=>{if(readOnly)return;PortableTextEditor.focus(editor);},[editor,readOnly]);const closeMentions=useCallback(()=>{setMentionsMenuOpen(false);setMentionsSearchTerm("");setSelectionAtMentionInsert(null);},[]);const openMentions=useCallback(()=>{setMentionsMenuOpen(true);setMentionsSearchTerm("");setMentionsMenuOpen(true);setSelectionAtMentionInsert(PortableTextEditor.getSelection(editor));},[editor]);const onBeforeInput=useCallback(event=>{const selection=PortableTextEditor.getSelection(editor);const cursorOffset=selection?selection.focus.offset:0;const focusChild=PortableTextEditor.focusChild(editor);const focusSpan=isPortableTextSpan$1(focusChild)&&focusChild||void 0;const isInsertText=event.inputType==="insertText";const isDeleteText=event.inputType==="deleteContentBackward";const isInsertingAtChar=isInsertText&&event.data==="@";const lastIndexOfAt=(focusSpan==null?void 0:focusSpan.text.substring(0,cursorOffset).lastIndexOf("@"))||0;const isWhitespaceCharBeforeCursorPosition=(focusSpan==null?void 0:focusSpan.text.substring(cursorOffset-1,cursorOffset))===" ";const filterStartsWithSpaceChar=isInsertText&&event.data===" "&&!mentionsSearchTerm;if(isInsertingAtChar&&(cursorOffset<1||isWhitespaceCharBeforeCursorPosition)){openMentions();return;}if(filterStartsWithSpaceChar||isDeleteText&&((focusSpan==null?void 0:focusSpan.text.length)===1||lastIndexOfAt===((focusSpan==null?void 0:focusSpan.text.length)||0)-1)){closeMentions();return;}if(isPortableTextSpan$1(focusChild)){let term=focusChild.text.substring(lastIndexOfAt+1,cursorOffset);if(isInsertText){term+=event.data;}if(isDeleteText){term=term.substring(0,term.length-1);}setMentionsSearchTerm(term);}},[closeMentions,editor,mentionsSearchTerm,openMentions]);const insertAtChar=useCallback(()=>{setMentionsMenuOpen(true);PortableTextEditor.insertChild(editor,editor.schemaTypes.span,{text:"@"});setSelectionAtMentionInsert(PortableTextEditor.getSelection(editor));},[editor]);useDidUpdate(mentionsMenuOpen,()=>onMentionMenuOpenChange==null?void 0:onMentionMenuOpenChange(mentionsMenuOpen));const insertMention=useCallback(userId=>{var _a,_b;const mentionSchemaType=editor.schemaTypes.inlineObjects.find(t=>t.name==="mention");let mentionPath;const[span,spanPath]=selectionAtMentionInsert&&PortableTextEditor.findByPath(editor,selectionAtMentionInsert.focus.path)||[];if(span&&isPortableTextSpan$1(span)&&spanPath&&mentionSchemaType){PortableTextEditor.focus(editor);const offset=(_a=PortableTextEditor.getSelection(editor))==null?void 0:_a.focus.offset;if(typeof offset!=="undefined"){PortableTextEditor.delete(editor,{anchor:{path:spanPath,offset:span.text.lastIndexOf("@")},focus:{path:spanPath,offset}},{mode:"selected"});mentionPath=PortableTextEditor.insertChild(editor,mentionSchemaType,{_type:"mention",userId});}const focusBlock=PortableTextEditor.focusBlock(editor);if(focusBlock&&isPortableTextTextBlock$1(focusBlock)&&mentionPath){const mentionKeyPathSegment=mentionPath==null?void 0:mentionPath.slice(-1)[0];const nextChildKey=(_b=focusBlock.children[focusBlock.children.findIndex(c=>isKeySegment(mentionKeyPathSegment)&&c._key===mentionKeyPathSegment._key)+1])==null?void 0:_b._key;if(nextChildKey){const path=[{_key:focusBlock._key},"children",{_key:nextChildKey}];const sel={anchor:{path,offset:0},focus:{path,offset:0}};PortableTextEditor.select(editor,sel);PortableTextEditor.focus(editor);}}}},[editor,selectionAtMentionInsert]);const ctxValue=useMemo(()=>({canSubmit,closeMentions,editor,expandOnFocus,focused,focusEditor,focusOnMount,hasChanges,insertAtChar,insertMention,mentionOptions,mentionsMenuOpen,mentionsSearchTerm,onBeforeInput,openMentions,readOnly:Boolean(readOnly),value}),[canSubmit,closeMentions,editor,expandOnFocus,focused,focusEditor,focusOnMount,hasChanges,insertAtChar,insertMention,mentionOptions,mentionsMenuOpen,mentionsSearchTerm,onBeforeInput,openMentions,readOnly,value]);return/* @__PURE__ */jsx(CommentInputContext.Provider,{value:ctxValue,children});}function useCommentInput(){const ctx=useContext(CommentInputContext);if(!ctx){throw new Error("useCommentInputContext must be used within a CommentInputProvider");}return ctx;}var __freeze$j=Object.freeze;var __defProp$y=Object.defineProperty;var __template$j=(cooked,raw)=>__freeze$j(__defProp$y(cooked,"raw",{value:__freeze$j(raw||cooked.slice())}));var _a$j;const InnerFlex=styled(Flex)(_a$j||(_a$j=__template$j([""])));const SKELETON_INLINE_STYLE$1={width:"50%"};function MentionsMenuItem(props){const{user,onSelect}=props;const[loadedUser]=useUser(user.id);const avatar=/* @__PURE__ */jsx(CommentsAvatar,{user:loadedUser,status:user.canBeMentioned?void 0:"inactive"});const text=loadedUser?/* @__PURE__ */jsx(Text,{size:1,textOverflow:"ellipsis",title:loadedUser.displayName,children:loadedUser.displayName}):/* @__PURE__ */jsx(TextSkeleton,{size:1,style:SKELETON_INLINE_STYLE$1});const handleSelect=useCallback(()=>{onSelect(user.id);},[onSelect,user.id]);return/* @__PURE__ */jsx(Card,{as:"button",disabled:!user.canBeMentioned,onClick:handleSelect,padding:2,radius:2,children:/* @__PURE__ */jsxs(Flex,{align:"center",gap:3,children:[/* @__PURE__ */jsxs(InnerFlex,{align:"center",gap:2,flex:1,children:[avatar,/* @__PURE__ */jsx(Box,{children:text})]}),!user.canBeMentioned&&/* @__PURE__ */jsx(Badge,{fontSize:1,mode:"outline",children:"Unauthorized"})]})});}const EMPTY_ARRAY$4=[];const Root$8=styled(Stack)({maxWidth:"220px"// todo: improve
});const ITEM_HEIGHT=41;const LIST_PADDING=4;const MAX_ITEMS=7;const FlexWrap=styled(Flex)({maxHeight:ITEM_HEIGHT*MAX_ITEMS+LIST_PADDING*2+ITEM_HEIGHT/2});const MentionsMenu=React.forwardRef(function MentionsMenu2(props,ref){const{loading,onSelect,options=[],inputElement}=props;const[searchTerm,setSearchTerm]=useState("");const commandListRef=useRef(null);useImperativeHandle(ref,()=>{return{setSearchTerm(term){setSearchTerm(term);}};},[]);const renderItem=useCallback(itemProps=>{return/* @__PURE__ */jsx(MentionsMenuItem,{user:itemProps,onSelect});},[onSelect]);const getItemDisabled=useCallback(index=>{var _a;return!((_a=options==null?void 0:options[index])==null?void 0:_a.canBeMentioned);},[options]);const filteredOptions=useMemo(()=>{if(!searchTerm)return options||EMPTY_ARRAY$4;const filtered=options==null?void 0:options.filter(option=>{var _a;return(_a=option==null?void 0:option.displayName)==null?void 0:_a.toLowerCase().includes(searchTerm.toLowerCase());});return filtered||EMPTY_ARRAY$4;},[options,searchTerm]);if(loading){return/* @__PURE__ */jsx(Root$8,{children:/* @__PURE__ */jsx(Flex,{align:"center",justify:"center",padding:4,children:/* @__PURE__ */jsx(Spinner,{muted:true,size:1})})});}const _inputElement=inputElement?inputElement:void 0;return/* @__PURE__ */jsxs(Flex,{direction:"column",height:"fill","data-testid":"comments-mentions-menu",children:[filteredOptions.length===0&&/* @__PURE__ */jsx(Box,{padding:5,children:/* @__PURE__ */jsx(Text,{align:"center",size:1,muted:true,children:"No users found"})}),filteredOptions.length>0&&/* @__PURE__ */jsx(FlexWrap,{direction:"column",flex:1,overflow:"hidden",children:/* @__PURE__ */jsx(CommandList,{activeItemDataAttr:"data-hovered",ariaLabel:"List of users to mention",fixedHeight:true,getItemDisabled,inputElement:_inputElement,itemHeight:41,items:filteredOptions,padding:1,ref:commandListRef,renderItem})})]});});const renderBlock=blockProps=>{const{children}=blockProps;return/* @__PURE__ */jsx(NormalBlock,{children});};const renderChild=childProps=>{const{children,value,selected}=childProps;const isMention=value._type==="mention"&&value.userId;if(isMention){return/* @__PURE__ */jsx(MentionInlineBlock,{selected,userId:value==null?void 0:value.userId});}return children;};const EVENT_LISTENER_OPTIONS={passive:true};function useCursorElement(opts){const{disabled,rootElement}=opts;const[cursorRect,setCursorRect]=useState(null);const cursorElement=useMemo(()=>{if(!cursorRect){return null;}return{getBoundingClientRect:()=>{return cursorRect;}};},[cursorRect]);const handleSelectionChange=useCallback(()=>{if(disabled){setCursorRect(null);return;}const sel=window.getSelection();if(!sel||!sel.isCollapsed||sel.rangeCount===0)return;const range=sel.getRangeAt(0);const isWithinRoot=rootElement==null?void 0:rootElement.contains(range.commonAncestorContainer);if(!isWithinRoot){setCursorRect(null);return;}const rect=range==null?void 0:range.getBoundingClientRect();if(rect){setCursorRect(rect);}},[disabled,rootElement]);useEffect(()=>{document.addEventListener("selectionchange",handleSelectionChange,EVENT_LISTENER_OPTIONS);return()=>{document.removeEventListener("selectionchange",handleSelectionChange);};},[handleSelectionChange]);return cursorElement;}var __freeze$i=Object.freeze;var __defProp$x=Object.defineProperty;var __template$i=(cooked,raw)=>__freeze$i(__defProp$x(cooked,"raw",{value:__freeze$i(raw||cooked.slice())}));var _a$i,_b$9;const INLINE_STYLE={outline:"none"};const EditableWrapStack=styled(Stack)(()=>{return css(_a$i||(_a$i=__template$i(["\n    & > div:first-child {\n      [data-slate-node='element']:not(:last-child) {\n        margin-bottom: 1em; // todo: improve\n      }\n    }\n  "])));});const StyledPopover=styled(Popover)(_ref60=>{let{theme}=_ref60;const{space,radius}=theme.sanity;return css(_b$9||(_b$9=__template$i(["\n    &[data-placement='bottom'] {\n      transform: translateY(","px);\n    }\n\n    &[data-placement='top'] {\n      transform: translateY(-","px);\n    }\n\n    [data-ui='Popover__wrapper'] {\n      border-radius: ","px;\n      display: flex;\n      flex-direction: column;\n      overflow: clip;\n      overflow: hidden;\n      position: relative;\n      width: 300px; // todo: improve\n    }\n  "])),space[1],space[1],radius[3]);});function Editable(props){const{focusLock,placeholder="Create a new comment",onFocus,onBlur,onKeyDown,onSubmit}=props;const[popoverElement,setPopoverElement]=useState(null);const rootElementRef=useRef(null);const editableRef=useRef(null);const mentionsMenuRef=useRef(null);const selection=usePortableTextEditorSelection();const{canSubmit,closeMentions,insertMention,mentionOptions,mentionsMenuOpen,mentionsSearchTerm,onBeforeInput,value}=useCommentInput();const renderPlaceholder=useCallback(()=>/* @__PURE__ */jsx("span",{children:placeholder}),[placeholder]);useClickOutside(useCallback(()=>{if(mentionsMenuOpen){closeMentions();}},[closeMentions,mentionsMenuOpen]),[popoverElement]);useEffect(()=>{var _a2;(_a2=mentionsMenuRef.current)==null?void 0:_a2.setSearchTerm(mentionsSearchTerm);},[mentionsSearchTerm]);useEffect(()=>{if(mentionsMenuOpen&&selection&&!isEqual$1(selection.anchor,selection.focus)){closeMentions();}},[mentionsMenuOpen,closeMentions,selection]);useGlobalKeyDown(event=>{if(event.code==="Escape"&&mentionsMenuOpen){closeMentions();}});const cursorElement=useCursorElement({disabled:!mentionsMenuOpen,rootElement:rootElementRef.current});const handleKeyDown=useCallback(event=>{switch(event.key){case"Enter":if(event.shiftKey){break;}event.preventDefault();event.stopPropagation();if(mentionsMenuOpen){closeMentions();break;}if(onSubmit&&canSubmit){onSubmit();}break;case"Escape":case"ArrowLeft":case"ArrowRight":if(mentionsMenuOpen){event.preventDefault();event.stopPropagation();closeMentions();}break;}if(onKeyDown)onKeyDown(event);},[canSubmit,closeMentions,mentionsMenuOpen,onKeyDown,onSubmit]);const initialSelectionAtEndOfContent=useMemo(()=>{if(selection){return void 0;}const lastBlock=(value||[]).slice(-1)[0];const lastChild=isPortableTextTextBlock$1(lastBlock)?lastBlock.children.slice(-1)[0]:void 0;if(!lastChild){return void 0;}const point={path:[{_key:lastBlock._key},"children",{_key:lastChild._key}],offset:isPortableTextSpan$1(lastChild)?lastChild.text.length:0};return{focus:point,anchor:point};},[value,selection]);return/* @__PURE__ */jsxs(Fragment,{children:[/* @__PURE__ */jsx(PortalProvider,{element:rootElementRef.current,children:/* @__PURE__ */jsx(StyledPopover,{arrow:false,constrainSize:true,content:/* @__PURE__ */jsx(MentionsMenu,{ref:mentionsMenuRef,loading:mentionOptions.loading,onSelect:insertMention,options:mentionOptions.data||[],inputElement:editableRef.current}),disabled:!mentionsMenuOpen,fallbackPlacements:["bottom","top"],open:mentionsMenuOpen,placement:"bottom",portal:true,ref:setPopoverElement,referenceElement:cursorElement})}),/* @__PURE__ */jsx(EditableWrapStack,{ref:rootElementRef,"data-ui":"EditableWrapStack",children:/* @__PURE__ */jsx(PortableTextEditable,{"data-testid":"comment-input-editable","data-ui":"EditableElement",onBeforeInput,onBlur,onFocus,onKeyDown:handleKeyDown,ref:editableRef,renderBlock,renderChild,renderPlaceholder,selection:initialSelectionAtEndOfContent,style:INLINE_STYLE,tabIndex:focusLock?0:void 0})})]});}var __freeze$h=Object.freeze;var __defProp$w=Object.defineProperty;var __template$h=(cooked,raw)=>__freeze$h(__defProp$w(cooked,"raw",{value:__freeze$h(raw||cooked.slice())}));var _a$h,_b$8,_c$4;const EditableWrap=styled(Box)(_a$h||(_a$h=__template$h(["\n  max-height: 20vh;\n  overflow-y: auto;\n"])));const ButtonDivider=styled(MenuDivider)({height:20,width:1});const ActionButton=styled(Button).attrs({fontSize:1,padding:2})(_b$8||(_b$8=__template$h(["\n  /* border-radius: 50%; */\n"])));const RootCard=styled(Card)(_ref61=>{let{theme}=_ref61;const radii=theme.sanity.radius[2];return css(_c$4||(_c$4=__template$h(["\n    border-radius: ","px;\n\n    &:not([data-expand-on-focus='false'], :focus-within) {\n      background: transparent;\n      box-shadow: unset;\n    }\n\n    &[data-focused='true']:focus-within {\n      "," {\n        min-height: 1em;\n      }\n\n      box-shadow:\n        inset 0 0 0 1px var(--card-border-color),\n        0 0 0 1px var(--card-bg-color),\n        0 0 0 3px var(--card-focus-ring-color);\n    }\n\n    &:focus-within {\n      "," {\n        min-height: 1em;\n      }\n    }\n\n    &[data-expand-on-focus='false'] {\n      "," {\n        min-height: 1em;\n      }\n    }\n\n    &[data-expand-on-focus='true'] {\n      [data-ui='CommentInputActions']:not([hidden]) {\n        display: none;\n      }\n\n      &:focus-within {\n        [data-ui='CommentInputActions'] {\n          display: flex;\n        }\n      }\n    }\n  "])),radii,EditableWrap,EditableWrap,EditableWrap);});function CommentInputInner(props){const{currentUser,focusLock,onBlur,onFocus,onKeyDown,onSubmit,placeholder,withAvatar}=props;const[user]=useUser(currentUser.id);const{canSubmit,expandOnFocus,focused,hasChanges,insertAtChar,openMentions,readOnly}=useCommentInput();const avatar=withAvatar?/* @__PURE__ */jsx(CommentsAvatar,{user}):null;const handleMentionButtonClicked=useCallback(e=>{e.stopPropagation();insertAtChar();openMentions();},[insertAtChar,openMentions]);return/* @__PURE__ */jsxs(Flex,{align:"flex-start",gap:2,children:[avatar,/* @__PURE__ */jsx(RootCard,{"data-expand-on-focus":expandOnFocus&&!canSubmit?"true":"false","data-focused":focused?"true":"false",flex:1,shadow:1,sizing:"border",tone:readOnly?"transparent":"default",children:/* @__PURE__ */jsxs(Stack,{children:[/* @__PURE__ */jsx(EditableWrap,{paddingX:1,paddingY:2,sizing:"border",children:/* @__PURE__ */jsx(Editable,{focusLock,onBlur,onFocus,onKeyDown,onSubmit,placeholder})}),/* @__PURE__ */jsxs(Flex,{align:"center","data-ui":"CommentInputActions",gap:1,justify:"flex-end",padding:1,children:[/* @__PURE__ */jsx(ActionButton,{"aria-label":"Mention user",disabled:readOnly,icon:MentionIcon,mode:"bleed",onClick:handleMentionButtonClicked}),/* @__PURE__ */jsx(ButtonDivider,{}),/* @__PURE__ */jsx(ActionButton,{"aria-label":"Send comment",disabled:!canSubmit||!hasChanges||readOnly,icon:SendIcon,mode:hasChanges&&canSubmit?"default":"bleed",onClick:onSubmit,tone:hasChanges&&canSubmit?"primary":"default"})]})]})})]});}const Z_OFFSET=9999999;function CommentInputDiscardDialog(props){const{onClose,onConfirm}=props;const portal=useBoundaryElement();const handleCancelClick=useCallback(e=>{e.stopPropagation();onClose();},[onClose]);const handleConfirmClick=useCallback(e=>{e.stopPropagation();onConfirm();},[onConfirm]);return/* @__PURE__ */jsx(ThemeColorProvider,{tone:"default",children:/* @__PURE__ */jsx(PortalProvider,{__unstable_elements:{boundary:portal.element},children:/* @__PURE__ */jsx(DialogProvider,{zOffset:Z_OFFSET,children:/* @__PURE__ */jsx(Dialog,{portal:"boundary",header:"Discard comment?",id:"discard-comment-dialog",onClose,width:0,onClickOutside:onClose,footer:/* @__PURE__ */jsxs(Grid,{columns:2,padding:2,gap:2,children:[/* @__PURE__ */jsx(Button,{text:"Cancel",mode:"ghost",onClick:handleCancelClick}),/* @__PURE__ */jsx(Button,{onClick:handleConfirmClick,text:"Discard",tone:"critical"})]}),children:/* @__PURE__ */jsx(Stack,{padding:4,children:/* @__PURE__ */jsx(Text,{children:"Do you want to discard the comment?"})})})})})});}const EMPTY_ARRAY$3=[];const SCROLL_INTO_VIEW_OPTIONS$2={behavior:"smooth",block:"center",inline:"center"};const CommentInput=forwardRef(function CommentInput2(props,ref){const{currentUser,expandOnFocus,focusLock=false,focusOnMount,mentionOptions,onBlur,onChange,onDiscardCancel,onDiscardConfirm,onFocus,onKeyDown,onMentionMenuOpenChange,onSubmit,placeholder,readOnly,value=EMPTY_ARRAY$3,withAvatar=true}=props;const[focused,setFocused]=useState(false);const editorRef=useRef(null);const editorContainerRef=useRef(null);const[showDiscardDialog,setShowDiscardDialog]=useState(false);const[editorInstanceKey,setEditorInstanceKey]=useState(keyGenerator());const requestFocus=useCallback(()=>{requestAnimationFrame(()=>{if(!editorRef.current)return;PortableTextEditor.focus(editorRef.current);});},[]);const resetEditorInstance=useCallback(()=>{setEditorInstanceKey(keyGenerator());},[]);const handleChange=useCallback(change=>{if(change.type==="ready"){if(focusOnMount){requestFocus();}}if(change.type==="focus"){setFocused(true);}if(change.type==="blur"){setFocused(false);}if(change.type==="patch"&&editorRef.current){const editorStateValue=PortableTextEditor.getValue(editorRef.current);onChange(editorStateValue||EMPTY_ARRAY$3);}},[focusOnMount,onChange,requestFocus]);const scrollToEditor=useCallback(()=>{var _a;(_a=editorContainerRef.current)==null?void 0:_a.scrollIntoView(SCROLL_INTO_VIEW_OPTIONS$2);},[]);const handleSubmit=useCallback(()=>{onSubmit();resetEditorInstance();requestFocus();scrollToEditor();},[onSubmit,requestFocus,resetEditorInstance,scrollToEditor]);const handleDiscardConfirm=useCallback(()=>{onDiscardConfirm();resetEditorInstance();},[onDiscardConfirm,resetEditorInstance]);const discardDialogController=useMemo(()=>{return{open:()=>{setShowDiscardDialog(true);},close:()=>{setShowDiscardDialog(false);requestFocus();}};},[requestFocus]);useImperativeHandle(ref,()=>{return{focus:requestFocus,blur(){if(editorRef.current){PortableTextEditor.blur(editorRef.current);}},scrollTo:scrollToEditor,reset:resetEditorInstance,discardDialogController};},[discardDialogController,requestFocus,resetEditorInstance,scrollToEditor]);return/* @__PURE__ */jsxs(Fragment,{children:[showDiscardDialog&&/* @__PURE__ */jsx(CommentInputDiscardDialog,{onClose:onDiscardCancel,onConfirm:handleDiscardConfirm}),/* @__PURE__ */jsx(Stack,{ref:editorContainerRef,"data-testid":"comment-input",children:/* @__PURE__ */jsx(PortableTextEditor,{onChange:handleChange,readOnly,ref:editorRef,schemaType:editorSchemaType,value:value||EMPTY_ARRAY$3,children:/* @__PURE__ */jsx(CommentInputProvider,{expandOnFocus,focused,focusOnMount,mentionOptions,onMentionMenuOpenChange,readOnly,value,children:/* @__PURE__ */jsx(FocusLock,{as:Stack,disabled:!focusLock||showDiscardDialog,children:/* @__PURE__ */jsx(CommentInputInner,{currentUser,focusLock,onBlur,onFocus,onKeyDown,onSubmit:handleSubmit,placeholder,withAvatar})})})},editorInstanceKey)})]});});const FLEX_GAP=3;var __freeze$g=Object.freeze;var __defProp$v=Object.defineProperty;var __template$g=(cooked,raw)=>__freeze$g(__defProp$v(cooked,"raw",{value:__freeze$g(raw||cooked.slice())}));var _a$g;const TOOLTIP_DELAY$2={open:500};const ContextText=styled(Text)(_a$g||(_a$g=__template$g(["\n  min-width: max-content;\n"])));function TextTooltip(props){const{children,text}=props;return/* @__PURE__ */jsx(Tooltip,{delay:TOOLTIP_DELAY$2,portal:true,placement:"top",content:/* @__PURE__ */jsx(ContextText,{size:1,children:text}),padding:2,children:/* @__PURE__ */jsx(Flex,{children})});}var __freeze$f=Object.freeze;var __defProp$u=Object.defineProperty;var __template$f=(cooked,raw)=>__freeze$f(__defProp$u(cooked,"raw",{value:__freeze$f(raw||cooked.slice())}));var _a$f,_b$7;const TOOLTIP_GROUP_DELAY={open:500};const POPOVER_PROPS$2={placement:"bottom-end"};const FloatingLayer=styled(Layer)(_a$f||(_a$f=__template$f(["\n  display: flex;\n"])));const FloatingCard=styled(Card)(_ref62=>{let{theme}=_ref62;const{space}=theme.sanity;return css(_b$7||(_b$7=__template$f(["\n    gap: ","px;\n    padding: ","px;\n\n    &:empty {\n      display: none;\n    }\n  "])),space[1]/2,space[1]/2);});function CommentsListItemContextMenu(props){const{canDelete,canEdit,isParent,onCopyLink,onDeleteStart,onEditStart,onMenuClose,onMenuOpen,onStatusChange,readOnly,status,...rest}=props;const showMenuButton=Boolean(onCopyLink||onDeleteStart||onEditStart);return/* @__PURE__ */jsx(TooltipDelayGroupProvider,{delay:TOOLTIP_GROUP_DELAY,children:/* @__PURE__ */jsx(FloatingLayer,{"data-root-menu":isParent?"true":"false",...rest,children:/* @__PURE__ */jsxs(FloatingCard,{display:"flex",shadow:2,padding:1,radius:2,sizing:"border",children:[isParent&&/* @__PURE__ */jsx(TextTooltip,{text:status==="open"?"Mark as resolved":"Re-open",children:/* @__PURE__ */jsx(Button,{"aria-label":"Mark comment as resolved",disabled:readOnly,fontSize:1,icon:status==="open"?CheckmarkCircleIcon:UndoIcon,mode:"bleed",onClick:onStatusChange,padding:2})}),/* @__PURE__ */jsx(MenuButton,{id:"comment-actions-menu",button:/* @__PURE__ */jsx(Button,{"aria-label":"Open comment actions menu",disabled:readOnly,fontSize:1,hidden:!showMenuButton,icon:EllipsisVerticalIcon,mode:"bleed",padding:2}),onOpen:onMenuOpen,onClose:onMenuClose,menu:/* @__PURE__ */jsxs(Menu,{children:[/* @__PURE__ */jsx(MenuItem,{fontSize:1,hidden:!canEdit,icon:EditIcon,onClick:onEditStart,text:"Edit comment"}),/* @__PURE__ */jsx(MenuItem,{fontSize:1,hidden:!canDelete,icon:TrashIcon,onClick:onDeleteStart,text:"Delete comment",tone:"critical"}),/* @__PURE__ */jsx(MenuDivider,{hidden:!canDelete&&!canEdit}),/* @__PURE__ */jsx(MenuItem,{fontSize:1,hidden:!onCopyLink,icon:LinkIcon,onClick:onCopyLink,text:"Copy link to comment"})]}),popover:POPOVER_PROPS$2})]})})});}var __freeze$e=Object.freeze;var __defProp$t=Object.defineProperty;var __template$e=(cooked,raw)=>__freeze$e(__defProp$t(cooked,"raw",{value:__freeze$e(raw||cooked.slice())}));var _a$e,_b$6,_c$3,_d$2,_e$1,_f$1;function StopPropagation(props){const{children}=props;const handleClick=useCallback(event=>{event.stopPropagation();},[]);return/* @__PURE__ */jsx(Stack,{onClick:handleClick,children});}const SKELETON_INLINE_STYLE={width:"50%"};const TimeText=styled(Text)(_a$e||(_a$e=__template$e(["\n  min-width: max-content;\n"])));const InnerStack=styled(Stack)(_b$6||(_b$6=__template$e(["\n  transition: opacity 200ms ease;\n\n  &[data-muted='true'] {\n    transition: unset;\n    opacity: 0.5;\n  }\n"])));const ErrorFlex=styled(Flex)(_c$3||(_c$3=__template$e(["\n  min-height: ","px;\n"])),AVATAR_HEIGHT);const RetryCardButton=styled(Card)(_d$2||(_d$2=__template$e(["\n  // Add not on hover\n  &:not(:hover) {\n    background-color: transparent;\n  }\n"])));const StyledCommentsListItemContextMenu=styled(CommentsListItemContextMenu)(_e$1||(_e$1=__template$e([""])));const RootStack=styled(Stack)(_ref63=>{let{theme}=_ref63;const{space}=theme.sanity;return css(_f$1||(_f$1=__template$e(["\n    position: relative;\n\n    // Only show the floating layer on hover when hover is supported.\n    // Else, the layer is always visible.\n    @media (hover: hover) {\n      "," {\n        opacity: 0;\n        position: absolute;\n        right: 0;\n        top: 0;\n\n        transform: translate(","px, -","px);\n      }\n\n      "," {\n        &:focus-within {\n          opacity: 1;\n        }\n      }\n\n      &:hover {\n        "," {\n          opacity: 1;\n        }\n      }\n    }\n\n    &[data-menu-open='true'] {\n      "," {\n        opacity: 1;\n      }\n    }\n  "])),StyledCommentsListItemContextMenu,space[1],space[1],StyledCommentsListItemContextMenu,StyledCommentsListItemContextMenu,StyledCommentsListItemContextMenu);});const TIME_AGO_OPTS={agoSuffix:true};function CommentsListItemLayout(props){const{canDelete,canEdit,comment,currentUser,hasError,isParent,isRetrying,mentionOptions,onCopyLink,onCreateRetry,onDelete,onEdit,onInputKeyDown,onStatusChange,readOnly}=props;const{_createdAt,authorId,message,_id,lastEditedAt}=comment;const[user]=useUser(authorId);const[value,setValue]=useState(message);const[isEditing,setIsEditing]=useState(false);const[rootElement,setRootElement]=useState(null);const startMessage=useRef(message);const[menuOpen,setMenuOpen]=useState(false);const hasChanges=useCommentHasChanged(value);const hasValue=useMemo(()=>hasCommentMessageValue(value),[value]);const commentInputRef=useRef(null);const createdDate=_createdAt?new Date(_createdAt):/* @__PURE__ */new Date();const createdTimeAgo=useTimeAgo(createdDate,TIME_AGO_OPTS);const formattedCreatedAt=format(createdDate,"PPPPp");const formattedLastEditAt=lastEditedAt?format(new Date(lastEditedAt),"PPPPp"):null;const displayError=hasError||isRetrying;const handleMenuOpen=useCallback(()=>setMenuOpen(true),[]);const handleMenuClose=useCallback(()=>setMenuOpen(false),[]);const handleCopyLink=useCallback(()=>onCopyLink==null?void 0:onCopyLink(_id),[_id,onCopyLink]);const handleCreateRetry=useCallback(e=>{e.stopPropagation();onCreateRetry==null?void 0:onCreateRetry(_id);},[_id,onCreateRetry]);const handleDelete=useCallback(()=>onDelete(_id),[_id,onDelete]);const cancelEdit=useCallback(()=>{setIsEditing(false);setValue(startMessage.current);},[]);const startDiscard=useCallback(()=>{var _a2;if(!hasValue||!hasChanges){cancelEdit();return;}(_a2=commentInputRef.current)==null?void 0:_a2.discardDialogController.open();},[cancelEdit,hasChanges,hasValue]);const handleInputKeyDown=useCallback(event=>{if(event.isDefaultPrevented()){return;}if(event.key==="Escape"){event.preventDefault();event.stopPropagation();startDiscard();}if(onInputKeyDown)onInputKeyDown(event);},[onInputKeyDown,startDiscard]);const cancelDiscard=useCallback(()=>{var _a2;(_a2=commentInputRef.current)==null?void 0:_a2.discardDialogController.close();},[]);const confirmDiscard=useCallback(()=>{var _a2;(_a2=commentInputRef.current)==null?void 0:_a2.discardDialogController.close();cancelEdit();},[cancelEdit]);const handleEditSubmit=useCallback(()=>{onEdit(_id,{message:value});setIsEditing(false);},[_id,onEdit,value]);const handleOpenStatusChange=useCallback(()=>{onStatusChange==null?void 0:onStatusChange(_id,comment.status==="open"?"resolved":"open");},[_id,comment.status,onStatusChange]);const toggleEdit=useCallback(()=>{setIsEditing(v=>!v);},[]);useDidUpdate(isEditing,()=>{setMenuOpen(false);});useGlobalKeyDown(event=>{if(event.key==="Escape"&&!hasChanges){cancelEdit();}});useClickOutside(()=>{if(!hasChanges){cancelEdit();}},[rootElement]);const avatar=/* @__PURE__ */jsx(CommentsAvatar,{user});const name=(user==null?void 0:user.displayName)?/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",textOverflow:"ellipsis",title:user.displayName,children:user.displayName}):/* @__PURE__ */jsx(TextSkeleton,{size:1,style:SKELETON_INLINE_STYLE});return/* @__PURE__ */jsxs(RootStack,{"data-menu-open":menuOpen?"true":"false",ref:setRootElement,space:4,children:[/* @__PURE__ */jsxs(InnerStack,{space:1,"data-muted":displayError,children:[/* @__PURE__ */jsxs(Flex,{align:"center",gap:FLEX_GAP,flex:1,children:[avatar,/* @__PURE__ */jsx(Flex,{align:"center",paddingBottom:1,sizing:"border",flex:1,children:/* @__PURE__ */jsxs(Flex,{align:"flex-end",gap:2,children:[/* @__PURE__ */jsx(Box,{flex:1,children:name}),!displayError&&/* @__PURE__ */jsxs(Flex,{align:"center",gap:1,children:[/* @__PURE__ */jsx(TimeText,{size:0,muted:true,title:formattedCreatedAt,children:createdTimeAgo}),formattedLastEditAt&&/* @__PURE__ */jsx(TimeText,{size:0,muted:true,title:formattedLastEditAt,children:"(edited)"})]})]})}),!isEditing&&!displayError&&/* @__PURE__ */jsx(StopPropagation,{children:/* @__PURE__ */jsx(StyledCommentsListItemContextMenu,{canDelete,canEdit,isParent,onCopyLink:handleCopyLink,onDeleteStart:handleDelete,onEditStart:toggleEdit,onMenuClose:handleMenuClose,onMenuOpen:handleMenuOpen,onStatusChange:handleOpenStatusChange,readOnly,status:comment.status})})]}),isEditing&&/* @__PURE__ */jsxs(Flex,{align:"flex-start",gap:2,children:[/* @__PURE__ */jsx(SpacerAvatar,{}),/* @__PURE__ */jsx(Stack,{flex:1,children:/* @__PURE__ */jsx(CommentInput,{currentUser,focusOnMount:true,mentionOptions,onChange:setValue,onDiscardCancel:cancelDiscard,onDiscardConfirm:confirmDiscard,onKeyDown:handleInputKeyDown,onSubmit:handleEditSubmit,readOnly,ref:commentInputRef,value,withAvatar:false})})]}),!isEditing&&/* @__PURE__ */jsxs(Flex,{gap:FLEX_GAP,children:[/* @__PURE__ */jsx(SpacerAvatar,{}),/* @__PURE__ */jsx(CommentMessageSerializer,{blocks:message})]})]}),displayError&&/* @__PURE__ */jsxs(ErrorFlex,{gap:FLEX_GAP,children:[/* @__PURE__ */jsx(SpacerAvatar,{}),/* @__PURE__ */jsxs(Flex,{align:"center",gap:1,flex:1,children:[/* @__PURE__ */jsxs(Text,{muted:true,size:1,children:[hasError&&"Failed to send.",isRetrying&&"Posting..."]}),/* @__PURE__ */jsx(Flex,{hidden:isRetrying,children:/* @__PURE__ */jsx(RetryCardButton,{__unstable_focusRing:true,display:"flex",forwardedAs:"button",onClick:handleCreateRetry,padding:1,radius:2,tone:"primary",children:/* @__PURE__ */jsx(Text,{size:1,muted:true,children:"Retry"})})})]})]})]});}var __freeze$d=Object.freeze;var __defProp$s=Object.defineProperty;var __template$d=(cooked,raw)=>__freeze$d(__defProp$s(cooked,"raw",{value:__freeze$d(raw||cooked.slice())}));var _a$d;const ThreadCard=styled(Card).attrs(_ref64=>{let{tone}=_ref64;return{padding:3,radius:3,sizing:"border",tone:tone||"transparent"};})(_a$d||(_a$d=__template$d(["\n  // ...\n"])));var __freeze$c=Object.freeze;var __defProp$r=Object.defineProperty;var __template$c=(cooked,raw)=>__freeze$c(__defProp$r(cooked,"raw",{value:__freeze$c(raw||cooked.slice())}));var _a$c,_b$5,_c$2;const EMPTY_ARRAY$2=[];const MAX_COLLAPSED_REPLIES=5;const StyledThreadCard=styled(ThreadCard)(_ref65=>{let{theme}=_ref65;const{hovered}=theme.sanity.color.button.bleed.default;return css(_a$c||(_a$c=__template$c(["\n    position: relative;\n\n    &:has(> [data-ui='GhostButton']:focus:focus-visible) {\n      box-shadow:\n        inset 0 0 0 1px var(--card-border-color),\n        0 0 0 1px var(--card-bg-color),\n        0 0 0 3px var(--card-focus-ring-color);\n    }\n\n    // When hovering over the thread root we want to display the parent comments menu.\n    // The data-root-menu attribute is used to target the menu and is applied in\n    // the CommentsListItemLayout component.\n    &:not([data-active='true']) {\n      @media (hover: hover) {\n        &:hover {\n          --card-bg-color: ",";\n\n          [data-root-menu='true'] {\n            opacity: 1;\n          }\n        }\n      }\n    }\n  "])),hovered.bg2);});const ExpandButton=styled(Button)(_ref66=>{let{theme}=_ref66;const{medium}=theme.sanity.fonts.text.weights;return css(_b$5||(_b$5=__template$c(["\n    font-weight: ",";\n  "])),medium);});const GhostButton=styled(Button)(_c$2||(_c$2=__template$c(["\n  opacity: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  left: 0;\n"])));const CommentsListItem=React.memo(function CommentsListItem2(props){var _a2,_b2;const{canReply,currentUser,mentionOptions,onCopyLink,onCreateRetry,onDelete,onEdit,onKeyDown,onPathSelect,onReply,onStatusChange,parentComment,readOnly,replies=EMPTY_ARRAY$2,selected}=props;const[value,setValue]=useState(EMPTY_ARRAY$2);const[collapsed,setCollapsed]=useState(true);const didExpand=useRef(false);const rootRef=useRef(null);const replyInputRef=useRef(null);const hasValue=useMemo(()=>hasCommentMessageValue(value),[value]);const handleReplySubmit=useCallback(()=>{const nextComment={fieldPath:parentComment.target.path.field,message:value,parentCommentId:parentComment._id,status:(parentComment==null?void 0:parentComment.status)||"open",// Since this is a reply to an existing comment, we use the same thread ID as the parent
threadId:parentComment.threadId};onReply==null?void 0:onReply(nextComment);setValue(EMPTY_ARRAY$2);},[onReply,parentComment._id,parentComment==null?void 0:parentComment.status,parentComment.target.path.field,parentComment.threadId,value]);const startDiscard=useCallback(()=>{var _a3;if(!hasValue){setValue(EMPTY_ARRAY$2);return;}(_a3=replyInputRef.current)==null?void 0:_a3.discardDialogController.open();},[hasValue]);const handleInputKeyDown=useCallback(event=>{if(event.isDefaultPrevented()){return;}if(event.key==="Escape"){event.preventDefault();event.stopPropagation();startDiscard();}},[startDiscard]);const cancelDiscard=useCallback(()=>{var _a3;(_a3=replyInputRef.current)==null?void 0:_a3.discardDialogController.close();},[]);const confirmDiscard=useCallback(()=>{var _a3,_b3;setValue(EMPTY_ARRAY$2);(_a3=replyInputRef.current)==null?void 0:_a3.discardDialogController.close();(_b3=replyInputRef.current)==null?void 0:_b3.focus();},[]);const handleThreadRootClick=useCallback(()=>{const path=PathUtils.fromString(parentComment.target.path.field);onPathSelect==null?void 0:onPathSelect(path);},[onPathSelect,parentComment.target.path.field]);const handleExpand=useCallback(e=>{e.stopPropagation();setCollapsed(false);didExpand.current=true;},[]);const splicedReplies=useMemo(()=>{if(collapsed)return replies==null?void 0:replies.slice(-MAX_COLLAPSED_REPLIES);return replies;},[replies,collapsed]);const showCollapseButton=useMemo(()=>{if(!replies)return false;return replies.length>MAX_COLLAPSED_REPLIES;},[replies]);const expandButtonText=useMemo(()=>{return"".concat((replies==null?void 0:replies.length)-MAX_COLLAPSED_REPLIES," more ").concat((replies==null?void 0:replies.length)-MAX_COLLAPSED_REPLIES===1?"comment":"comments");},[replies==null?void 0:replies.length]);useEffect(()=>{if(replies.length>MAX_COLLAPSED_REPLIES&&!didExpand.current){setCollapsed(true);}},[replies]);const renderedReplies=useMemo(()=>splicedReplies.map(reply=>{var _a3,_b3;return/* @__PURE__ */jsx(Stack,{as:"li","data-comment-id":reply._id,children:/* @__PURE__ */jsx(CommentsListItemLayout,{canDelete:reply.authorId===currentUser.id,canEdit:reply.authorId===currentUser.id,comment:reply,currentUser,hasError:((_a3=reply._state)==null?void 0:_a3.type)==="createError",isRetrying:((_b3=reply._state)==null?void 0:_b3.type)==="createRetrying",mentionOptions,onInputKeyDown:handleInputKeyDown,onCopyLink,onCreateRetry,onDelete,onEdit,readOnly})},reply._id);}),[currentUser,handleInputKeyDown,mentionOptions,onCopyLink,onCreateRetry,onDelete,onEdit,readOnly,splicedReplies]);return/* @__PURE__ */jsx(Stack,{space:2,ref:rootRef,children:/* @__PURE__ */jsxs(StyledThreadCard,{"data-active":selected?"true":"fase",onClick:handleThreadRootClick,tone:selected?"primary":void 0,children:[/* @__PURE__ */jsx(GhostButton,{"data-ui":"GhostButton","aria-label":"Go to field"}),/* @__PURE__ */jsxs(Stack,{as:"ul",paddingBottom:canReply?void 0:1,space:4,children:[/* @__PURE__ */jsx(Stack,{as:"li","data-comment-id":parentComment._id,children:/* @__PURE__ */jsx(CommentsListItemLayout,{canDelete:parentComment.authorId===currentUser.id,canEdit:parentComment.authorId===currentUser.id,comment:parentComment,currentUser,hasError:((_a2=parentComment._state)==null?void 0:_a2.type)==="createError",isParent:true,isRetrying:((_b2=parentComment._state)==null?void 0:_b2.type)==="createRetrying",mentionOptions,onCopyLink,onCreateRetry,onDelete,onEdit,onInputKeyDown:onKeyDown,onStatusChange,readOnly})}),showCollapseButton&&!didExpand.current&&/* @__PURE__ */jsxs(Flex,{gap:1,paddingY:1,sizing:"border",children:[/* @__PURE__ */jsx(SpacerAvatar,{}),/* @__PURE__ */jsx(ExpandButton,{fontSize:1,iconRight:ChevronDownIcon,mode:"bleed",onClick:handleExpand,padding:2,space:2,text:expandButtonText})]}),renderedReplies,canReply&&/* @__PURE__ */jsx(CommentInput,{currentUser,expandOnFocus:true,mentionOptions,onChange:setValue,onDiscardCancel:cancelDiscard,onDiscardConfirm:confirmDiscard,onKeyDown:handleInputKeyDown,onSubmit:handleReplySubmit,placeholder:"Reply",readOnly,ref:replyInputRef,value})]})]})});});const TOOLTIP_DELAY$1={close:0,open:500};const separator=/* @__PURE__ */jsx(Text,{muted:true,children:/* @__PURE__ */jsx(ChevronRightIcon,{})});const renderItem=(item,index)=>{return/* @__PURE__ */jsx(Box,{as:"li",children:/* @__PURE__ */jsx(Text,{textOverflow:"ellipsis",size:1,weight:"semibold",children:item})},"".concat(item,"-").concat(index));};function CommentBreadcrumbs(props){const{titlePath,maxLength}=props;const items=useMemo(()=>{const len=titlePath.length;const beforeLength=Math.ceil(maxLength/2);const afterLength=Math.floor(maxLength/2);if(maxLength&&len>maxLength){return[...titlePath.slice(0,beforeLength-1),titlePath.slice(beforeLength-1,len-afterLength),...titlePath.slice(len-afterLength)];}return titlePath;},[maxLength,titlePath]);const nodes=useMemo(()=>{return items.map((item,index)=>{const key="".concat(item,"-").concat(index);const showSeparator=index<items.length-1;if(Array.isArray(item)){return/* @__PURE__ */jsxs(Fragment$1,{children:[/* @__PURE__ */jsx(Tooltip,{delay:TOOLTIP_DELAY$1,content:/* @__PURE__ */jsx(Stack,{space:2,padding:2,children:item.map(renderItem)}),children:/* @__PURE__ */jsx(Box,{children:renderItem("...",index)})}),showSeparator&&separator]},key);}return/* @__PURE__ */jsxs(Fragment$1,{children:[renderItem(item,index),showSeparator&&separator]},key);});},[items]);return/* @__PURE__ */jsx(Flex,{align:"center",as:"ol",gap:2,children:nodes});}/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */ // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
/* eslint-disable space-unary-ops */ /* Public constants ==========================================================*/ /* ===========================================================================*/ //const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED$1=4;//const Z_DEFAULT_STRATEGY  = 0;
/* Possible values of the data_type field (though see inflate()) */const Z_BINARY=0;const Z_TEXT=1;//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN$1=2;/*============================================================================*/function zero$1(buf){let len=buf.length;while(--len>=0){buf[len]=0;}}// From zutil.h
const STORED_BLOCK=0;const STATIC_TREES=1;const DYN_TREES=2;/* The three kinds of block type */const MIN_MATCH$1=3;const MAX_MATCH$1=258;/* The minimum and maximum match lengths */ // From deflate.h
/* ===========================================================================
 * Internal compression state.
 */const LENGTH_CODES$1=29;/* number of length codes, not counting the special END_BLOCK code */const LITERALS$1=256;/* number of literal bytes 0..255 */const L_CODES$1=LITERALS$1+1+LENGTH_CODES$1;/* number of Literal or Length codes, including the END_BLOCK code */const D_CODES$1=30;/* number of distance codes */const BL_CODES$1=19;/* number of codes used to transfer the bit lengths */const HEAP_SIZE$1=2*L_CODES$1+1;/* maximum heap size */const MAX_BITS$1=15;/* All codes must not exceed MAX_BITS bits */const Buf_size=16;/* size of bit buffer in bi_buf */ /* ===========================================================================
 * Constants
 */const MAX_BL_BITS=7;/* Bit length codes must not exceed MAX_BL_BITS bits */const END_BLOCK=256;/* end of block literal code */const REP_3_6=16;/* repeat previous bit length 3-6 times (2 bits of repeat count) */const REPZ_3_10=17;/* repeat a zero length 3-10 times  (3 bits of repeat count) */const REPZ_11_138=18;/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */const extra_lbits=/* extra bits for each length code */new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);const extra_dbits=/* extra bits for each distance code */new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);const extra_blbits=/* extra bits for each bit length code */new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);const bl_order=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */ /* ===========================================================================
 * Local data. These are initialized only once.
 */ // We pre-fill arrays with 0 to avoid uninitialized gaps
const DIST_CODE_LEN=512;/* see definition of array dist_code below */ // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree=new Array((L_CODES$1+2)*2);zero$1(static_ltree);/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */const static_dtree=new Array(D_CODES$1*2);zero$1(static_dtree);/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */const _dist_code=new Array(DIST_CODE_LEN);zero$1(_dist_code);/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */const _length_code=new Array(MAX_MATCH$1-MIN_MATCH$1+1);zero$1(_length_code);/* length code for each normalized match length (0 == MIN_MATCH) */const base_length=new Array(LENGTH_CODES$1);zero$1(base_length);/* First normalized length for each code (0 = MIN_MATCH) */const base_dist=new Array(D_CODES$1);zero$1(base_dist);/* First normalized distance for each code (0 = distance of 1) */function StaticTreeDesc(static_tree,extra_bits,extra_base,elems,max_length){this.static_tree=static_tree;/* static tree or NULL */this.extra_bits=extra_bits;/* extra bits for each code or NULL */this.extra_base=extra_base;/* base index for extra_bits */this.elems=elems;/* max number of elements in the tree */this.max_length=max_length;/* max bit length for the codes */ // show if `static_tree` has data or dummy - needed for monomorphic objects
this.has_stree=static_tree&&static_tree.length;}let static_l_desc;let static_d_desc;let static_bl_desc;function TreeDesc(dyn_tree,stat_desc){this.dyn_tree=dyn_tree;/* the dynamic tree */this.max_code=0;/* largest code with non zero frequency */this.stat_desc=stat_desc;/* the corresponding static tree */}const d_code=dist=>{return dist<256?_dist_code[dist]:_dist_code[256+(dist>>>7)];};/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */const put_short=(s,w)=>{//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
s.pending_buf[s.pending++]=w&0xff;s.pending_buf[s.pending++]=w>>>8&0xff;};/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */const send_bits=(s,value,length)=>{if(s.bi_valid>Buf_size-length){s.bi_buf|=value<<s.bi_valid&0xffff;put_short(s,s.bi_buf);s.bi_buf=value>>Buf_size-s.bi_valid;s.bi_valid+=length-Buf_size;}else{s.bi_buf|=value<<s.bi_valid&0xffff;s.bi_valid+=length;}};const send_code=(s,c,tree)=>{send_bits(s,tree[c*2]/*.Code*/,tree[c*2+1]/*.Len*/);};/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */const bi_reverse=(code,len)=>{let res=0;do{res|=code&1;code>>>=1;res<<=1;}while(--len>0);return res>>>1;};/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */const bi_flush=s=>{if(s.bi_valid===16){put_short(s,s.bi_buf);s.bi_buf=0;s.bi_valid=0;}else if(s.bi_valid>=8){s.pending_buf[s.pending++]=s.bi_buf&0xff;s.bi_buf>>=8;s.bi_valid-=8;}};/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */const gen_bitlen=(s,desc)=>{//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
const tree=desc.dyn_tree;const max_code=desc.max_code;const stree=desc.stat_desc.static_tree;const has_stree=desc.stat_desc.has_stree;const extra=desc.stat_desc.extra_bits;const base=desc.stat_desc.extra_base;const max_length=desc.stat_desc.max_length;let h;/* heap index */let n,m;/* iterate over the tree elements */let bits;/* bit length */let xbits;/* extra bits */let f;/* frequency */let overflow=0;/* number of elements with bit length too large */for(bits=0;bits<=MAX_BITS$1;bits++){s.bl_count[bits]=0;}/* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */tree[s.heap[s.heap_max]*2+1]/*.Len*/=0;/* root of the heap */for(h=s.heap_max+1;h<HEAP_SIZE$1;h++){n=s.heap[h];bits=tree[tree[n*2+1]/*.Dad*/*2+1]/*.Len*/+1;if(bits>max_length){bits=max_length;overflow++;}tree[n*2+1]/*.Len*/=bits;/* We overwrite tree[n].Dad which is no longer needed */if(n>max_code){continue;}/* not a leaf node */s.bl_count[bits]++;xbits=0;if(n>=base){xbits=extra[n-base];}f=tree[n*2]/*.Freq*/;s.opt_len+=f*(bits+xbits);if(has_stree){s.static_len+=f*(stree[n*2+1]/*.Len*/+xbits);}}if(overflow===0){return;}// Tracev((stderr,"\nbit length overflow\n"));
/* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */do{bits=max_length-1;while(s.bl_count[bits]===0){bits--;}s.bl_count[bits]--;/* move one leaf down the tree */s.bl_count[bits+1]+=2;/* move one overflow item as its brother */s.bl_count[max_length]--;/* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */overflow-=2;}while(overflow>0);/* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */for(bits=max_length;bits!==0;bits--){n=s.bl_count[bits];while(n!==0){m=s.heap[--h];if(m>max_code){continue;}if(tree[m*2+1]/*.Len*/!==bits){// Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
s.opt_len+=(bits-tree[m*2+1]/*.Len*/)*tree[m*2]/*.Freq*/;tree[m*2+1]/*.Len*/=bits;}n--;}}};/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */const gen_codes=(tree,max_code,bl_count)=>{//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
const next_code=new Array(MAX_BITS$1+1);/* next code value for each bit length */let code=0;/* running code value */let bits;/* bit index */let n;/* code index */ /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */for(bits=1;bits<=MAX_BITS$1;bits++){code=code+bl_count[bits-1]<<1;next_code[bits]=code;}/* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
//        "inconsistent bit counts");
//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
for(n=0;n<=max_code;n++){let len=tree[n*2+1]/*.Len*/;if(len===0){continue;}/* Now reverse the bits */tree[n*2]/*.Code*/=bi_reverse(next_code[len]++,len);//Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
//     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
}};/* ===========================================================================
 * Initialize the various 'constant' tables.
 */const tr_static_init=()=>{let n;/* iterates over tree elements */let bits;/* bit counter */let length;/* length value */let code;/* code value */let dist;/* distance index */const bl_count=new Array(MAX_BITS$1+1);/* number of codes at each bit length for an optimal tree */ // do check in _tr_init()
//if (static_init_done) return;
/* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */length=0;for(code=0;code<LENGTH_CODES$1-1;code++){base_length[code]=length;for(n=0;n<1<<extra_lbits[code];n++){_length_code[length++]=code;}}//Assert (length == 256, "tr_static_init: length != 256");
/* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */_length_code[length-1]=code;/* Initialize the mapping dist (0..32K) -> dist code (0..29) */dist=0;for(code=0;code<16;code++){base_dist[code]=dist;for(n=0;n<1<<extra_dbits[code];n++){_dist_code[dist++]=code;}}//Assert (dist == 256, "tr_static_init: dist != 256");
dist>>=7;/* from now on, all distances are divided by 128 */for(;code<D_CODES$1;code++){base_dist[code]=dist<<7;for(n=0;n<1<<extra_dbits[code]-7;n++){_dist_code[256+dist++]=code;}}//Assert (dist == 256, "tr_static_init: 256+dist != 512");
/* Construct the codes of the static literal tree */for(bits=0;bits<=MAX_BITS$1;bits++){bl_count[bits]=0;}n=0;while(n<=143){static_ltree[n*2+1]/*.Len*/=8;n++;bl_count[8]++;}while(n<=255){static_ltree[n*2+1]/*.Len*/=9;n++;bl_count[9]++;}while(n<=279){static_ltree[n*2+1]/*.Len*/=7;n++;bl_count[7]++;}while(n<=287){static_ltree[n*2+1]/*.Len*/=8;n++;bl_count[8]++;}/* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */gen_codes(static_ltree,L_CODES$1+1,bl_count);/* The static distance tree is trivial: */for(n=0;n<D_CODES$1;n++){static_dtree[n*2+1]/*.Len*/=5;static_dtree[n*2]/*.Code*/=bi_reverse(n,5);}// Now data ready and we can init static trees
static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,LITERALS$1+1,L_CODES$1,MAX_BITS$1);static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,D_CODES$1,MAX_BITS$1);static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,BL_CODES$1,MAX_BL_BITS);//static_init_done = true;
};/* ===========================================================================
 * Initialize a new block.
 */const init_block=s=>{let n;/* iterates over tree elements */ /* Initialize the trees. */for(n=0;n<L_CODES$1;n++){s.dyn_ltree[n*2]/*.Freq*/=0;}for(n=0;n<D_CODES$1;n++){s.dyn_dtree[n*2]/*.Freq*/=0;}for(n=0;n<BL_CODES$1;n++){s.bl_tree[n*2]/*.Freq*/=0;}s.dyn_ltree[END_BLOCK*2]/*.Freq*/=1;s.opt_len=s.static_len=0;s.sym_next=s.matches=0;};/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */const bi_windup=s=>{if(s.bi_valid>8){put_short(s,s.bi_buf);}else if(s.bi_valid>0){//put_byte(s, (Byte)s->bi_buf);
s.pending_buf[s.pending++]=s.bi_buf;}s.bi_buf=0;s.bi_valid=0;};/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */const smaller=(tree,n,m,depth)=>{const _n2=n*2;const _m2=m*2;return tree[_n2]/*.Freq*/<tree[_m2]/*.Freq*/||tree[_n2]/*.Freq*/===tree[_m2]/*.Freq*/&&depth[n]<=depth[m];};/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */const pqdownheap=(s,tree,k)=>{//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
const v=s.heap[k];let j=k<<1;/* left son of k */while(j<=s.heap_len){/* Set j to the smallest of the two sons: */if(j<s.heap_len&&smaller(tree,s.heap[j+1],s.heap[j],s.depth)){j++;}/* Exit if v is smaller than both sons */if(smaller(tree,v,s.heap[j],s.depth)){break;}/* Exchange v with the smallest son */s.heap[k]=s.heap[j];k=j;/* And continue down the tree, setting j to the left son of k */j<<=1;}s.heap[k]=v;};// inlined manually
// const SMALLEST = 1;
/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */const compress_block=(s,ltree,dtree)=>{//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
let dist;/* distance of matched string */let lc;/* match length or unmatched char (if dist == 0) */let sx=0;/* running index in sym_buf */let code;/* the code to send */let extra;/* number of extra bits to send */if(s.sym_next!==0){do{dist=s.pending_buf[s.sym_buf+sx++]&0xff;dist+=(s.pending_buf[s.sym_buf+sx++]&0xff)<<8;lc=s.pending_buf[s.sym_buf+sx++];if(dist===0){send_code(s,lc,ltree);/* send a literal byte */ //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
}else{/* Here, lc is the match length - MIN_MATCH */code=_length_code[lc];send_code(s,code+LITERALS$1+1,ltree);/* send the length code */extra=extra_lbits[code];if(extra!==0){lc-=base_length[code];send_bits(s,lc,extra);/* send the extra length bits */}dist--;/* dist is now the match distance - 1 */code=d_code(dist);//Assert (code < D_CODES, "bad d_code");
send_code(s,code,dtree);/* send the distance code */extra=extra_dbits[code];if(extra!==0){dist-=base_dist[code];send_bits(s,dist,extra);/* send the extra distance bits */}}/* literal or match pair ? */ /* Check that the overlay between pending_buf and sym_buf is ok: */ //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");
}while(sx<s.sym_next);}send_code(s,END_BLOCK,ltree);};/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */const build_tree=(s,desc)=>{//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
const tree=desc.dyn_tree;const stree=desc.stat_desc.static_tree;const has_stree=desc.stat_desc.has_stree;const elems=desc.stat_desc.elems;let n,m;/* iterate over heap elements */let max_code=-1;/* largest code with non zero frequency */let node;/* new node being created */ /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */s.heap_len=0;s.heap_max=HEAP_SIZE$1;for(n=0;n<elems;n++){if(tree[n*2]/*.Freq*/!==0){s.heap[++s.heap_len]=max_code=n;s.depth[n]=0;}else{tree[n*2+1]/*.Len*/=0;}}/* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */while(s.heap_len<2){node=s.heap[++s.heap_len]=max_code<2?++max_code:0;tree[node*2]/*.Freq*/=1;s.depth[node]=0;s.opt_len--;if(has_stree){s.static_len-=stree[node*2+1]/*.Len*/;}/* node is 0 or 1 so it does not have extra bits */}desc.max_code=max_code;/* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */for(n=s.heap_len>>1/*int /2*/;n>=1;n--){pqdownheap(s,tree,n);}/* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */node=elems;/* next internal node of the tree */do{//pqremove(s, tree, n);  /* n = node of least frequency */
/*** pqremove ***/n=s.heap[1/*SMALLEST*/];s.heap[1/*SMALLEST*/]=s.heap[s.heap_len--];pqdownheap(s,tree,1/*SMALLEST*/);/***/m=s.heap[1/*SMALLEST*/];/* m = node of next least frequency */s.heap[--s.heap_max]=n;/* keep the nodes sorted by frequency */s.heap[--s.heap_max]=m;/* Create a new node father of n and m */tree[node*2]/*.Freq*/=tree[n*2]/*.Freq*/+tree[m*2]/*.Freq*/;s.depth[node]=(s.depth[n]>=s.depth[m]?s.depth[n]:s.depth[m])+1;tree[n*2+1]/*.Dad*/=tree[m*2+1]/*.Dad*/=node;/* and insert the new node in the heap */s.heap[1/*SMALLEST*/]=node++;pqdownheap(s,tree,1/*SMALLEST*/);}while(s.heap_len>=2);s.heap[--s.heap_max]=s.heap[1/*SMALLEST*/];/* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */gen_bitlen(s,desc);/* The field len is now set, we can generate the bit codes */gen_codes(tree,max_code,s.bl_count);};/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */const scan_tree=(s,tree,max_code)=>{//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
let n;/* iterates over all tree elements */let prevlen=-1;/* last emitted length */let curlen;/* length of current code */let nextlen=tree[0*2+1]/*.Len*/;/* length of next code */let count=0;/* repeat count of the current code */let max_count=7;/* max repeat count */let min_count=4;/* min repeat count */if(nextlen===0){max_count=138;min_count=3;}tree[(max_code+1)*2+1]/*.Len*/=0xffff;/* guard */for(n=0;n<=max_code;n++){curlen=nextlen;nextlen=tree[(n+1)*2+1]/*.Len*/;if(++count<max_count&&curlen===nextlen){continue;}else if(count<min_count){s.bl_tree[curlen*2]/*.Freq*/+=count;}else if(curlen!==0){if(curlen!==prevlen){s.bl_tree[curlen*2]/*.Freq*/++;}s.bl_tree[REP_3_6*2]/*.Freq*/++;}else if(count<=10){s.bl_tree[REPZ_3_10*2]/*.Freq*/++;}else{s.bl_tree[REPZ_11_138*2]/*.Freq*/++;}count=0;prevlen=curlen;if(nextlen===0){max_count=138;min_count=3;}else if(curlen===nextlen){max_count=6;min_count=3;}else{max_count=7;min_count=4;}}};/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */const send_tree=(s,tree,max_code)=>{//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
let n;/* iterates over all tree elements */let prevlen=-1;/* last emitted length */let curlen;/* length of current code */let nextlen=tree[0*2+1]/*.Len*/;/* length of next code */let count=0;/* repeat count of the current code */let max_count=7;/* max repeat count */let min_count=4;/* min repeat count */ /* tree[max_code+1].Len = -1; */ /* guard already set */if(nextlen===0){max_count=138;min_count=3;}for(n=0;n<=max_code;n++){curlen=nextlen;nextlen=tree[(n+1)*2+1]/*.Len*/;if(++count<max_count&&curlen===nextlen){continue;}else if(count<min_count){do{send_code(s,curlen,s.bl_tree);}while(--count!==0);}else if(curlen!==0){if(curlen!==prevlen){send_code(s,curlen,s.bl_tree);count--;}//Assert(count >= 3 && count <= 6, " 3_6?");
send_code(s,REP_3_6,s.bl_tree);send_bits(s,count-3,2);}else if(count<=10){send_code(s,REPZ_3_10,s.bl_tree);send_bits(s,count-3,3);}else{send_code(s,REPZ_11_138,s.bl_tree);send_bits(s,count-11,7);}count=0;prevlen=curlen;if(nextlen===0){max_count=138;min_count=3;}else if(curlen===nextlen){max_count=6;min_count=3;}else{max_count=7;min_count=4;}}};/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */const build_bl_tree=s=>{let max_blindex;/* index of last bit length code of non zero freq */ /* Determine the bit length frequencies for literal and distance trees */scan_tree(s,s.dyn_ltree,s.l_desc.max_code);scan_tree(s,s.dyn_dtree,s.d_desc.max_code);/* Build the bit length tree: */build_tree(s,s.bl_desc);/* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */ /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */for(max_blindex=BL_CODES$1-1;max_blindex>=3;max_blindex--){if(s.bl_tree[bl_order[max_blindex]*2+1]/*.Len*/!==0){break;}}/* Update opt_len to include the bit length tree and counts */s.opt_len+=3*(max_blindex+1)+5+5+4;//Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
//        s->opt_len, s->static_len));
return max_blindex;};/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */const send_all_trees=(s,lcodes,dcodes,blcodes)=>{//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
let rank;/* index in bl_order */ //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
//Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
//        "too many codes");
//Tracev((stderr, "\nbl counts: "));
send_bits(s,lcodes-257,5);/* not +255 as stated in appnote.txt */send_bits(s,dcodes-1,5);send_bits(s,blcodes-4,4);/* not -3 as stated in appnote.txt */for(rank=0;rank<blcodes;rank++){//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
send_bits(s,s.bl_tree[bl_order[rank]*2+1]/*.Len*/,3);}//Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
send_tree(s,s.dyn_ltree,lcodes-1);/* literal tree */ //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
send_tree(s,s.dyn_dtree,dcodes-1);/* distance tree */ //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */const detect_data_type=s=>{/* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */let block_mask=0xf3ffc07f;let n;/* Check for non-textual ("block-listed") bytes. */for(n=0;n<=31;n++,block_mask>>>=1){if(block_mask&1&&s.dyn_ltree[n*2]/*.Freq*/!==0){return Z_BINARY;}}/* Check for textual ("allow-listed") bytes. */if(s.dyn_ltree[9*2]/*.Freq*/!==0||s.dyn_ltree[10*2]/*.Freq*/!==0||s.dyn_ltree[13*2]/*.Freq*/!==0){return Z_TEXT;}for(n=32;n<LITERALS$1;n++){if(s.dyn_ltree[n*2]/*.Freq*/!==0){return Z_TEXT;}}/* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */return Z_BINARY;};let static_init_done=false;/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */const _tr_init$1=s=>{if(!static_init_done){tr_static_init();static_init_done=true;}s.l_desc=new TreeDesc(s.dyn_ltree,static_l_desc);s.d_desc=new TreeDesc(s.dyn_dtree,static_d_desc);s.bl_desc=new TreeDesc(s.bl_tree,static_bl_desc);s.bi_buf=0;s.bi_valid=0;/* Initialize the first block of the first file: */init_block(s);};/* ===========================================================================
 * Send a stored block
 */const _tr_stored_block$1=(s,buf,stored_len,last)=>{//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
send_bits(s,(STORED_BLOCK<<1)+(last?1:0),3);/* send block type */bi_windup(s);/* align on byte boundary */put_short(s,stored_len);put_short(s,~stored_len);if(stored_len){s.pending_buf.set(s.window.subarray(buf,buf+stored_len),s.pending);}s.pending+=stored_len;};/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */const _tr_align$1=s=>{send_bits(s,STATIC_TREES<<1,3);send_code(s,END_BLOCK,static_ltree);bi_flush(s);};/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */const _tr_flush_block$1=(s,buf,stored_len,last)=>{//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
let opt_lenb,static_lenb;/* opt_len and static_len in bytes */let max_blindex=0;/* index of last bit length code of non zero freq */ /* Build the Huffman trees unless a stored block is forced */if(s.level>0){/* Check if the file is binary or text */if(s.strm.data_type===Z_UNKNOWN$1){s.strm.data_type=detect_data_type(s);}/* Construct the literal and distance trees */build_tree(s,s.l_desc);// Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
//        s->static_len));
build_tree(s,s.d_desc);// Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
//        s->static_len));
/* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */ /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */max_blindex=build_bl_tree(s);/* Determine the best encoding. Compute the block lengths in bytes. */opt_lenb=s.opt_len+3+7>>>3;static_lenb=s.static_len+3+7>>>3;// Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
//        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
//        s->sym_next / 3));
if(static_lenb<=opt_lenb){opt_lenb=static_lenb;}}else{// Assert(buf != (char*)0, "lost buf");
opt_lenb=static_lenb=stored_len+5;/* force a stored block */}if(stored_len+4<=opt_lenb&&buf!==-1){/* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */_tr_stored_block$1(s,buf,stored_len,last);}else if(s.strategy===Z_FIXED$1||static_lenb===opt_lenb){send_bits(s,(STATIC_TREES<<1)+(last?1:0),3);compress_block(s,static_ltree,static_dtree);}else{send_bits(s,(DYN_TREES<<1)+(last?1:0),3);send_all_trees(s,s.l_desc.max_code+1,s.d_desc.max_code+1,max_blindex+1);compress_block(s,s.dyn_ltree,s.dyn_dtree);}// Assert (s->compressed_len == s->bits_sent, "bad compressed size");
/* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */init_block(s);if(last){bi_windup(s);}// Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
//       s->compressed_len-7*last));
};/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */const _tr_tally$1=(s,dist,lc)=>{//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
s.pending_buf[s.sym_buf+s.sym_next++]=dist;s.pending_buf[s.sym_buf+s.sym_next++]=dist>>8;s.pending_buf[s.sym_buf+s.sym_next++]=lc;if(dist===0){/* lc is the unmatched char */s.dyn_ltree[lc*2]/*.Freq*/++;}else{s.matches++;/* Here, lc is the match length - MIN_MATCH */dist--;/* dist = match distance - 1 */ //Assert((ush)dist < (ush)MAX_DIST(s) &&
//       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
//       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
s.dyn_ltree[(_length_code[lc]+LITERALS$1+1)*2]/*.Freq*/++;s.dyn_dtree[d_code(dist)*2]/*.Freq*/++;}return s.sym_next===s.sym_end;};var _tr_init_1=_tr_init$1;var _tr_stored_block_1=_tr_stored_block$1;var _tr_flush_block_1=_tr_flush_block$1;var _tr_tally_1=_tr_tally$1;var _tr_align_1=_tr_align$1;var trees={_tr_init:_tr_init_1,_tr_stored_block:_tr_stored_block_1,_tr_flush_block:_tr_flush_block_1,_tr_tally:_tr_tally_1,_tr_align:_tr_align_1};// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const adler32=(adler,buf,len,pos)=>{let s1=adler&0xffff|0,s2=adler>>>16&0xffff|0,n=0;while(len!==0){// Set limit ~ twice less than 5552, to keep
// s2 in 31-bits, because we force signed ints.
// in other case %= will fail.
n=len>2000?2000:len;len-=n;do{s1=s1+buf[pos++]|0;s2=s2+s1|0;}while(--n);s1%=65521;s2%=65521;}return s1|s2<<16|0;};var adler32_1=adler32;// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Use ordinary array, since untyped makes no boost here
const makeTable=()=>{let c,table=[];for(var n=0;n<256;n++){c=n;for(var k=0;k<8;k++){c=c&1?0xEDB88320^c>>>1:c>>>1;}table[n]=c;}return table;};// Create table on load. Just 255 signed longs. Not a problem.
const crcTable=new Uint32Array(makeTable());const crc32=(crc,buf,len,pos)=>{const t=crcTable;const end=pos+len;crc^=-1;for(let i=pos;i<end;i++){crc=crc>>>8^t[(crc^buf[i])&0xFF];}return crc^-1;// >>> 0;
};var crc32_1=crc32;// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var messages={2:'need dictionary',/* Z_NEED_DICT       2  */1:'stream end',/* Z_STREAM_END      1  */0:'',/* Z_OK              0  */'-1':'file error',/* Z_ERRNO         (-1) */'-2':'stream error',/* Z_STREAM_ERROR  (-2) */'-3':'data error',/* Z_DATA_ERROR    (-3) */'-4':'insufficient memory',/* Z_MEM_ERROR     (-4) */'-5':'buffer error',/* Z_BUF_ERROR     (-5) */'-6':'incompatible version'/* Z_VERSION_ERROR (-6) */};// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var constants$2={/* Allowed flush values; see deflate() and inflate() below for details */Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,/* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,//Z_VERSION_ERROR: -6,
/* compression levels */Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,/* Possible values of the data_type field (though see inflate()) */Z_BINARY:0,Z_TEXT:1,//Z_ASCII:                1, // = Z_TEXT (deprecated)
Z_UNKNOWN:2,/* The deflate compression method */Z_DEFLATED:8//Z_NULL:                 null // Use -1 or null inline, depending on var type
};// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const{_tr_init,_tr_stored_block,_tr_flush_block,_tr_tally,_tr_align}=trees;/* Public constants ==========================================================*/ /* ===========================================================================*/const{Z_NO_FLUSH:Z_NO_FLUSH$2,Z_PARTIAL_FLUSH,Z_FULL_FLUSH:Z_FULL_FLUSH$1,Z_FINISH:Z_FINISH$3,Z_BLOCK:Z_BLOCK$1,Z_OK:Z_OK$3,Z_STREAM_END:Z_STREAM_END$3,Z_STREAM_ERROR:Z_STREAM_ERROR$2,Z_DATA_ERROR:Z_DATA_ERROR$2,Z_BUF_ERROR:Z_BUF_ERROR$1,Z_DEFAULT_COMPRESSION:Z_DEFAULT_COMPRESSION$1,Z_FILTERED,Z_HUFFMAN_ONLY,Z_RLE,Z_FIXED,Z_DEFAULT_STRATEGY:Z_DEFAULT_STRATEGY$1,Z_UNKNOWN,Z_DEFLATED:Z_DEFLATED$2}=constants$2;/*============================================================================*/const MAX_MEM_LEVEL=9;/* Maximum value for memLevel in deflateInit2 */const MAX_WBITS$1=15;/* 32K LZ77 window */const DEF_MEM_LEVEL=8;const LENGTH_CODES=29;/* number of length codes, not counting the special END_BLOCK code */const LITERALS=256;/* number of literal bytes 0..255 */const L_CODES=LITERALS+1+LENGTH_CODES;/* number of Literal or Length codes, including the END_BLOCK code */const D_CODES=30;/* number of distance codes */const BL_CODES=19;/* number of codes used to transfer the bit lengths */const HEAP_SIZE=2*L_CODES+1;/* maximum heap size */const MAX_BITS=15;/* All codes must not exceed MAX_BITS bits */const MIN_MATCH=3;const MAX_MATCH=258;const MIN_LOOKAHEAD=MAX_MATCH+MIN_MATCH+1;const PRESET_DICT=0x20;const INIT_STATE=42;/* zlib header -> BUSY_STATE */ //#ifdef GZIP
const GZIP_STATE=57;/* gzip header -> BUSY_STATE | EXTRA_STATE */ //#endif
const EXTRA_STATE=69;/* gzip extra block -> NAME_STATE */const NAME_STATE=73;/* gzip file name -> COMMENT_STATE */const COMMENT_STATE=91;/* gzip comment -> HCRC_STATE */const HCRC_STATE=103;/* gzip header CRC -> BUSY_STATE */const BUSY_STATE=113;/* deflate -> FINISH_STATE */const FINISH_STATE=666;/* stream complete */const BS_NEED_MORE=1;/* block not completed, need more input or more output */const BS_BLOCK_DONE=2;/* block flush performed */const BS_FINISH_STARTED=3;/* finish started, need only more output at next deflate */const BS_FINISH_DONE=4;/* finish done, accept no more input or output */const OS_CODE=0x03;// Unix :) . Don't detect, use this default.
const err=(strm,errorCode)=>{strm.msg=messages[errorCode];return errorCode;};const rank=f=>{return f*2-(f>4?9:0);};const zero=buf=>{let len=buf.length;while(--len>=0){buf[len]=0;}};/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */const slide_hash=s=>{let n,m;let p;let wsize=s.w_size;n=s.hash_size;p=n;do{m=s.head[--p];s.head[p]=m>=wsize?m-wsize:0;}while(--n);n=wsize;//#ifndef FASTEST
p=n;do{m=s.prev[--p];s.prev[p]=m>=wsize?m-wsize:0;/* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */}while(--n);//#endif
};/* eslint-disable new-cap */let HASH_ZLIB=(s,prev,data)=>(prev<<s.hash_shift^data)&s.hash_mask;// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH=HASH_ZLIB;/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */const flush_pending=strm=>{const s=strm.state;//_tr_flush_bits(s);
let len=s.pending;if(len>strm.avail_out){len=strm.avail_out;}if(len===0){return;}strm.output.set(s.pending_buf.subarray(s.pending_out,s.pending_out+len),strm.next_out);strm.next_out+=len;s.pending_out+=len;strm.total_out+=len;strm.avail_out-=len;s.pending-=len;if(s.pending===0){s.pending_out=0;}};const flush_block_only=(s,last)=>{_tr_flush_block(s,s.block_start>=0?s.block_start:-1,s.strstart-s.block_start,last);s.block_start=s.strstart;flush_pending(s.strm);};const put_byte=(s,b)=>{s.pending_buf[s.pending++]=b;};/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */const putShortMSB=(s,b)=>{//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
s.pending_buf[s.pending++]=b>>>8&0xff;s.pending_buf[s.pending++]=b&0xff;};/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */const read_buf=(strm,buf,start,size)=>{let len=strm.avail_in;if(len>size){len=size;}if(len===0){return 0;}strm.avail_in-=len;// zmemcpy(buf, strm->next_in, len);
buf.set(strm.input.subarray(strm.next_in,strm.next_in+len),start);if(strm.state.wrap===1){strm.adler=adler32_1(strm.adler,buf,len,start);}else if(strm.state.wrap===2){strm.adler=crc32_1(strm.adler,buf,len,start);}strm.next_in+=len;strm.total_in+=len;return len;};/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */const longest_match=(s,cur_match)=>{let chain_length=s.max_chain_length;/* max hash chain length */let scan=s.strstart;/* current string */let match;/* matched string */let len;/* length of current match */let best_len=s.prev_length;/* best match length so far */let nice_match=s.nice_match;/* stop if match long enough */const limit=s.strstart>s.w_size-MIN_LOOKAHEAD?s.strstart-(s.w_size-MIN_LOOKAHEAD):0/*NIL*/;const _win=s.window;// shortcut
const wmask=s.w_mask;const prev=s.prev;/* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */const strend=s.strstart+MAX_MATCH;let scan_end1=_win[scan+best_len-1];let scan_end=_win[scan+best_len];/* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
/* Do not waste too much time if we already have a good match: */if(s.prev_length>=s.good_match){chain_length>>=2;}/* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */if(nice_match>s.lookahead){nice_match=s.lookahead;}// Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
do{// Assert(cur_match < s->strstart, "no future");
match=cur_match;/* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */if(_win[match+best_len]!==scan_end||_win[match+best_len-1]!==scan_end1||_win[match]!==_win[scan]||_win[++match]!==_win[scan+1]){continue;}/* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */scan+=2;match++;// Assert(*scan == *match, "match[2]?");
/* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */do{/*jshint noempty:false*/}while(_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&_win[++scan]===_win[++match]&&scan<strend);// Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
len=MAX_MATCH-(strend-scan);scan=strend-MAX_MATCH;if(len>best_len){s.match_start=cur_match;best_len=len;if(len>=nice_match){break;}scan_end1=_win[scan+best_len-1];scan_end=_win[scan+best_len];}}while((cur_match=prev[cur_match&wmask])>limit&&--chain_length!==0);if(best_len<=s.lookahead){return best_len;}return s.lookahead;};/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */const fill_window=s=>{const _w_size=s.w_size;let n,more,str;//Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
do{more=s.window_size-s.lookahead-s.strstart;// JS ints have 32 bit, block below not needed
/* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {
//    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
//        more = wsize;
//
//  } else if (more == (unsigned)(-1)) {
//        /* Very unlikely, but possible on 16 bit machine if
//         * strstart == 0 && lookahead == 1 (input done a byte at time)
//         */
//        more--;
//    }
//}
/* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */if(s.strstart>=_w_size+(_w_size-MIN_LOOKAHEAD)){s.window.set(s.window.subarray(_w_size,_w_size+_w_size-more),0);s.match_start-=_w_size;s.strstart-=_w_size;/* we now have strstart >= MAX_DIST */s.block_start-=_w_size;if(s.insert>s.strstart){s.insert=s.strstart;}slide_hash(s);more+=_w_size;}if(s.strm.avail_in===0){break;}/* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */ //Assert(more >= 2, "more < 2");
n=read_buf(s.strm,s.window,s.strstart+s.lookahead,more);s.lookahead+=n;/* Initialize the hash value now that we have some input: */if(s.lookahead+s.insert>=MIN_MATCH){str=s.strstart-s.insert;s.ins_h=s.window[str];/* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */s.ins_h=HASH(s,s.ins_h,s.window[str+1]);//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
while(s.insert){/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */s.ins_h=HASH(s,s.ins_h,s.window[str+MIN_MATCH-1]);s.prev[str&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=str;str++;s.insert--;if(s.lookahead+s.insert<MIN_MATCH){break;}}}/* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */}while(s.lookahead<MIN_LOOKAHEAD&&s.strm.avail_in!==0);/* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */ //  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */const deflate_stored=(s,flush)=>{/* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */let min_block=s.pending_buf_size-5>s.w_size?s.w_size:s.pending_buf_size-5;/* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */let len,left,have,last=0;let used=s.strm.avail_in;do{/* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */len=65535/* MAX_STORED */;/* maximum deflate stored block length */have=s.bi_valid+42>>3;/* number of header bytes */if(s.strm.avail_out<have){/* need room for header */break;}/* maximum stored block length that will fit in avail_out: */have=s.strm.avail_out-have;left=s.strstart-s.block_start;/* bytes left in window */if(len>left+s.strm.avail_in){len=left+s.strm.avail_in;/* limit len to the input */}if(len>have){len=have;/* limit len to the output */}/* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */if(len<min_block&&(len===0&&flush!==Z_FINISH$3||flush===Z_NO_FLUSH$2||len!==left+s.strm.avail_in)){break;}/* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */last=flush===Z_FINISH$3&&len===left+s.strm.avail_in?1:0;_tr_stored_block(s,0,0,last);/* Replace the lengths in the dummy stored block with len. */s.pending_buf[s.pending-4]=len;s.pending_buf[s.pending-3]=len>>8;s.pending_buf[s.pending-2]=~len;s.pending_buf[s.pending-1]=~len>>8;/* Write the stored block header bytes. */flush_pending(s.strm);//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif
/* Copy uncompressed bytes from the window to next_out. */if(left){if(left>len){left=len;}//zmemcpy(s->strm->next_out, s->window + s->block_start, left);
s.strm.output.set(s.window.subarray(s.block_start,s.block_start+left),s.strm.next_out);s.strm.next_out+=left;s.strm.avail_out-=left;s.strm.total_out+=left;s.block_start+=left;len-=left;}/* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */if(len){read_buf(s.strm,s.strm.output,s.strm.next_out,len);s.strm.next_out+=len;s.strm.avail_out-=len;s.strm.total_out+=len;}}while(last===0);/* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */used-=s.strm.avail_in;/* number of input bytes directly copied */if(used){/* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */if(used>=s.w_size){/* supplant the previous history */s.matches=2;/* clear hash */ //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
s.window.set(s.strm.input.subarray(s.strm.next_in-s.w_size,s.strm.next_in),0);s.strstart=s.w_size;s.insert=s.strstart;}else{if(s.window_size-s.strstart<=used){/* Slide the window down. */s.strstart-=s.w_size;//zmemcpy(s->window, s->window + s->w_size, s->strstart);
s.window.set(s.window.subarray(s.w_size,s.w_size+s.strstart),0);if(s.matches<2){s.matches++;/* add a pending slide_hash() */}if(s.insert>s.strstart){s.insert=s.strstart;}}//zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
s.window.set(s.strm.input.subarray(s.strm.next_in-used,s.strm.next_in),s.strstart);s.strstart+=used;s.insert+=used>s.w_size-s.insert?s.w_size-s.insert:used;}s.block_start=s.strstart;}if(s.high_water<s.strstart){s.high_water=s.strstart;}/* If the last block was written to next_out, then done. */if(last){return BS_FINISH_DONE;}/* If flushing and all input has been consumed, then done. */if(flush!==Z_NO_FLUSH$2&&flush!==Z_FINISH$3&&s.strm.avail_in===0&&s.strstart===s.block_start){return BS_BLOCK_DONE;}/* Fill the window with any remaining input. */have=s.window_size-s.strstart;if(s.strm.avail_in>have&&s.block_start>=s.w_size){/* Slide the window down. */s.block_start-=s.w_size;s.strstart-=s.w_size;//zmemcpy(s->window, s->window + s->w_size, s->strstart);
s.window.set(s.window.subarray(s.w_size,s.w_size+s.strstart),0);if(s.matches<2){s.matches++;/* add a pending slide_hash() */}have+=s.w_size;/* more space now */if(s.insert>s.strstart){s.insert=s.strstart;}}if(have>s.strm.avail_in){have=s.strm.avail_in;}if(have){read_buf(s.strm,s.window,s.strstart,have);s.strstart+=have;s.insert+=have>s.w_size-s.insert?s.w_size-s.insert:have;}if(s.high_water<s.strstart){s.high_water=s.strstart;}/* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */have=s.bi_valid+42>>3;/* number of header bytes */ /* maximum stored block length that will fit in pending: */have=s.pending_buf_size-have>65535/* MAX_STORED */?65535/* MAX_STORED */:s.pending_buf_size-have;min_block=have>s.w_size?s.w_size:have;left=s.strstart-s.block_start;if(left>=min_block||(left||flush===Z_FINISH$3)&&flush!==Z_NO_FLUSH$2&&s.strm.avail_in===0&&left<=have){len=left>have?have:left;last=flush===Z_FINISH$3&&s.strm.avail_in===0&&len===left?1:0;_tr_stored_block(s,s.block_start,len,last);s.block_start+=len;flush_pending(s.strm);}/* We've done all we can with the available input and output. */return last?BS_FINISH_STARTED:BS_NEED_MORE;};/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */const deflate_fast=(s,flush)=>{let hash_head;/* head of the hash chain */let bflush;/* set if current block must be flushed */for(;;){/* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */if(s.lookahead<MIN_LOOKAHEAD){fill_window(s);if(s.lookahead<MIN_LOOKAHEAD&&flush===Z_NO_FLUSH$2){return BS_NEED_MORE;}if(s.lookahead===0){break;/* flush the current block */}}/* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */hash_head=0/*NIL*/;if(s.lookahead>=MIN_MATCH){/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=HASH(s,s.ins_h,s.window[s.strstart+MIN_MATCH-1]);hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/}/* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */if(hash_head!==0/*NIL*/&&s.strstart-hash_head<=s.w_size-MIN_LOOKAHEAD){/* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */s.match_length=longest_match(s,hash_head);/* longest_match() sets match_start */}if(s.match_length>=MIN_MATCH){// check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
/*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/bflush=_tr_tally(s,s.strstart-s.match_start,s.match_length-MIN_MATCH);s.lookahead-=s.match_length;/* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */if(s.match_length<=s.max_lazy_match/*max_insert_length*/&&s.lookahead>=MIN_MATCH){s.match_length--;/* string at strstart already in table */do{s.strstart++;/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=HASH(s,s.ins_h,s.window[s.strstart+MIN_MATCH-1]);hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */}while(--s.match_length!==0);s.strstart++;}else{s.strstart+=s.match_length;s.match_length=0;s.ins_h=s.window[s.strstart];/* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */s.ins_h=HASH(s,s.ins_h,s.window[s.strstart+1]);//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
/* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */}}else{/* No match, output a literal byte */ //Tracevv((stderr,"%c", s.window[s.strstart]));
/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush=_tr_tally(s,0,s.window[s.strstart]);s.lookahead--;s.strstart++;}if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=s.strstart<MIN_MATCH-1?s.strstart:MIN_MATCH-1;if(flush===Z_FINISH$3){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.sym_next){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;};/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */const deflate_slow=(s,flush)=>{let hash_head;/* head of hash chain */let bflush;/* set if current block must be flushed */let max_insert;/* Process the input block. */for(;;){/* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */if(s.lookahead<MIN_LOOKAHEAD){fill_window(s);if(s.lookahead<MIN_LOOKAHEAD&&flush===Z_NO_FLUSH$2){return BS_NEED_MORE;}if(s.lookahead===0){break;}/* flush the current block */}/* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */hash_head=0/*NIL*/;if(s.lookahead>=MIN_MATCH){/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=HASH(s,s.ins_h,s.window[s.strstart+MIN_MATCH-1]);hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/}/* Find the longest match, discarding those <= prev_length.
     */s.prev_length=s.match_length;s.prev_match=s.match_start;s.match_length=MIN_MATCH-1;if(hash_head!==0/*NIL*/&&s.prev_length<s.max_lazy_match&&s.strstart-hash_head<=s.w_size-MIN_LOOKAHEAD/*MAX_DIST(s)*/){/* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */s.match_length=longest_match(s,hash_head);/* longest_match() sets match_start */if(s.match_length<=5&&(s.strategy===Z_FILTERED||s.match_length===MIN_MATCH&&s.strstart-s.match_start>4096/*TOO_FAR*/)){/* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */s.match_length=MIN_MATCH-1;}}/* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */if(s.prev_length>=MIN_MATCH&&s.match_length<=s.prev_length){max_insert=s.strstart+s.lookahead-MIN_MATCH;/* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
/***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/bflush=_tr_tally(s,s.strstart-1-s.prev_match,s.prev_length-MIN_MATCH);/* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */s.lookahead-=s.prev_length-1;s.prev_length-=2;do{if(++s.strstart<=max_insert){/*** INSERT_STRING(s, s.strstart, hash_head); ***/s.ins_h=HASH(s,s.ins_h,s.window[s.strstart+MIN_MATCH-1]);hash_head=s.prev[s.strstart&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=s.strstart;/***/}}while(--s.prev_length!==0);s.match_available=0;s.match_length=MIN_MATCH-1;s.strstart++;if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}else if(s.match_available){/* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */ //Tracevv((stderr,"%c", s->window[s->strstart-1]));
/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/bflush=_tr_tally(s,0,s.window[s.strstart-1]);if(bflush){/*** FLUSH_BLOCK_ONLY(s, 0) ***/flush_block_only(s,false);/***/}s.strstart++;s.lookahead--;if(s.strm.avail_out===0){return BS_NEED_MORE;}}else{/* There is no previous match to compare with, wait for
       * the next step to decide.
       */s.match_available=1;s.strstart++;s.lookahead--;}}//Assert (flush != Z_NO_FLUSH, "no flush?");
if(s.match_available){//Tracevv((stderr,"%c", s->window[s->strstart-1]));
/*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/bflush=_tr_tally(s,0,s.window[s.strstart-1]);s.match_available=0;}s.insert=s.strstart<MIN_MATCH-1?s.strstart:MIN_MATCH-1;if(flush===Z_FINISH$3){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.sym_next){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;};/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */const deflate_rle=(s,flush)=>{let bflush;/* set if current block must be flushed */let prev;/* byte at distance one to match */let scan,strend;/* scan goes up to strend for length of run */const _win=s.window;for(;;){/* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */if(s.lookahead<=MAX_MATCH){fill_window(s);if(s.lookahead<=MAX_MATCH&&flush===Z_NO_FLUSH$2){return BS_NEED_MORE;}if(s.lookahead===0){break;}/* flush the current block */}/* See how many times the previous byte repeats */s.match_length=0;if(s.lookahead>=MIN_MATCH&&s.strstart>0){scan=s.strstart-1;prev=_win[scan];if(prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]){strend=s.strstart+MAX_MATCH;do{/*jshint noempty:false*/}while(prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&prev===_win[++scan]&&scan<strend);s.match_length=MAX_MATCH-(strend-scan);if(s.match_length>s.lookahead){s.match_length=s.lookahead;}}//Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
}/* Emit match if have run of MIN_MATCH or longer, else emit literal */if(s.match_length>=MIN_MATCH){//check_match(s, s.strstart, s.strstart - 1, s.match_length);
/*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/bflush=_tr_tally(s,1,s.match_length-MIN_MATCH);s.lookahead-=s.match_length;s.strstart+=s.match_length;s.match_length=0;}else{/* No match, output a literal byte */ //Tracevv((stderr,"%c", s->window[s->strstart]));
/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush=_tr_tally(s,0,s.window[s.strstart]);s.lookahead--;s.strstart++;}if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=0;if(flush===Z_FINISH$3){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.sym_next){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;};/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */const deflate_huff=(s,flush)=>{let bflush;/* set if current block must be flushed */for(;;){/* Make sure that we have a literal to write. */if(s.lookahead===0){fill_window(s);if(s.lookahead===0){if(flush===Z_NO_FLUSH$2){return BS_NEED_MORE;}break;/* flush the current block */}}/* Output a literal byte */s.match_length=0;//Tracevv((stderr,"%c", s->window[s->strstart]));
/*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/bflush=_tr_tally(s,0,s.window[s.strstart]);s.lookahead--;s.strstart++;if(bflush){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}}s.insert=0;if(flush===Z_FINISH$3){/*** FLUSH_BLOCK(s, 1); ***/flush_block_only(s,true);if(s.strm.avail_out===0){return BS_FINISH_STARTED;}/***/return BS_FINISH_DONE;}if(s.sym_next){/*** FLUSH_BLOCK(s, 0); ***/flush_block_only(s,false);if(s.strm.avail_out===0){return BS_NEED_MORE;}/***/}return BS_BLOCK_DONE;};/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */function Config(good_length,max_lazy,nice_length,max_chain,func){this.good_length=good_length;this.max_lazy=max_lazy;this.nice_length=nice_length;this.max_chain=max_chain;this.func=func;}const configuration_table=[/*      good lazy nice chain */new Config(0,0,0,0,deflate_stored),/* 0 store only */new Config(4,4,8,4,deflate_fast),/* 1 max speed, no lazy matches */new Config(4,5,16,8,deflate_fast),/* 2 */new Config(4,6,32,32,deflate_fast),/* 3 */new Config(4,4,16,16,deflate_slow),/* 4 lazy matches */new Config(8,16,32,32,deflate_slow),/* 5 */new Config(8,16,128,128,deflate_slow),/* 6 */new Config(8,32,128,256,deflate_slow),/* 7 */new Config(32,128,258,1024,deflate_slow),/* 8 */new Config(32,258,258,4096,deflate_slow)/* 9 max compression */];/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */const lm_init=s=>{s.window_size=2*s.w_size;/*** CLEAR_HASH(s); ***/zero(s.head);// Fill with NIL (= 0);
/* Set the default configuration parameters:
   */s.max_lazy_match=configuration_table[s.level].max_lazy;s.good_match=configuration_table[s.level].good_length;s.nice_match=configuration_table[s.level].nice_length;s.max_chain_length=configuration_table[s.level].max_chain;s.strstart=0;s.block_start=0;s.lookahead=0;s.insert=0;s.match_length=s.prev_length=MIN_MATCH-1;s.match_available=0;s.ins_h=0;};function DeflateState(){this.strm=null;/* pointer back to this zlib stream */this.status=0;/* as the name implies */this.pending_buf=null;/* output still pending */this.pending_buf_size=0;/* size of pending_buf */this.pending_out=0;/* next pending byte to output to the stream */this.pending=0;/* nb of bytes in the pending buffer */this.wrap=0;/* bit 0 true for zlib, bit 1 true for gzip */this.gzhead=null;/* gzip header information to write */this.gzindex=0;/* where in extra, name, or comment */this.method=Z_DEFLATED$2;/* can only be DEFLATED */this.last_flush=-1;/* value of flush param for previous deflate call */this.w_size=0;/* LZ77 window size (32K by default) */this.w_bits=0;/* log2(w_size)  (8..16) */this.w_mask=0;/* w_size - 1 */this.window=null;/* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */this.window_size=0;/* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */this.prev=null;/* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */this.head=null;/* Heads of the hash chains or NIL. */this.ins_h=0;/* hash index of string to be inserted */this.hash_size=0;/* number of elements in hash table */this.hash_bits=0;/* log2(hash_size) */this.hash_mask=0;/* hash_size-1 */this.hash_shift=0;/* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */this.block_start=0;/* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */this.match_length=0;/* length of best match */this.prev_match=0;/* previous match */this.match_available=0;/* set if previous match exists */this.strstart=0;/* start of string to insert */this.match_start=0;/* start of matching string */this.lookahead=0;/* number of valid bytes ahead in window */this.prev_length=0;/* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */this.max_chain_length=0;/* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */this.max_lazy_match=0;/* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */ // That's alias to max_lazy_match, don't use directly
//this.max_insert_length = 0;
/* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */this.level=0;/* compression level (1..9) */this.strategy=0;/* favor or force Huffman coding*/this.good_match=0;/* Use a faster search when the previous match is longer than this */this.nice_match=0;/* Stop searching when current match exceeds this */ /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
// struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
// struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
// Use flat array of DOUBLE size, with interleaved fata,
// because JS does not support effective
this.dyn_ltree=new Uint16Array(HEAP_SIZE*2);this.dyn_dtree=new Uint16Array((2*D_CODES+1)*2);this.bl_tree=new Uint16Array((2*BL_CODES+1)*2);zero(this.dyn_ltree);zero(this.dyn_dtree);zero(this.bl_tree);this.l_desc=null;/* desc. for literal tree */this.d_desc=null;/* desc. for distance tree */this.bl_desc=null;/* desc. for bit length tree */ //ush bl_count[MAX_BITS+1];
this.bl_count=new Uint16Array(MAX_BITS+1);/* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
this.heap=new Uint16Array(2*L_CODES+1);/* heap used to build the Huffman trees */zero(this.heap);this.heap_len=0;/* number of elements in the heap */this.heap_max=0;/* element of largest frequency */ /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */this.depth=new Uint16Array(2*L_CODES+1);//uch depth[2*L_CODES+1];
zero(this.depth);/* Depth of each subtree used as tie breaker for trees of equal frequency
   */this.sym_buf=0;/* buffer for distances and literals/lengths */this.lit_bufsize=0;/* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */this.sym_next=0;/* running index in sym_buf */this.sym_end=0;/* symbol table full when sym_next reaches this */this.opt_len=0;/* bit length of current block with optimal trees */this.static_len=0;/* bit length of current block with static trees */this.matches=0;/* number of string matches in current block */this.insert=0;/* bytes at end of window left to insert */this.bi_buf=0;/* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */this.bi_valid=0;/* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */ // Used for window memory init. We safely ignore it for JS. That makes
// sense only for pointers and memory check tools.
//this.high_water = 0;
/* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */}/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */const deflateStateCheck=strm=>{if(!strm){return 1;}const s=strm.state;if(!s||s.strm!==strm||s.status!==INIT_STATE&&//#ifdef GZIP
s.status!==GZIP_STATE&&//#endif
s.status!==EXTRA_STATE&&s.status!==NAME_STATE&&s.status!==COMMENT_STATE&&s.status!==HCRC_STATE&&s.status!==BUSY_STATE&&s.status!==FINISH_STATE){return 1;}return 0;};const deflateResetKeep=strm=>{if(deflateStateCheck(strm)){return err(strm,Z_STREAM_ERROR$2);}strm.total_in=strm.total_out=0;strm.data_type=Z_UNKNOWN;const s=strm.state;s.pending=0;s.pending_out=0;if(s.wrap<0){s.wrap=-s.wrap;/* was made negative by deflate(..., Z_FINISH); */}s.status=//#ifdef GZIP
s.wrap===2?GZIP_STATE://#endif
s.wrap?INIT_STATE:BUSY_STATE;strm.adler=s.wrap===2?0// crc32(0, Z_NULL, 0)
:1;// adler32(0, Z_NULL, 0)
s.last_flush=-2;_tr_init(s);return Z_OK$3;};const deflateReset=strm=>{const ret=deflateResetKeep(strm);if(ret===Z_OK$3){lm_init(strm.state);}return ret;};const deflateSetHeader=(strm,head)=>{if(deflateStateCheck(strm)||strm.state.wrap!==2){return Z_STREAM_ERROR$2;}strm.state.gzhead=head;return Z_OK$3;};const deflateInit2=(strm,level,method,windowBits,memLevel,strategy)=>{if(!strm){// === Z_NULL
return Z_STREAM_ERROR$2;}let wrap=1;if(level===Z_DEFAULT_COMPRESSION$1){level=6;}if(windowBits<0){/* suppress zlib wrapper */wrap=0;windowBits=-windowBits;}else if(windowBits>15){wrap=2;/* write gzip wrapper instead */windowBits-=16;}if(memLevel<1||memLevel>MAX_MEM_LEVEL||method!==Z_DEFLATED$2||windowBits<8||windowBits>15||level<0||level>9||strategy<0||strategy>Z_FIXED||windowBits===8&&wrap!==1){return err(strm,Z_STREAM_ERROR$2);}if(windowBits===8){windowBits=9;}/* until 256-byte window bug fixed */const s=new DeflateState();strm.state=s;s.strm=strm;s.status=INIT_STATE;/* to pass state test in deflateReset() */s.wrap=wrap;s.gzhead=null;s.w_bits=windowBits;s.w_size=1<<s.w_bits;s.w_mask=s.w_size-1;s.hash_bits=memLevel+7;s.hash_size=1<<s.hash_bits;s.hash_mask=s.hash_size-1;s.hash_shift=~~((s.hash_bits+MIN_MATCH-1)/MIN_MATCH);s.window=new Uint8Array(s.w_size*2);s.head=new Uint16Array(s.hash_size);s.prev=new Uint16Array(s.w_size);// Don't need mem init magic for JS.
//s.high_water = 0;  /* nothing written to s->window yet */
s.lit_bufsize=1<<memLevel+6;/* 16K elements by default */ /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */s.pending_buf_size=s.lit_bufsize*4;s.pending_buf=new Uint8Array(s.pending_buf_size);// It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
//s->sym_buf = s->pending_buf + s->lit_bufsize;
s.sym_buf=s.lit_bufsize;//s->sym_end = (s->lit_bufsize - 1) * 3;
s.sym_end=(s.lit_bufsize-1)*3;/* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */s.level=level;s.strategy=strategy;s.method=method;return deflateReset(strm);};const deflateInit=(strm,level)=>{return deflateInit2(strm,level,Z_DEFLATED$2,MAX_WBITS$1,DEF_MEM_LEVEL,Z_DEFAULT_STRATEGY$1);};/* ========================================================================= */const deflate$2=(strm,flush)=>{if(deflateStateCheck(strm)||flush>Z_BLOCK$1||flush<0){return strm?err(strm,Z_STREAM_ERROR$2):Z_STREAM_ERROR$2;}const s=strm.state;if(!strm.output||strm.avail_in!==0&&!strm.input||s.status===FINISH_STATE&&flush!==Z_FINISH$3){return err(strm,strm.avail_out===0?Z_BUF_ERROR$1:Z_STREAM_ERROR$2);}const old_flush=s.last_flush;s.last_flush=flush;/* Flush as much pending output as possible */if(s.pending!==0){flush_pending(strm);if(strm.avail_out===0){/* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */s.last_flush=-1;return Z_OK$3;}/* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */}else if(strm.avail_in===0&&rank(flush)<=rank(old_flush)&&flush!==Z_FINISH$3){return err(strm,Z_BUF_ERROR$1);}/* User must not provide more input after the first FINISH: */if(s.status===FINISH_STATE&&strm.avail_in!==0){return err(strm,Z_BUF_ERROR$1);}/* Write the header */if(s.status===INIT_STATE&&s.wrap===0){s.status=BUSY_STATE;}if(s.status===INIT_STATE){/* zlib header */let header=Z_DEFLATED$2+(s.w_bits-8<<4)<<8;let level_flags=-1;if(s.strategy>=Z_HUFFMAN_ONLY||s.level<2){level_flags=0;}else if(s.level<6){level_flags=1;}else if(s.level===6){level_flags=2;}else{level_flags=3;}header|=level_flags<<6;if(s.strstart!==0){header|=PRESET_DICT;}header+=31-header%31;putShortMSB(s,header);/* Save the adler32 of the preset dictionary: */if(s.strstart!==0){putShortMSB(s,strm.adler>>>16);putShortMSB(s,strm.adler&0xffff);}strm.adler=1;// adler32(0L, Z_NULL, 0);
s.status=BUSY_STATE;/* Compression must start with an empty pending buffer */flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}}//#ifdef GZIP
if(s.status===GZIP_STATE){/* gzip header */strm.adler=0;//crc32(0L, Z_NULL, 0);
put_byte(s,31);put_byte(s,139);put_byte(s,8);if(!s.gzhead){// s->gzhead == Z_NULL
put_byte(s,0);put_byte(s,0);put_byte(s,0);put_byte(s,0);put_byte(s,0);put_byte(s,s.level===9?2:s.strategy>=Z_HUFFMAN_ONLY||s.level<2?4:0);put_byte(s,OS_CODE);s.status=BUSY_STATE;/* Compression must start with an empty pending buffer */flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}}else{put_byte(s,(s.gzhead.text?1:0)+(s.gzhead.hcrc?2:0)+(!s.gzhead.extra?0:4)+(!s.gzhead.name?0:8)+(!s.gzhead.comment?0:16));put_byte(s,s.gzhead.time&0xff);put_byte(s,s.gzhead.time>>8&0xff);put_byte(s,s.gzhead.time>>16&0xff);put_byte(s,s.gzhead.time>>24&0xff);put_byte(s,s.level===9?2:s.strategy>=Z_HUFFMAN_ONLY||s.level<2?4:0);put_byte(s,s.gzhead.os&0xff);if(s.gzhead.extra&&s.gzhead.extra.length){put_byte(s,s.gzhead.extra.length&0xff);put_byte(s,s.gzhead.extra.length>>8&0xff);}if(s.gzhead.hcrc){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending,0);}s.gzindex=0;s.status=EXTRA_STATE;}}if(s.status===EXTRA_STATE){if(s.gzhead.extra/* != Z_NULL*/){let beg=s.pending;/* start of bytes to update crc */let left=(s.gzhead.extra.length&0xffff)-s.gzindex;while(s.pending+left>s.pending_buf_size){let copy=s.pending_buf_size-s.pending;// zmemcpy(s.pending_buf + s.pending,
//    s.gzhead.extra + s.gzindex, copy);
s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex,s.gzindex+copy),s.pending);s.pending=s.pending_buf_size;//--- HCRC_UPDATE(beg) ---//
if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending-beg,beg);}//---//
s.gzindex+=copy;flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}beg=0;left-=copy;}// JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
//              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
let gzhead_extra=new Uint8Array(s.gzhead.extra);// zmemcpy(s->pending_buf + s->pending,
//     s->gzhead->extra + s->gzindex, left);
s.pending_buf.set(gzhead_extra.subarray(s.gzindex,s.gzindex+left),s.pending);s.pending+=left;//--- HCRC_UPDATE(beg) ---//
if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending-beg,beg);}//---//
s.gzindex=0;}s.status=NAME_STATE;}if(s.status===NAME_STATE){if(s.gzhead.name/* != Z_NULL*/){let beg=s.pending;/* start of bytes to update crc */let val;do{if(s.pending===s.pending_buf_size){//--- HCRC_UPDATE(beg) ---//
if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending-beg,beg);}//---//
flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}beg=0;}// JS specific: little magic to add zero terminator to end of string
if(s.gzindex<s.gzhead.name.length){val=s.gzhead.name.charCodeAt(s.gzindex++)&0xff;}else{val=0;}put_byte(s,val);}while(val!==0);//--- HCRC_UPDATE(beg) ---//
if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending-beg,beg);}//---//
s.gzindex=0;}s.status=COMMENT_STATE;}if(s.status===COMMENT_STATE){if(s.gzhead.comment/* != Z_NULL*/){let beg=s.pending;/* start of bytes to update crc */let val;do{if(s.pending===s.pending_buf_size){//--- HCRC_UPDATE(beg) ---//
if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending-beg,beg);}//---//
flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}beg=0;}// JS specific: little magic to add zero terminator to end of string
if(s.gzindex<s.gzhead.comment.length){val=s.gzhead.comment.charCodeAt(s.gzindex++)&0xff;}else{val=0;}put_byte(s,val);}while(val!==0);//--- HCRC_UPDATE(beg) ---//
if(s.gzhead.hcrc&&s.pending>beg){strm.adler=crc32_1(strm.adler,s.pending_buf,s.pending-beg,beg);}//---//
}s.status=HCRC_STATE;}if(s.status===HCRC_STATE){if(s.gzhead.hcrc){if(s.pending+2>s.pending_buf_size){flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}}put_byte(s,strm.adler&0xff);put_byte(s,strm.adler>>8&0xff);strm.adler=0;//crc32(0L, Z_NULL, 0);
}s.status=BUSY_STATE;/* Compression must start with an empty pending buffer */flush_pending(strm);if(s.pending!==0){s.last_flush=-1;return Z_OK$3;}}//#endif
/* Start a new block or continue the current one.
   */if(strm.avail_in!==0||s.lookahead!==0||flush!==Z_NO_FLUSH$2&&s.status!==FINISH_STATE){let bstate=s.level===0?deflate_stored(s,flush):s.strategy===Z_HUFFMAN_ONLY?deflate_huff(s,flush):s.strategy===Z_RLE?deflate_rle(s,flush):configuration_table[s.level].func(s,flush);if(bstate===BS_FINISH_STARTED||bstate===BS_FINISH_DONE){s.status=FINISH_STATE;}if(bstate===BS_NEED_MORE||bstate===BS_FINISH_STARTED){if(strm.avail_out===0){s.last_flush=-1;/* avoid BUF_ERROR next call, see above */}return Z_OK$3;/* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */}if(bstate===BS_BLOCK_DONE){if(flush===Z_PARTIAL_FLUSH){_tr_align(s);}else if(flush!==Z_BLOCK$1){/* FULL_FLUSH or SYNC_FLUSH */_tr_stored_block(s,0,0,false);/* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */if(flush===Z_FULL_FLUSH$1){/*** CLEAR_HASH(s); ***/ /* forget history */zero(s.head);// Fill with NIL (= 0);
if(s.lookahead===0){s.strstart=0;s.block_start=0;s.insert=0;}}}flush_pending(strm);if(strm.avail_out===0){s.last_flush=-1;/* avoid BUF_ERROR at next call, see above */return Z_OK$3;}}}if(flush!==Z_FINISH$3){return Z_OK$3;}if(s.wrap<=0){return Z_STREAM_END$3;}/* Write the trailer */if(s.wrap===2){put_byte(s,strm.adler&0xff);put_byte(s,strm.adler>>8&0xff);put_byte(s,strm.adler>>16&0xff);put_byte(s,strm.adler>>24&0xff);put_byte(s,strm.total_in&0xff);put_byte(s,strm.total_in>>8&0xff);put_byte(s,strm.total_in>>16&0xff);put_byte(s,strm.total_in>>24&0xff);}else{putShortMSB(s,strm.adler>>>16);putShortMSB(s,strm.adler&0xffff);}flush_pending(strm);/* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */if(s.wrap>0){s.wrap=-s.wrap;}/* write the trailer only once! */return s.pending!==0?Z_OK$3:Z_STREAM_END$3;};const deflateEnd=strm=>{if(deflateStateCheck(strm)){return Z_STREAM_ERROR$2;}const status=strm.state.status;strm.state=null;return status===BUSY_STATE?err(strm,Z_DATA_ERROR$2):Z_OK$3;};/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */const deflateSetDictionary=(strm,dictionary)=>{let dictLength=dictionary.length;if(deflateStateCheck(strm)){return Z_STREAM_ERROR$2;}const s=strm.state;const wrap=s.wrap;if(wrap===2||wrap===1&&s.status!==INIT_STATE||s.lookahead){return Z_STREAM_ERROR$2;}/* when using zlib wrappers, compute Adler-32 for provided dictionary */if(wrap===1){/* adler32(strm->adler, dictionary, dictLength); */strm.adler=adler32_1(strm.adler,dictionary,dictLength,0);}s.wrap=0;/* avoid computing Adler-32 in read_buf */ /* if dictionary would fill window, just replace the history */if(dictLength>=s.w_size){if(wrap===0){/* already empty otherwise */ /*** CLEAR_HASH(s); ***/zero(s.head);// Fill with NIL (= 0);
s.strstart=0;s.block_start=0;s.insert=0;}/* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);
let tmpDict=new Uint8Array(s.w_size);tmpDict.set(dictionary.subarray(dictLength-s.w_size,dictLength),0);dictionary=tmpDict;dictLength=s.w_size;}/* insert dictionary into window and hash */const avail=strm.avail_in;const next=strm.next_in;const input=strm.input;strm.avail_in=dictLength;strm.next_in=0;strm.input=dictionary;fill_window(s);while(s.lookahead>=MIN_MATCH){let str=s.strstart;let n=s.lookahead-(MIN_MATCH-1);do{/* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */s.ins_h=HASH(s,s.ins_h,s.window[str+MIN_MATCH-1]);s.prev[str&s.w_mask]=s.head[s.ins_h];s.head[s.ins_h]=str;str++;}while(--n);s.strstart=str;s.lookahead=MIN_MATCH-1;fill_window(s);}s.strstart+=s.lookahead;s.block_start=s.strstart;s.insert=s.lookahead;s.lookahead=0;s.match_length=s.prev_length=MIN_MATCH-1;s.match_available=0;strm.next_in=next;strm.input=input;strm.avail_in=avail;s.wrap=wrap;return Z_OK$3;};var deflateInit_1=deflateInit;var deflateInit2_1=deflateInit2;var deflateReset_1=deflateReset;var deflateResetKeep_1=deflateResetKeep;var deflateSetHeader_1=deflateSetHeader;var deflate_2$1=deflate$2;var deflateEnd_1=deflateEnd;var deflateSetDictionary_1=deflateSetDictionary;var deflateInfo='pako deflate (from Nodeca project)';/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/var deflate_1$2={deflateInit:deflateInit_1,deflateInit2:deflateInit2_1,deflateReset:deflateReset_1,deflateResetKeep:deflateResetKeep_1,deflateSetHeader:deflateSetHeader_1,deflate:deflate_2$1,deflateEnd:deflateEnd_1,deflateSetDictionary:deflateSetDictionary_1,deflateInfo:deflateInfo};const _has=(obj,key)=>{return Object.prototype.hasOwnProperty.call(obj,key);};var assign=function(obj/*from1, from2, from3, ...*/){const sources=Array.prototype.slice.call(arguments,1);while(sources.length){const source=sources.shift();if(!source){continue;}if(typeof source!=='object'){throw new TypeError(source+'must be non-object');}for(const p in source){if(_has(source,p)){obj[p]=source[p];}}}return obj;};// Join array of chunks to single array.
var flattenChunks=chunks=>{// calculate data length
let len=0;for(let i=0,l=chunks.length;i<l;i++){len+=chunks[i].length;}// join chunks
const result=new Uint8Array(len);for(let i=0,pos=0,l=chunks.length;i<l;i++){let chunk=chunks[i];result.set(chunk,pos);pos+=chunk.length;}return result;};var common={assign:assign,flattenChunks:flattenChunks};// String encode/decode helpers
// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK=true;try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(__){STR_APPLY_UIA_OK=false;}// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len=new Uint8Array(256);for(let q=0;q<256;q++){_utf8len[q]=q>=252?6:q>=248?5:q>=240?4:q>=224?3:q>=192?2:1;}_utf8len[254]=_utf8len[254]=1;// Invalid sequence start
// convert string to array (typed, when possible)
var string2buf=str=>{if(typeof TextEncoder==='function'&&TextEncoder.prototype.encode){return new TextEncoder().encode(str);}let buf,c,c2,m_pos,i,str_len=str.length,buf_len=0;// count binary size
for(m_pos=0;m_pos<str_len;m_pos++){c=str.charCodeAt(m_pos);if((c&0xfc00)===0xd800&&m_pos+1<str_len){c2=str.charCodeAt(m_pos+1);if((c2&0xfc00)===0xdc00){c=0x10000+(c-0xd800<<10)+(c2-0xdc00);m_pos++;}}buf_len+=c<0x80?1:c<0x800?2:c<0x10000?3:4;}// allocate buffer
buf=new Uint8Array(buf_len);// convert
for(i=0,m_pos=0;i<buf_len;m_pos++){c=str.charCodeAt(m_pos);if((c&0xfc00)===0xd800&&m_pos+1<str_len){c2=str.charCodeAt(m_pos+1);if((c2&0xfc00)===0xdc00){c=0x10000+(c-0xd800<<10)+(c2-0xdc00);m_pos++;}}if(c<0x80){/* one byte */buf[i++]=c;}else if(c<0x800){/* two bytes */buf[i++]=0xC0|c>>>6;buf[i++]=0x80|c&0x3f;}else if(c<0x10000){/* three bytes */buf[i++]=0xE0|c>>>12;buf[i++]=0x80|c>>>6&0x3f;buf[i++]=0x80|c&0x3f;}else{/* four bytes */buf[i++]=0xf0|c>>>18;buf[i++]=0x80|c>>>12&0x3f;buf[i++]=0x80|c>>>6&0x3f;buf[i++]=0x80|c&0x3f;}}return buf;};// Helper
const buf2binstring=(buf,len)=>{// On Chrome, the arguments in a function call that are allowed is `65534`.
// If the length of the buffer is smaller than that, we can use this optimization,
// otherwise we will take a slower path.
if(len<65534){if(buf.subarray&&STR_APPLY_UIA_OK){return String.fromCharCode.apply(null,buf.length===len?buf:buf.subarray(0,len));}}let result='';for(let i=0;i<len;i++){result+=String.fromCharCode(buf[i]);}return result;};// convert array to string
var buf2string=(buf,max)=>{const len=max||buf.length;if(typeof TextDecoder==='function'&&TextDecoder.prototype.decode){return new TextDecoder().decode(buf.subarray(0,max));}let i,out;// Reserve max possible length (2 words per char)
// NB: by unknown reasons, Array is significantly faster for
//     String.fromCharCode.apply than Uint16Array.
const utf16buf=new Array(len*2);for(out=0,i=0;i<len;){let c=buf[i++];// quick process ascii
if(c<0x80){utf16buf[out++]=c;continue;}let c_len=_utf8len[c];// skip 5 & 6 byte codes
if(c_len>4){utf16buf[out++]=0xfffd;i+=c_len-1;continue;}// apply mask on first byte
c&=c_len===2?0x1f:c_len===3?0x0f:0x07;// join the rest
while(c_len>1&&i<len){c=c<<6|buf[i++]&0x3f;c_len--;}// terminated by end of string?
if(c_len>1){utf16buf[out++]=0xfffd;continue;}if(c<0x10000){utf16buf[out++]=c;}else{c-=0x10000;utf16buf[out++]=0xd800|c>>10&0x3ff;utf16buf[out++]=0xdc00|c&0x3ff;}}return buf2binstring(utf16buf,out);};// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border=(buf,max)=>{max=max||buf.length;if(max>buf.length){max=buf.length;}// go back from last position, until start of sequence found
let pos=max-1;while(pos>=0&&(buf[pos]&0xC0)===0x80){pos--;}// Very small and broken sequence,
// return max, because we should return something anyway.
if(pos<0){return max;}// If we came to start of buffer - that means buffer is too small,
// return max too.
if(pos===0){return max;}return pos+_utf8len[buf[pos]]>max?pos:max;};var strings={string2buf:string2buf,buf2string:buf2string,utf8border:utf8border};// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function ZStream(){/* next input byte */this.input=null;// JS specific, because we have no pointers
this.next_in=0;/* number of bytes available at input */this.avail_in=0;/* total number of input bytes read so far */this.total_in=0;/* next output byte should be put there */this.output=null;// JS specific, because we have no pointers
this.next_out=0;/* remaining free space at output */this.avail_out=0;/* total number of bytes output so far */this.total_out=0;/* last error message, NULL if no error */this.msg=''/*Z_NULL*/;/* not visible by applications */this.state=null;/* best guess about the data type: binary or text */this.data_type=2/*Z_UNKNOWN*/;/* adler32 value of the uncompressed data */this.adler=0;}var zstream=ZStream;const toString$1=Object.prototype.toString;/* Public constants ==========================================================*/ /* ===========================================================================*/const{Z_NO_FLUSH:Z_NO_FLUSH$1,Z_SYNC_FLUSH,Z_FULL_FLUSH,Z_FINISH:Z_FINISH$2,Z_OK:Z_OK$2,Z_STREAM_END:Z_STREAM_END$2,Z_DEFAULT_COMPRESSION,Z_DEFAULT_STRATEGY,Z_DEFLATED:Z_DEFLATED$1}=constants$2;/* ===========================================================================*/ /**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/ /* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/ /**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/ /**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/ /**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/function Deflate$1(options){this.options=common.assign({level:Z_DEFAULT_COMPRESSION,method:Z_DEFLATED$1,chunkSize:16384,windowBits:15,memLevel:8,strategy:Z_DEFAULT_STRATEGY},options||{});let opt=this.options;if(opt.raw&&opt.windowBits>0){opt.windowBits=-opt.windowBits;}else if(opt.gzip&&opt.windowBits>0&&opt.windowBits<16){opt.windowBits+=16;}this.err=0;// error code, if happens (0 = Z_OK)
this.msg='';// error message
this.ended=false;// used to avoid multiple onEnd() calls
this.chunks=[];// chunks of compressed data
this.strm=new zstream();this.strm.avail_out=0;let status=deflate_1$2.deflateInit2(this.strm,opt.level,opt.method,opt.windowBits,opt.memLevel,opt.strategy);if(status!==Z_OK$2){throw new Error(messages[status]);}if(opt.header){deflate_1$2.deflateSetHeader(this.strm,opt.header);}if(opt.dictionary){let dict;// Convert data if needed
if(typeof opt.dictionary==='string'){// If we need to compress text, change encoding to utf8.
dict=strings.string2buf(opt.dictionary);}else if(toString$1.call(opt.dictionary)==='[object ArrayBuffer]'){dict=new Uint8Array(opt.dictionary);}else{dict=opt.dictionary;}status=deflate_1$2.deflateSetDictionary(this.strm,dict);if(status!==Z_OK$2){throw new Error(messages[status]);}this._dict_set=true;}}/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/Deflate$1.prototype.push=function(data,flush_mode){const strm=this.strm;const chunkSize=this.options.chunkSize;let status,_flush_mode;if(this.ended){return false;}if(flush_mode===~~flush_mode)_flush_mode=flush_mode;else _flush_mode=flush_mode===true?Z_FINISH$2:Z_NO_FLUSH$1;// Convert data if needed
if(typeof data==='string'){// If we need to compress text, change encoding to utf8.
strm.input=strings.string2buf(data);}else if(toString$1.call(data)==='[object ArrayBuffer]'){strm.input=new Uint8Array(data);}else{strm.input=data;}strm.next_in=0;strm.avail_in=strm.input.length;for(;;){if(strm.avail_out===0){strm.output=new Uint8Array(chunkSize);strm.next_out=0;strm.avail_out=chunkSize;}// Make sure avail_out > 6 to avoid repeating markers
if((_flush_mode===Z_SYNC_FLUSH||_flush_mode===Z_FULL_FLUSH)&&strm.avail_out<=6){this.onData(strm.output.subarray(0,strm.next_out));strm.avail_out=0;continue;}status=deflate_1$2.deflate(strm,_flush_mode);// Ended => flush and finish
if(status===Z_STREAM_END$2){if(strm.next_out>0){this.onData(strm.output.subarray(0,strm.next_out));}status=deflate_1$2.deflateEnd(this.strm);this.onEnd(status);this.ended=true;return status===Z_OK$2;}// Flush if out buffer full
if(strm.avail_out===0){this.onData(strm.output);continue;}// Flush if requested and has data
if(_flush_mode>0&&strm.next_out>0){this.onData(strm.output.subarray(0,strm.next_out));strm.avail_out=0;continue;}if(strm.avail_in===0)break;}return true;};/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/Deflate$1.prototype.onData=function(chunk){this.chunks.push(chunk);};/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/Deflate$1.prototype.onEnd=function(status){// On success - join
if(status===Z_OK$2){this.result=common.flattenChunks(this.chunks);}this.chunks=[];this.err=status;this.msg=this.strm.msg;};/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/function deflate$1(input,options){const deflator=new Deflate$1(options);deflator.push(input,true);// That will never happens, if you don't cheat with options :)
if(deflator.err){throw deflator.msg||messages[deflator.err];}return deflator.result;}/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/function deflateRaw$1(input,options){options=options||{};options.raw=true;return deflate$1(input,options);}/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/function gzip$1(input,options){options=options||{};options.gzip=true;return deflate$1(input,options);}var Deflate_1$1=Deflate$1;var deflate_2=deflate$1;var deflateRaw_1$1=deflateRaw$1;var gzip_1$1=gzip$1;var constants$1=constants$2;var deflate_1$1={Deflate:Deflate_1$1,deflate:deflate_2,deflateRaw:deflateRaw_1$1,gzip:gzip_1$1,constants:constants$1};// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// See state defs from inflate.js
const BAD$1=16209;/* got a data error -- remain here until reset */const TYPE$1=16191;/* i: waiting for type bits, including last-flag bit */ /*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */var inffast=function inflate_fast(strm,start){let _in;/* local strm.input */let last;/* have enough input while in < last */let _out;/* local strm.output */let beg;/* inflate()'s initial strm.output */let end;/* while out < end, enough space available */ //#ifdef INFLATE_STRICT
let dmax;/* maximum distance from zlib header */ //#endif
let wsize;/* window size or zero if not using window */let whave;/* valid bytes in the window */let wnext;/* window write index */ // Use `s_window` instead `window`, avoid conflict with instrumentation tools
let s_window;/* allocated sliding window, if wsize != 0 */let hold;/* local strm.hold */let bits;/* local strm.bits */let lcode;/* local strm.lencode */let dcode;/* local strm.distcode */let lmask;/* mask for first level of length codes */let dmask;/* mask for first level of distance codes */let here;/* retrieved table entry */let op;/* code bits, operation, extra bits, or */ /*  window position, window bytes to copy */let len;/* match length, unused bytes */let dist;/* match distance */let from;/* where to copy match from */let from_source;let input,output;// JS specific, because we have no pointers
/* copy state to local variables */const state=strm.state;//here = state.here;
_in=strm.next_in;input=strm.input;last=_in+(strm.avail_in-5);_out=strm.next_out;output=strm.output;beg=_out-(start-strm.avail_out);end=_out+(strm.avail_out-257);//#ifdef INFLATE_STRICT
dmax=state.dmax;//#endif
wsize=state.wsize;whave=state.whave;wnext=state.wnext;s_window=state.window;hold=state.hold;bits=state.bits;lcode=state.lencode;dcode=state.distcode;lmask=(1<<state.lenbits)-1;dmask=(1<<state.distbits)-1;/* decode literals and length/distances until end-of-block or not enough
     input data or output space */top:do{if(bits<15){hold+=input[_in++]<<bits;bits+=8;hold+=input[_in++]<<bits;bits+=8;}here=lcode[hold&lmask];dolen:for(;;){// Goto emulation
op=here>>>24/*here.bits*/;hold>>>=op;bits-=op;op=here>>>16&0xff/*here.op*/;if(op===0){/* literal */ //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
//        "inflate:         literal '%c'\n" :
//        "inflate:         literal 0x%02x\n", here.val));
output[_out++]=here&0xffff/*here.val*/;}else if(op&16){/* length base */len=here&0xffff/*here.val*/;op&=15;/* number of extra bits */if(op){if(bits<op){hold+=input[_in++]<<bits;bits+=8;}len+=hold&(1<<op)-1;hold>>>=op;bits-=op;}//Tracevv((stderr, "inflate:         length %u\n", len));
if(bits<15){hold+=input[_in++]<<bits;bits+=8;hold+=input[_in++]<<bits;bits+=8;}here=dcode[hold&dmask];dodist:for(;;){// goto emulation
op=here>>>24/*here.bits*/;hold>>>=op;bits-=op;op=here>>>16&0xff/*here.op*/;if(op&16){/* distance base */dist=here&0xffff/*here.val*/;op&=15;/* number of extra bits */if(bits<op){hold+=input[_in++]<<bits;bits+=8;if(bits<op){hold+=input[_in++]<<bits;bits+=8;}}dist+=hold&(1<<op)-1;//#ifdef INFLATE_STRICT
if(dist>dmax){strm.msg='invalid distance too far back';state.mode=BAD$1;break top;}//#endif
hold>>>=op;bits-=op;//Tracevv((stderr, "inflate:         distance %u\n", dist));
op=_out-beg;/* max distance in output */if(dist>op){/* see if copy from window */op=dist-op;/* distance back in window */if(op>whave){if(state.sane){strm.msg='invalid distance too far back';state.mode=BAD$1;break top;}// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
}from=0;// window index
from_source=s_window;if(wnext===0){/* very common case */from+=wsize-op;if(op<len){/* some from window */len-=op;do{output[_out++]=s_window[from++];}while(--op);from=_out-dist;/* rest from output */from_source=output;}}else if(wnext<op){/* wrap around window */from+=wsize+wnext-op;op-=wnext;if(op<len){/* some from end of window */len-=op;do{output[_out++]=s_window[from++];}while(--op);from=0;if(wnext<len){/* some from start of window */op=wnext;len-=op;do{output[_out++]=s_window[from++];}while(--op);from=_out-dist;/* rest from output */from_source=output;}}}else{/* contiguous in window */from+=wnext-op;if(op<len){/* some from window */len-=op;do{output[_out++]=s_window[from++];}while(--op);from=_out-dist;/* rest from output */from_source=output;}}while(len>2){output[_out++]=from_source[from++];output[_out++]=from_source[from++];output[_out++]=from_source[from++];len-=3;}if(len){output[_out++]=from_source[from++];if(len>1){output[_out++]=from_source[from++];}}}else{from=_out-dist;/* copy direct from output */do{/* minimum length is three */output[_out++]=output[from++];output[_out++]=output[from++];output[_out++]=output[from++];len-=3;}while(len>2);if(len){output[_out++]=output[from++];if(len>1){output[_out++]=output[from++];}}}}else if((op&64)===0){/* 2nd level distance code */here=dcode[(here&0xffff/*here.val*/)+(hold&(1<<op)-1)];continue dodist;}else{strm.msg='invalid distance code';state.mode=BAD$1;break top;}break;// need to emulate goto via "continue"
}}else if((op&64)===0){/* 2nd level length code */here=lcode[(here&0xffff/*here.val*/)+(hold&(1<<op)-1)];continue dolen;}else if(op&32){/* end-of-block */ //Tracevv((stderr, "inflate:         end of block\n"));
state.mode=TYPE$1;break top;}else{strm.msg='invalid literal/length code';state.mode=BAD$1;break top;}break;// need to emulate goto via "continue"
}}while(_in<last&&_out<end);/* return unused bytes (on entry, bits < 8, so in won't go too far back) */len=bits>>3;_in-=len;bits-=len<<3;hold&=(1<<bits)-1;/* update state and return */strm.next_in=_in;strm.next_out=_out;strm.avail_in=_in<last?5+(last-_in):5-(_in-last);strm.avail_out=_out<end?257+(end-_out):257-(_out-end);state.hold=hold;state.bits=bits;return;};// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const MAXBITS=15;const ENOUGH_LENS$1=852;const ENOUGH_DISTS$1=592;//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
const CODES$1=0;const LENS$1=1;const DISTS$1=2;const lbase=new Uint16Array([/* Length codes 257..285 base */3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]);const lext=new Uint8Array([/* Length codes 257..285 extra */16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]);const dbase=new Uint16Array([/* Distance codes 0..29 base */1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]);const dext=new Uint8Array([/* Distance codes 0..29 extra */16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);const inflate_table=(type,lens,lens_index,codes,table,table_index,work,opts)=>{const bits=opts.bits;//here = opts.here; /* table entry for duplication */
let len=0;/* a code's length in bits */let sym=0;/* index of code symbols */let min=0,max=0;/* minimum and maximum code lengths */let root=0;/* number of index bits for root table */let curr=0;/* number of index bits for current table */let drop=0;/* code bits to drop for sub-table */let left=0;/* number of prefix codes available */let used=0;/* code entries in table used */let huff=0;/* Huffman code */let incr;/* for incrementing code, index */let fill;/* index for replicating entries */let low;/* low bits for current root entry */let mask;/* mask for low root bits */let next;/* next available space in table */let base=null;/* base value table to use */ //  let shoextra;    /* extra bits table to use */
let match;/* use base and extra for symbol >= match */const count=new Uint16Array(MAXBITS+1);//[MAXBITS+1];    /* number of codes of each length */
const offs=new Uint16Array(MAXBITS+1);//[MAXBITS+1];     /* offsets in table for each length */
let extra=null;let here_bits,here_op,here_val;/*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */for(len=0;len<=MAXBITS;len++){count[len]=0;}for(sym=0;sym<codes;sym++){count[lens[lens_index+sym]]++;}/* bound code lengths, force root to be within code lengths */root=bits;for(max=MAXBITS;max>=1;max--){if(count[max]!==0){break;}}if(root>max){root=max;}if(max===0){/* no symbols to code at all */ //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
//table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
//table.val[opts.table_index++] = 0;   //here.val = (var short)0;
table[table_index++]=1<<24|64<<16|0;//table.op[opts.table_index] = 64;
//table.bits[opts.table_index] = 1;
//table.val[opts.table_index++] = 0;
table[table_index++]=1<<24|64<<16|0;opts.bits=1;return 0;/* no symbols, but wait for decoding to report error */}for(min=1;min<max;min++){if(count[min]!==0){break;}}if(root<min){root=min;}/* check for an over-subscribed or incomplete set of lengths */left=1;for(len=1;len<=MAXBITS;len++){left<<=1;left-=count[len];if(left<0){return-1;}/* over-subscribed */}if(left>0&&(type===CODES$1||max!==1)){return-1;/* incomplete set */}/* generate offsets into symbol table for each length for sorting */offs[1]=0;for(len=1;len<MAXBITS;len++){offs[len+1]=offs[len]+count[len];}/* sort symbols by length, by symbol order within each length */for(sym=0;sym<codes;sym++){if(lens[lens_index+sym]!==0){work[offs[lens[lens_index+sym]]++]=sym;}}/*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,
// to avoid deopts in old v8
if(type===CODES$1){base=extra=work;/* dummy value--not used */match=20;}else if(type===LENS$1){base=lbase;extra=lext;match=257;}else{/* DISTS */base=dbase;extra=dext;match=0;}/* initialize opts for loop */huff=0;/* starting code */sym=0;/* starting code symbol */len=min;/* starting code length */next=table_index;/* current table to fill in */curr=root;/* current table index bits */drop=0;/* current bits to drop from code for index */low=-1;/* trigger new sub-table when len > root */used=1<<root;/* use root table entries */mask=used-1;/* mask for comparing low */ /* check available table space */if(type===LENS$1&&used>ENOUGH_LENS$1||type===DISTS$1&&used>ENOUGH_DISTS$1){return 1;}/* process all codes and make table entries */for(;;){/* create table entry */here_bits=len-drop;if(work[sym]+1<match){here_op=0;here_val=work[sym];}else if(work[sym]>=match){here_op=extra[work[sym]-match];here_val=base[work[sym]-match];}else{here_op=32+64;/* end of block */here_val=0;}/* replicate for those indices with low len bits equal to huff */incr=1<<len-drop;fill=1<<curr;min=fill;/* save offset to next table */do{fill-=incr;table[next+(huff>>drop)+fill]=here_bits<<24|here_op<<16|here_val|0;}while(fill!==0);/* backwards increment the len-bit code huff */incr=1<<len-1;while(huff&incr){incr>>=1;}if(incr!==0){huff&=incr-1;huff+=incr;}else{huff=0;}/* go to next symbol, update count, len */sym++;if(--count[len]===0){if(len===max){break;}len=lens[lens_index+work[sym]];}/* create new sub-table if needed */if(len>root&&(huff&mask)!==low){/* if first time, transition to sub-tables */if(drop===0){drop=root;}/* increment past last table */next+=min;/* here min is 1 << curr */ /* determine length of next table */curr=len-drop;left=1<<curr;while(curr+drop<max){left-=count[curr+drop];if(left<=0){break;}curr++;left<<=1;}/* check for enough space */used+=1<<curr;if(type===LENS$1&&used>ENOUGH_LENS$1||type===DISTS$1&&used>ENOUGH_DISTS$1){return 1;}/* point entry in root table to sub-table */low=huff&mask;/*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/table[low]=root<<24|curr<<16|next-table_index|0;}}/* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */if(huff!==0){//table.op[next + huff] = 64;            /* invalid code marker */
//table.bits[next + huff] = len - drop;
//table.val[next + huff] = 0;
table[next+huff]=len-drop<<24|64<<16|0;}/* set return parameters */ //opts.table_index += used;
opts.bits=root;return 0;};var inftrees=inflate_table;// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const CODES=0;const LENS=1;const DISTS=2;/* Public constants ==========================================================*/ /* ===========================================================================*/const{Z_FINISH:Z_FINISH$1,Z_BLOCK,Z_TREES,Z_OK:Z_OK$1,Z_STREAM_END:Z_STREAM_END$1,Z_NEED_DICT:Z_NEED_DICT$1,Z_STREAM_ERROR:Z_STREAM_ERROR$1,Z_DATA_ERROR:Z_DATA_ERROR$1,Z_MEM_ERROR:Z_MEM_ERROR$1,Z_BUF_ERROR,Z_DEFLATED}=constants$2;/* STATES ====================================================================*/ /* ===========================================================================*/const HEAD=16180;/* i: waiting for magic header */const FLAGS=16181;/* i: waiting for method and flags (gzip) */const TIME=16182;/* i: waiting for modification time (gzip) */const OS=16183;/* i: waiting for extra flags and operating system (gzip) */const EXLEN=16184;/* i: waiting for extra length (gzip) */const EXTRA=16185;/* i: waiting for extra bytes (gzip) */const NAME=16186;/* i: waiting for end of file name (gzip) */const COMMENT=16187;/* i: waiting for end of comment (gzip) */const HCRC=16188;/* i: waiting for header crc (gzip) */const DICTID=16189;/* i: waiting for dictionary check value */const DICT=16190;/* waiting for inflateSetDictionary() call */const TYPE=16191;/* i: waiting for type bits, including last-flag bit */const TYPEDO=16192;/* i: same, but skip check to exit inflate on new block */const STORED=16193;/* i: waiting for stored size (length and complement) */const COPY_=16194;/* i/o: same as COPY below, but only first time in */const COPY=16195;/* i/o: waiting for input or output to copy stored block */const TABLE=16196;/* i: waiting for dynamic block table lengths */const LENLENS=16197;/* i: waiting for code length code lengths */const CODELENS=16198;/* i: waiting for length/lit and distance code lengths */const LEN_=16199;/* i: same as LEN below, but only first time in */const LEN=16200;/* i: waiting for length/lit/eob code */const LENEXT=16201;/* i: waiting for length extra bits */const DIST=16202;/* i: waiting for distance code */const DISTEXT=16203;/* i: waiting for distance extra bits */const MATCH=16204;/* o: waiting for output space to copy string */const LIT=16205;/* o: waiting for output space to write literal */const CHECK=16206;/* i: waiting for 32-bit check value */const LENGTH=16207;/* i: waiting for 32-bit length (gzip) */const DONE=16208;/* finished check, done -- remain here until reset */const BAD=16209;/* got a data error -- remain here until reset */const MEM=16210;/* got an inflate() memory error -- remain here until reset */const SYNC=16211;/* looking for synchronization bytes to restart inflate() */ /* ===========================================================================*/const ENOUGH_LENS=852;const ENOUGH_DISTS=592;//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
const MAX_WBITS=15;/* 32K LZ77 window */const DEF_WBITS=MAX_WBITS;const zswap32=q=>{return(q>>>24&0xff)+(q>>>8&0xff00)+((q&0xff00)<<8)+((q&0xff)<<24);};function InflateState(){this.strm=null;/* pointer back to this zlib stream */this.mode=0;/* current inflate mode */this.last=false;/* true if processing last block */this.wrap=0;/* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */this.havedict=false;/* true if dictionary provided */this.flags=0;/* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */this.dmax=0;/* zlib header max distance (INFLATE_STRICT) */this.check=0;/* protected copy of check value */this.total=0;/* protected copy of output count */ // TODO: may be {}
this.head=null;/* where to save gzip header information */ /* sliding window */this.wbits=0;/* log base 2 of requested window size */this.wsize=0;/* window size or zero if not using window */this.whave=0;/* valid bytes in the window */this.wnext=0;/* window write index */this.window=null;/* allocated sliding window, if needed */ /* bit accumulator */this.hold=0;/* input bit accumulator */this.bits=0;/* number of bits in "in" */ /* for string and stored block copying */this.length=0;/* literal or length of data to copy */this.offset=0;/* distance back to copy string from */ /* for table and code decoding */this.extra=0;/* extra bits needed */ /* fixed and dynamic code tables */this.lencode=null;/* starting table for length/literal codes */this.distcode=null;/* starting table for distance codes */this.lenbits=0;/* index bits for lencode */this.distbits=0;/* index bits for distcode */ /* dynamic table building */this.ncode=0;/* number of code length code lengths */this.nlen=0;/* number of length code lengths */this.ndist=0;/* number of distance code lengths */this.have=0;/* number of code lengths in lens[] */this.next=null;/* next available space in codes[] */this.lens=new Uint16Array(320);/* temporary storage for code lengths */this.work=new Uint16Array(288);/* work area for code table building */ /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */ //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
this.lendyn=null;/* dynamic table for length/literal codes (JS specific) */this.distdyn=null;/* dynamic table for distance codes (JS specific) */this.sane=0;/* if false, allow invalid distance too far */this.back=0;/* bits back of last unprocessed length/lit */this.was=0;/* initial length of match */}const inflateStateCheck=strm=>{if(!strm){return 1;}const state=strm.state;if(!state||state.strm!==strm||state.mode<HEAD||state.mode>SYNC){return 1;}return 0;};const inflateResetKeep=strm=>{if(inflateStateCheck(strm)){return Z_STREAM_ERROR$1;}const state=strm.state;strm.total_in=strm.total_out=state.total=0;strm.msg='';/*Z_NULL*/if(state.wrap){/* to support ill-conceived Java test suite */strm.adler=state.wrap&1;}state.mode=HEAD;state.last=0;state.havedict=0;state.flags=-1;state.dmax=32768;state.head=null/*Z_NULL*/;state.hold=0;state.bits=0;//state.lencode = state.distcode = state.next = state.codes;
state.lencode=state.lendyn=new Int32Array(ENOUGH_LENS);state.distcode=state.distdyn=new Int32Array(ENOUGH_DISTS);state.sane=1;state.back=-1;//Tracev((stderr, "inflate: reset\n"));
return Z_OK$1;};const inflateReset=strm=>{if(inflateStateCheck(strm)){return Z_STREAM_ERROR$1;}const state=strm.state;state.wsize=0;state.whave=0;state.wnext=0;return inflateResetKeep(strm);};const inflateReset2=(strm,windowBits)=>{let wrap;/* get the state */if(inflateStateCheck(strm)){return Z_STREAM_ERROR$1;}const state=strm.state;/* extract wrap request from windowBits parameter */if(windowBits<0){wrap=0;windowBits=-windowBits;}else{wrap=(windowBits>>4)+5;if(windowBits<48){windowBits&=15;}}/* set number of window bits, free window if different */if(windowBits&&(windowBits<8||windowBits>15)){return Z_STREAM_ERROR$1;}if(state.window!==null&&state.wbits!==windowBits){state.window=null;}/* update state and reset the rest of it */state.wrap=wrap;state.wbits=windowBits;return inflateReset(strm);};const inflateInit2=(strm,windowBits)=>{if(!strm){return Z_STREAM_ERROR$1;}//strm.msg = Z_NULL;                 /* in case we return an error */
const state=new InflateState();//if (state === Z_NULL) return Z_MEM_ERROR;
//Tracev((stderr, "inflate: allocated\n"));
strm.state=state;state.strm=strm;state.window=null/*Z_NULL*/;state.mode=HEAD;/* to pass state test in inflateReset2() */const ret=inflateReset2(strm,windowBits);if(ret!==Z_OK$1){strm.state=null/*Z_NULL*/;}return ret;};const inflateInit=strm=>{return inflateInit2(strm,DEF_WBITS);};/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */let virgin=true;let lenfix,distfix;// We have no pointers in JS, so keep tables separate
const fixedtables=state=>{/* build fixed huffman tables if first call (may not be thread safe) */if(virgin){lenfix=new Int32Array(512);distfix=new Int32Array(32);/* literal/length table */let sym=0;while(sym<144){state.lens[sym++]=8;}while(sym<256){state.lens[sym++]=9;}while(sym<280){state.lens[sym++]=7;}while(sym<288){state.lens[sym++]=8;}inftrees(LENS,state.lens,0,288,lenfix,0,state.work,{bits:9});/* distance table */sym=0;while(sym<32){state.lens[sym++]=5;}inftrees(DISTS,state.lens,0,32,distfix,0,state.work,{bits:5});/* do this just once */virgin=false;}state.lencode=lenfix;state.lenbits=9;state.distcode=distfix;state.distbits=5;};/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */const updatewindow=(strm,src,end,copy)=>{let dist;const state=strm.state;/* if it hasn't been done already, allocate space for the window */if(state.window===null){state.wsize=1<<state.wbits;state.wnext=0;state.whave=0;state.window=new Uint8Array(state.wsize);}/* copy state->wsize or less output bytes into the circular window */if(copy>=state.wsize){state.window.set(src.subarray(end-state.wsize,end),0);state.wnext=0;state.whave=state.wsize;}else{dist=state.wsize-state.wnext;if(dist>copy){dist=copy;}//zmemcpy(state->window + state->wnext, end - copy, dist);
state.window.set(src.subarray(end-copy,end-copy+dist),state.wnext);copy-=dist;if(copy){//zmemcpy(state->window, end - copy, copy);
state.window.set(src.subarray(end-copy,end),0);state.wnext=copy;state.whave=state.wsize;}else{state.wnext+=dist;if(state.wnext===state.wsize){state.wnext=0;}if(state.whave<state.wsize){state.whave+=dist;}}}return 0;};const inflate$2=(strm,flush)=>{let state;let input,output;// input/output buffers
let next;/* next input INDEX */let put;/* next output INDEX */let have,left;/* available input and output */let hold;/* bit buffer */let bits;/* bits in bit buffer */let _in,_out;/* save starting available input and output */let copy;/* number of stored or match bytes to copy */let from;/* where to copy match bytes from */let from_source;let here=0;/* current decoding table entry */let here_bits,here_op,here_val;// paked "here" denormalized (JS specific)
//let last;                   /* parent table entry */
let last_bits,last_op,last_val;// paked "last" denormalized (JS specific)
let len;/* length to copy for repeats, bits to drop */let ret;/* return code */const hbuf=new Uint8Array(4);/* buffer for gzip header crc calculation */let opts;let n;// temporary variable for NEED_BITS
const order=/* permutation of code lengths */new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(inflateStateCheck(strm)||!strm.output||!strm.input&&strm.avail_in!==0){return Z_STREAM_ERROR$1;}state=strm.state;if(state.mode===TYPE){state.mode=TYPEDO;}/* skip check */ //--- LOAD() ---
put=strm.next_out;output=strm.output;left=strm.avail_out;next=strm.next_in;input=strm.input;have=strm.avail_in;hold=state.hold;bits=state.bits;//---
_in=have;_out=left;ret=Z_OK$1;inf_leave:// goto emulation
for(;;){switch(state.mode){case HEAD:if(state.wrap===0){state.mode=TYPEDO;break;}//=== NEEDBITS(16);
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.wrap&2&&hold===0x8b1f){/* gzip header */if(state.wbits===0){state.wbits=15;}state.check=0/*crc32(0L, Z_NULL, 0)*/;//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32_1(state.check,hbuf,2,0);//===//
//=== INITBITS();
hold=0;bits=0;//===//
state.mode=FLAGS;break;}if(state.head){state.head.done=false;}if(!(state.wrap&1)||/* check if zlib header allowed */(((hold&0xff/*BITS(8)*/)<<8)+(hold>>8))%31){strm.msg='incorrect header check';state.mode=BAD;break;}if((hold&0x0f/*BITS(4)*/)!==Z_DEFLATED){strm.msg='unknown compression method';state.mode=BAD;break;}//--- DROPBITS(4) ---//
hold>>>=4;bits-=4;//---//
len=(hold&0x0f/*BITS(4)*/)+8;if(state.wbits===0){state.wbits=len;}if(len>15||len>state.wbits){strm.msg='invalid window size';state.mode=BAD;break;}// !!! pako patch. Force use `options.windowBits` if passed.
// Required to always use max window size by default.
state.dmax=1<<state.wbits;//state.dmax = 1 << len;
state.flags=0;/* indicate zlib header */ //Tracev((stderr, "inflate:   zlib header ok\n"));
strm.adler=state.check=1/*adler32(0L, Z_NULL, 0)*/;state.mode=hold&0x200?DICTID:TYPE;//=== INITBITS();
hold=0;bits=0;//===//
break;case FLAGS://=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.flags=hold;if((state.flags&0xff)!==Z_DEFLATED){strm.msg='unknown compression method';state.mode=BAD;break;}if(state.flags&0xe000){strm.msg='unknown header flags set';state.mode=BAD;break;}if(state.head){state.head.text=hold>>8&1;}if(state.flags&0x0200&&state.wrap&4){//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32_1(state.check,hbuf,2,0);//===//
}//=== INITBITS();
hold=0;bits=0;//===//
state.mode=TIME;/* falls through */case TIME://=== NEEDBITS(32); */
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.head){state.head.time=hold;}if(state.flags&0x0200&&state.wrap&4){//=== CRC4(state.check, hold)
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;hbuf[2]=hold>>>16&0xff;hbuf[3]=hold>>>24&0xff;state.check=crc32_1(state.check,hbuf,4,0);//===
}//=== INITBITS();
hold=0;bits=0;//===//
state.mode=OS;/* falls through */case OS://=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.head){state.head.xflags=hold&0xff;state.head.os=hold>>8;}if(state.flags&0x0200&&state.wrap&4){//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32_1(state.check,hbuf,2,0);//===//
}//=== INITBITS();
hold=0;bits=0;//===//
state.mode=EXLEN;/* falls through */case EXLEN:if(state.flags&0x0400){//=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.length=hold;if(state.head){state.head.extra_len=hold;}if(state.flags&0x0200&&state.wrap&4){//=== CRC2(state.check, hold);
hbuf[0]=hold&0xff;hbuf[1]=hold>>>8&0xff;state.check=crc32_1(state.check,hbuf,2,0);//===//
}//=== INITBITS();
hold=0;bits=0;//===//
}else if(state.head){state.head.extra=null/*Z_NULL*/;}state.mode=EXTRA;/* falls through */case EXTRA:if(state.flags&0x0400){copy=state.length;if(copy>have){copy=have;}if(copy){if(state.head){len=state.head.extra_len-state.length;if(!state.head.extra){// Use untyped array for more convenient processing later
state.head.extra=new Uint8Array(state.head.extra_len);}state.head.extra.set(input.subarray(next,// extra field is limited to 65536 bytes
// - no need for additional size check
next+copy),/*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/len);//zmemcpy(state.head.extra + len, next,
//        len + copy > state.head.extra_max ?
//        state.head.extra_max - len : copy);
}if(state.flags&0x0200&&state.wrap&4){state.check=crc32_1(state.check,input,copy,next);}have-=copy;next+=copy;state.length-=copy;}if(state.length){break inf_leave;}}state.length=0;state.mode=NAME;/* falls through */case NAME:if(state.flags&0x0800){if(have===0){break inf_leave;}copy=0;do{// TODO: 2 or 1 bytes?
len=input[next+copy++];/* use constant limit because in js we should not preallocate memory */if(state.head&&len&&state.length<65536/*state.head.name_max*/){state.head.name+=String.fromCharCode(len);}}while(len&&copy<have);if(state.flags&0x0200&&state.wrap&4){state.check=crc32_1(state.check,input,copy,next);}have-=copy;next+=copy;if(len){break inf_leave;}}else if(state.head){state.head.name=null;}state.length=0;state.mode=COMMENT;/* falls through */case COMMENT:if(state.flags&0x1000){if(have===0){break inf_leave;}copy=0;do{len=input[next+copy++];/* use constant limit because in js we should not preallocate memory */if(state.head&&len&&state.length<65536/*state.head.comm_max*/){state.head.comment+=String.fromCharCode(len);}}while(len&&copy<have);if(state.flags&0x0200&&state.wrap&4){state.check=crc32_1(state.check,input,copy,next);}have-=copy;next+=copy;if(len){break inf_leave;}}else if(state.head){state.head.comment=null;}state.mode=HCRC;/* falls through */case HCRC:if(state.flags&0x0200){//=== NEEDBITS(16); */
while(bits<16){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.wrap&4&&hold!==(state.check&0xffff)){strm.msg='header crc mismatch';state.mode=BAD;break;}//=== INITBITS();
hold=0;bits=0;//===//
}if(state.head){state.head.hcrc=state.flags>>9&1;state.head.done=true;}strm.adler=state.check=0;state.mode=TYPE;break;case DICTID://=== NEEDBITS(32); */
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
strm.adler=state.check=zswap32(hold);//=== INITBITS();
hold=0;bits=0;//===//
state.mode=DICT;/* falls through */case DICT:if(state.havedict===0){//--- RESTORE() ---
strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state.hold=hold;state.bits=bits;//---
return Z_NEED_DICT$1;}strm.adler=state.check=1/*adler32(0L, Z_NULL, 0)*/;state.mode=TYPE;/* falls through */case TYPE:if(flush===Z_BLOCK||flush===Z_TREES){break inf_leave;}/* falls through */case TYPEDO:if(state.last){//--- BYTEBITS() ---//
hold>>>=bits&7;bits-=bits&7;//---//
state.mode=CHECK;break;}//=== NEEDBITS(3); */
while(bits<3){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.last=hold&0x01/*BITS(1)*/;//--- DROPBITS(1) ---//
hold>>>=1;bits-=1;//---//
switch(hold&0x03/*BITS(2)*/){case 0:/* stored block */ //Tracev((stderr, "inflate:     stored block%s\n",
//        state.last ? " (last)" : ""));
state.mode=STORED;break;case 1:/* fixed block */fixedtables(state);//Tracev((stderr, "inflate:     fixed codes block%s\n",
//        state.last ? " (last)" : ""));
state.mode=LEN_;/* decode codes */if(flush===Z_TREES){//--- DROPBITS(2) ---//
hold>>>=2;bits-=2;//---//
break inf_leave;}break;case 2:/* dynamic block */ //Tracev((stderr, "inflate:     dynamic codes block%s\n",
//        state.last ? " (last)" : ""));
state.mode=TABLE;break;case 3:strm.msg='invalid block type';state.mode=BAD;}//--- DROPBITS(2) ---//
hold>>>=2;bits-=2;//---//
break;case STORED://--- BYTEBITS() ---// /* go to byte boundary */
hold>>>=bits&7;bits-=bits&7;//---//
//=== NEEDBITS(32); */
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if((hold&0xffff)!==(hold>>>16^0xffff)){strm.msg='invalid stored block lengths';state.mode=BAD;break;}state.length=hold&0xffff;//Tracev((stderr, "inflate:       stored length %u\n",
//        state.length));
//=== INITBITS();
hold=0;bits=0;//===//
state.mode=COPY_;if(flush===Z_TREES){break inf_leave;}/* falls through */case COPY_:state.mode=COPY;/* falls through */case COPY:copy=state.length;if(copy){if(copy>have){copy=have;}if(copy>left){copy=left;}if(copy===0){break inf_leave;}//--- zmemcpy(put, next, copy); ---
output.set(input.subarray(next,next+copy),put);//---//
have-=copy;next+=copy;left-=copy;put+=copy;state.length-=copy;break;}//Tracev((stderr, "inflate:       stored end\n"));
state.mode=TYPE;break;case TABLE://=== NEEDBITS(14); */
while(bits<14){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.nlen=(hold&0x1f/*BITS(5)*/)+257;//--- DROPBITS(5) ---//
hold>>>=5;bits-=5;//---//
state.ndist=(hold&0x1f/*BITS(5)*/)+1;//--- DROPBITS(5) ---//
hold>>>=5;bits-=5;//---//
state.ncode=(hold&0x0f/*BITS(4)*/)+4;//--- DROPBITS(4) ---//
hold>>>=4;bits-=4;//---//
//#ifndef PKZIP_BUG_WORKAROUND
if(state.nlen>286||state.ndist>30){strm.msg='too many length or distance symbols';state.mode=BAD;break;}//#endif
//Tracev((stderr, "inflate:       table sizes ok\n"));
state.have=0;state.mode=LENLENS;/* falls through */case LENLENS:while(state.have<state.ncode){//=== NEEDBITS(3);
while(bits<3){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.lens[order[state.have++]]=hold&0x07;//BITS(3);
//--- DROPBITS(3) ---//
hold>>>=3;bits-=3;//---//
}while(state.have<19){state.lens[order[state.have++]]=0;}// We have separate tables & no pointers. 2 commented lines below not needed.
//state.next = state.codes;
//state.lencode = state.next;
// Switch to use dynamic table
state.lencode=state.lendyn;state.lenbits=7;opts={bits:state.lenbits};ret=inftrees(CODES,state.lens,0,19,state.lencode,0,state.work,opts);state.lenbits=opts.bits;if(ret){strm.msg='invalid code lengths set';state.mode=BAD;break;}//Tracev((stderr, "inflate:       code lengths ok\n"));
state.have=0;state.mode=CODELENS;/* falls through */case CODELENS:while(state.have<state.nlen+state.ndist){for(;;){here=state.lencode[hold&(1<<state.lenbits)-1];/*BITS(state.lenbits)*/here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}if(here_val<16){//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
state.lens[state.have++]=here_val;}else{if(here_val===16){//=== NEEDBITS(here.bits + 2);
n=here_bits+2;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
if(state.have===0){strm.msg='invalid bit length repeat';state.mode=BAD;break;}len=state.lens[state.have-1];copy=3+(hold&0x03);//BITS(2);
//--- DROPBITS(2) ---//
hold>>>=2;bits-=2;//---//
}else if(here_val===17){//=== NEEDBITS(here.bits + 3);
n=here_bits+3;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
len=0;copy=3+(hold&0x07);//BITS(3);
//--- DROPBITS(3) ---//
hold>>>=3;bits-=3;//---//
}else{//=== NEEDBITS(here.bits + 7);
n=here_bits+7;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
len=0;copy=11+(hold&0x7f);//BITS(7);
//--- DROPBITS(7) ---//
hold>>>=7;bits-=7;//---//
}if(state.have+copy>state.nlen+state.ndist){strm.msg='invalid bit length repeat';state.mode=BAD;break;}while(copy--){state.lens[state.have++]=len;}}}/* handle error breaks in while */if(state.mode===BAD){break;}/* check for end-of-block code (better have one) */if(state.lens[256]===0){strm.msg='invalid code -- missing end-of-block';state.mode=BAD;break;}/* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */state.lenbits=9;opts={bits:state.lenbits};ret=inftrees(LENS,state.lens,0,state.nlen,state.lencode,0,state.work,opts);// We have separate tables & no pointers. 2 commented lines below not needed.
// state.next_index = opts.table_index;
state.lenbits=opts.bits;// state.lencode = state.next;
if(ret){strm.msg='invalid literal/lengths set';state.mode=BAD;break;}state.distbits=6;//state.distcode.copy(state.codes);
// Switch to use dynamic table
state.distcode=state.distdyn;opts={bits:state.distbits};ret=inftrees(DISTS,state.lens,state.nlen,state.ndist,state.distcode,0,state.work,opts);// We have separate tables & no pointers. 2 commented lines below not needed.
// state.next_index = opts.table_index;
state.distbits=opts.bits;// state.distcode = state.next;
if(ret){strm.msg='invalid distances set';state.mode=BAD;break;}//Tracev((stderr, 'inflate:       codes ok\n'));
state.mode=LEN_;if(flush===Z_TREES){break inf_leave;}/* falls through */case LEN_:state.mode=LEN;/* falls through */case LEN:if(have>=6&&left>=258){//--- RESTORE() ---
strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state.hold=hold;state.bits=bits;//---
inffast(strm,_out);//--- LOAD() ---
put=strm.next_out;output=strm.output;left=strm.avail_out;next=strm.next_in;input=strm.input;have=strm.avail_in;hold=state.hold;bits=state.bits;//---
if(state.mode===TYPE){state.back=-1;}break;}state.back=0;for(;;){here=state.lencode[hold&(1<<state.lenbits)-1];/*BITS(state.lenbits)*/here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}if(here_op&&(here_op&0xf0)===0){last_bits=here_bits;last_op=here_op;last_val=here_val;for(;;){here=state.lencode[last_val+((hold&(1<<last_bits+last_op)-1/*BITS(last.bits + last.op)*/)>>last_bits)];here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(last_bits+here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}//--- DROPBITS(last.bits) ---//
hold>>>=last_bits;bits-=last_bits;//---//
state.back+=last_bits;}//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
state.back+=here_bits;state.length=here_val;if(here_op===0){//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
//        "inflate:         literal '%c'\n" :
//        "inflate:         literal 0x%02x\n", here.val));
state.mode=LIT;break;}if(here_op&32){//Tracevv((stderr, "inflate:         end of block\n"));
state.back=-1;state.mode=TYPE;break;}if(here_op&64){strm.msg='invalid literal/length code';state.mode=BAD;break;}state.extra=here_op&15;state.mode=LENEXT;/* falls through */case LENEXT:if(state.extra){//=== NEEDBITS(state.extra);
n=state.extra;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.length+=hold&(1<<state.extra)-1/*BITS(state.extra)*/;//--- DROPBITS(state.extra) ---//
hold>>>=state.extra;bits-=state.extra;//---//
state.back+=state.extra;}//Tracevv((stderr, "inflate:         length %u\n", state.length));
state.was=state.length;state.mode=DIST;/* falls through */case DIST:for(;;){here=state.distcode[hold&(1<<state.distbits)-1];/*BITS(state.distbits)*/here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}if((here_op&0xf0)===0){last_bits=here_bits;last_op=here_op;last_val=here_val;for(;;){here=state.distcode[last_val+((hold&(1<<last_bits+last_op)-1/*BITS(last.bits + last.op)*/)>>last_bits)];here_bits=here>>>24;here_op=here>>>16&0xff;here_val=here&0xffff;if(last_bits+here_bits<=bits){break;}//--- PULLBYTE() ---//
if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;//---//
}//--- DROPBITS(last.bits) ---//
hold>>>=last_bits;bits-=last_bits;//---//
state.back+=last_bits;}//--- DROPBITS(here.bits) ---//
hold>>>=here_bits;bits-=here_bits;//---//
state.back+=here_bits;if(here_op&64){strm.msg='invalid distance code';state.mode=BAD;break;}state.offset=here_val;state.extra=here_op&15;state.mode=DISTEXT;/* falls through */case DISTEXT:if(state.extra){//=== NEEDBITS(state.extra);
n=state.extra;while(bits<n){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
state.offset+=hold&(1<<state.extra)-1/*BITS(state.extra)*/;//--- DROPBITS(state.extra) ---//
hold>>>=state.extra;bits-=state.extra;//---//
state.back+=state.extra;}//#ifdef INFLATE_STRICT
if(state.offset>state.dmax){strm.msg='invalid distance too far back';state.mode=BAD;break;}//#endif
//Tracevv((stderr, "inflate:         distance %u\n", state.offset));
state.mode=MATCH;/* falls through */case MATCH:if(left===0){break inf_leave;}copy=_out-left;if(state.offset>copy){/* copy from window */copy=state.offset-copy;if(copy>state.whave){if(state.sane){strm.msg='invalid distance too far back';state.mode=BAD;break;}// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
}if(copy>state.wnext){copy-=state.wnext;from=state.wsize-copy;}else{from=state.wnext-copy;}if(copy>state.length){copy=state.length;}from_source=state.window;}else{/* copy from output */from_source=output;from=put-state.offset;copy=state.length;}if(copy>left){copy=left;}left-=copy;state.length-=copy;do{output[put++]=from_source[from++];}while(--copy);if(state.length===0){state.mode=LEN;}break;case LIT:if(left===0){break inf_leave;}output[put++]=state.length;left--;state.mode=LEN;break;case CHECK:if(state.wrap){//=== NEEDBITS(32);
while(bits<32){if(have===0){break inf_leave;}have--;// Use '|' instead of '+' to make sure that result is signed
hold|=input[next++]<<bits;bits+=8;}//===//
_out-=left;strm.total_out+=_out;state.total+=_out;if(state.wrap&4&&_out){strm.adler=state.check=/*UPDATE_CHECK(state.check, put - _out, _out);*/state.flags?crc32_1(state.check,output,_out,put-_out):adler32_1(state.check,output,_out,put-_out);}_out=left;// NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
if(state.wrap&4&&(state.flags?hold:zswap32(hold))!==state.check){strm.msg='incorrect data check';state.mode=BAD;break;}//=== INITBITS();
hold=0;bits=0;//===//
//Tracev((stderr, "inflate:   check matches trailer\n"));
}state.mode=LENGTH;/* falls through */case LENGTH:if(state.wrap&&state.flags){//=== NEEDBITS(32);
while(bits<32){if(have===0){break inf_leave;}have--;hold+=input[next++]<<bits;bits+=8;}//===//
if(state.wrap&4&&hold!==(state.total&0xffffffff)){strm.msg='incorrect length check';state.mode=BAD;break;}//=== INITBITS();
hold=0;bits=0;//===//
//Tracev((stderr, "inflate:   length matches trailer\n"));
}state.mode=DONE;/* falls through */case DONE:ret=Z_STREAM_END$1;break inf_leave;case BAD:ret=Z_DATA_ERROR$1;break inf_leave;case MEM:return Z_MEM_ERROR$1;case SYNC:/* falls through */default:return Z_STREAM_ERROR$1;}}// inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
/*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */ //--- RESTORE() ---
strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state.hold=hold;state.bits=bits;//---
if(state.wsize||_out!==strm.avail_out&&state.mode<BAD&&(state.mode<CHECK||flush!==Z_FINISH$1)){if(updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out));}_in-=strm.avail_in;_out-=strm.avail_out;strm.total_in+=_in;strm.total_out+=_out;state.total+=_out;if(state.wrap&4&&_out){strm.adler=state.check=/*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/state.flags?crc32_1(state.check,output,_out,strm.next_out-_out):adler32_1(state.check,output,_out,strm.next_out-_out);}strm.data_type=state.bits+(state.last?64:0)+(state.mode===TYPE?128:0)+(state.mode===LEN_||state.mode===COPY_?256:0);if((_in===0&&_out===0||flush===Z_FINISH$1)&&ret===Z_OK$1){ret=Z_BUF_ERROR;}return ret;};const inflateEnd=strm=>{if(inflateStateCheck(strm)){return Z_STREAM_ERROR$1;}let state=strm.state;if(state.window){state.window=null;}strm.state=null;return Z_OK$1;};const inflateGetHeader=(strm,head)=>{/* check state */if(inflateStateCheck(strm)){return Z_STREAM_ERROR$1;}const state=strm.state;if((state.wrap&2)===0){return Z_STREAM_ERROR$1;}/* save header structure */state.head=head;head.done=false;return Z_OK$1;};const inflateSetDictionary=(strm,dictionary)=>{const dictLength=dictionary.length;let state;let dictid;let ret;/* check state */if(inflateStateCheck(strm)){return Z_STREAM_ERROR$1;}state=strm.state;if(state.wrap!==0&&state.mode!==DICT){return Z_STREAM_ERROR$1;}/* check for correct dictionary identifier */if(state.mode===DICT){dictid=1;/* adler32(0, null, 0)*/ /* dictid = adler32(dictid, dictionary, dictLength); */dictid=adler32_1(dictid,dictionary,dictLength,0);if(dictid!==state.check){return Z_DATA_ERROR$1;}}/* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */ret=updatewindow(strm,dictionary,dictLength,dictLength);if(ret){state.mode=MEM;return Z_MEM_ERROR$1;}state.havedict=1;// Tracev((stderr, "inflate:   dictionary set\n"));
return Z_OK$1;};var inflateReset_1=inflateReset;var inflateReset2_1=inflateReset2;var inflateResetKeep_1=inflateResetKeep;var inflateInit_1=inflateInit;var inflateInit2_1=inflateInit2;var inflate_2$1=inflate$2;var inflateEnd_1=inflateEnd;var inflateGetHeader_1=inflateGetHeader;var inflateSetDictionary_1=inflateSetDictionary;var inflateInfo='pako inflate (from Nodeca project)';/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/var inflate_1$2={inflateReset:inflateReset_1,inflateReset2:inflateReset2_1,inflateResetKeep:inflateResetKeep_1,inflateInit:inflateInit_1,inflateInit2:inflateInit2_1,inflate:inflate_2$1,inflateEnd:inflateEnd_1,inflateGetHeader:inflateGetHeader_1,inflateSetDictionary:inflateSetDictionary_1,inflateInfo:inflateInfo};// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function GZheader(){/* true if compressed data believed to be text */this.text=0;/* modification time */this.time=0;/* extra flags (not used when writing a gzip file) */this.xflags=0;/* operating system */this.os=0;/* pointer to extra field or Z_NULL if none */this.extra=null;/* extra field length (valid if extra != Z_NULL) */this.extra_len=0;// Actually, we don't need it in JS,
// but leave for few code modifications
//
// Setup limits is not necessary because in js we should not preallocate memory
// for inflate use constant limit in 65536 bytes
//
/* space at extra (only when reading header) */ // this.extra_max  = 0;
/* pointer to zero-terminated file name or Z_NULL */this.name='';/* space at name (only when reading header) */ // this.name_max   = 0;
/* pointer to zero-terminated comment or Z_NULL */this.comment='';/* space at comment (only when reading header) */ // this.comm_max   = 0;
/* true if there was or will be a header crc */this.hcrc=0;/* true when done reading gzip header (not used when writing a gzip file) */this.done=false;}var gzheader=GZheader;const toString=Object.prototype.toString;/* Public constants ==========================================================*/ /* ===========================================================================*/const{Z_NO_FLUSH,Z_FINISH,Z_OK,Z_STREAM_END,Z_NEED_DICT,Z_STREAM_ERROR,Z_DATA_ERROR,Z_MEM_ERROR}=constants$2;/* ===========================================================================*/ /**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/ /* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/ /**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/ /**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/ /**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/function Inflate$1(options){this.options=common.assign({chunkSize:1024*64,windowBits:15,to:''},options||{});const opt=this.options;// Force window size for `raw` data, if not set directly,
// because we have no header for autodetect.
if(opt.raw&&opt.windowBits>=0&&opt.windowBits<16){opt.windowBits=-opt.windowBits;if(opt.windowBits===0){opt.windowBits=-15;}}// If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
if(opt.windowBits>=0&&opt.windowBits<16&&!(options&&options.windowBits)){opt.windowBits+=32;}// Gzip header has no info about windows size, we can do autodetect only
// for deflate. So, if window size not set, force it to max when gzip possible
if(opt.windowBits>15&&opt.windowBits<48){// bit 3 (16) -> gzipped data
// bit 4 (32) -> autodetect gzip/deflate
if((opt.windowBits&15)===0){opt.windowBits|=15;}}this.err=0;// error code, if happens (0 = Z_OK)
this.msg='';// error message
this.ended=false;// used to avoid multiple onEnd() calls
this.chunks=[];// chunks of compressed data
this.strm=new zstream();this.strm.avail_out=0;let status=inflate_1$2.inflateInit2(this.strm,opt.windowBits);if(status!==Z_OK){throw new Error(messages[status]);}this.header=new gzheader();inflate_1$2.inflateGetHeader(this.strm,this.header);// Setup dictionary
if(opt.dictionary){// Convert data if needed
if(typeof opt.dictionary==='string'){opt.dictionary=strings.string2buf(opt.dictionary);}else if(toString.call(opt.dictionary)==='[object ArrayBuffer]'){opt.dictionary=new Uint8Array(opt.dictionary);}if(opt.raw){//In raw mode we need to set the dictionary early
status=inflate_1$2.inflateSetDictionary(this.strm,opt.dictionary);if(status!==Z_OK){throw new Error(messages[status]);}}}}/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/Inflate$1.prototype.push=function(data,flush_mode){const strm=this.strm;const chunkSize=this.options.chunkSize;const dictionary=this.options.dictionary;let status,_flush_mode,last_avail_out;if(this.ended)return false;if(flush_mode===~~flush_mode)_flush_mode=flush_mode;else _flush_mode=flush_mode===true?Z_FINISH:Z_NO_FLUSH;// Convert data if needed
if(toString.call(data)==='[object ArrayBuffer]'){strm.input=new Uint8Array(data);}else{strm.input=data;}strm.next_in=0;strm.avail_in=strm.input.length;for(;;){if(strm.avail_out===0){strm.output=new Uint8Array(chunkSize);strm.next_out=0;strm.avail_out=chunkSize;}status=inflate_1$2.inflate(strm,_flush_mode);if(status===Z_NEED_DICT&&dictionary){status=inflate_1$2.inflateSetDictionary(strm,dictionary);if(status===Z_OK){status=inflate_1$2.inflate(strm,_flush_mode);}else if(status===Z_DATA_ERROR){// Replace code with more verbose
status=Z_NEED_DICT;}}// Skip snyc markers if more data follows and not raw mode
while(strm.avail_in>0&&status===Z_STREAM_END&&strm.state.wrap>0&&data[strm.next_in]!==0){inflate_1$2.inflateReset(strm);status=inflate_1$2.inflate(strm,_flush_mode);}switch(status){case Z_STREAM_ERROR:case Z_DATA_ERROR:case Z_NEED_DICT:case Z_MEM_ERROR:this.onEnd(status);this.ended=true;return false;}// Remember real `avail_out` value, because we may patch out buffer content
// to align utf8 strings boundaries.
last_avail_out=strm.avail_out;if(strm.next_out){if(strm.avail_out===0||status===Z_STREAM_END){if(this.options.to==='string'){let next_out_utf8=strings.utf8border(strm.output,strm.next_out);let tail=strm.next_out-next_out_utf8;let utf8str=strings.buf2string(strm.output,next_out_utf8);// move tail & realign counters
strm.next_out=tail;strm.avail_out=chunkSize-tail;if(tail)strm.output.set(strm.output.subarray(next_out_utf8,next_out_utf8+tail),0);this.onData(utf8str);}else{this.onData(strm.output.length===strm.next_out?strm.output:strm.output.subarray(0,strm.next_out));}}}// Must repeat iteration if out buffer is full
if(status===Z_OK&&last_avail_out===0)continue;// Finalize if end of stream reached.
if(status===Z_STREAM_END){status=inflate_1$2.inflateEnd(this.strm);this.onEnd(status);this.ended=true;return true;}if(strm.avail_in===0)break;}return true;};/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/Inflate$1.prototype.onData=function(chunk){this.chunks.push(chunk);};/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/Inflate$1.prototype.onEnd=function(status){// On success - join
if(status===Z_OK){if(this.options.to==='string'){this.result=this.chunks.join('');}else{this.result=common.flattenChunks(this.chunks);}}this.chunks=[];this.err=status;this.msg=this.strm.msg;};/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/function inflate$1(input,options){const inflator=new Inflate$1(options);inflator.push(input);// That will never happens, if you don't cheat with options :)
if(inflator.err)throw inflator.msg||messages[inflator.err];return inflator.result;}/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/function inflateRaw$1(input,options){options=options||{};options.raw=true;return inflate$1(input,options);}/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/var Inflate_1$1=Inflate$1;var inflate_2=inflate$1;var inflateRaw_1$1=inflateRaw$1;var ungzip$1=inflate$1;var constants=constants$2;var inflate_1$1={Inflate:Inflate_1$1,inflate:inflate_2,inflateRaw:inflateRaw_1$1,ungzip:ungzip$1,constants:constants};const{Deflate,deflate,deflateRaw,gzip}=deflate_1$1;const{Inflate,inflate,inflateRaw,ungzip}=inflate_1$1;var Deflate_1=Deflate;var deflate_1=deflate;var deflateRaw_1=deflateRaw;var gzip_1=gzip;var Inflate_1=Inflate;var inflate_1=inflate;var inflateRaw_1=inflateRaw;var ungzip_1=ungzip;var constants_1=constants$2;var pako={Deflate:Deflate_1,deflate:deflate_1,deflateRaw:deflateRaw_1,gzip:gzip_1,Inflate:Inflate_1,inflate:inflate_1,inflateRaw:inflateRaw_1,ungzip:ungzip_1,constants:constants_1};function _basicAssign(target,source){var prop;for(prop in source){if(Object.prototype.hasOwnProperty.call(source,prop)){target[prop]=source[prop];}}return target;}function _getProperty(source,prop){return _isArray(source)?source[Number(prop)]:source[prop];}function _getByPath(source,path){if(!source){return undefined;}var prop=path.shift();var value=_getProperty(source,prop);if(path.length&&(_isArray(value)||_isRecord(value))){return _getByPath(value,path);}return value;}function _isArray(value){return Array.isArray(value);}function _isRecord(value){return value&&typeof value==='object';}function _setProperty(target,prop,value){if(_isArray(target)){target[Number(prop)]=value;return;}if(_isRecord(target)){target[prop]=value;return;}throw new Error('shallowClone: target must be an object or an array');}function _shallowClone(source){if(_isArray(source))return source.slice(0);if(_isRecord(source))return _basicAssign({},source);throw new Error('shallowClone: source must be an object or an array');}function get(source,key){if(!key){return source;}return _getByPath(source,key.split('/'));}function set(source,key,value){if(!key){if(_isArray(value)||_isRecord(value)){return value;}throw new Error('set: cannot replace value with a non-record value');}if(get(source,key)===value){return source;}var target=_shallowClone(source);var path=key.split('/');var currSource=source;var currTarget=target;while(path.length){var prop=path.shift();if(path.length){var nextSource=_getProperty(currSource,prop);if(nextSource===undefined){nextSource={};_setProperty(currSource,prop,nextSource);}if(!_isArray(nextSource)&&!_isRecord(nextSource)){throw new Error("set: path is not targeting an object nor an array: \""+key+"\"");}currSource=nextSource;var nextTarget=_shallowClone(currSource);_setProperty(currTarget,prop,nextTarget);currTarget=nextTarget;}else{_setProperty(currTarget,prop,value);}}return target;}const EMPTY_ARRAY$1=[];const EMPTY_RECORD={};const DEFAULT_VIEWPORT_VALUE="auto";const DEFAULT_ZOOM_VALUE=1;const VIEWPORT_OPTIONS=[{name:"auto",title:"Full",rect:{width:"auto"}},{name:"768",title:"768px",rect:{width:768}},{name:"375",title:"375px",rect:{width:375,height:667}},{name:"320",title:"320px",rect:{width:320,height:568}}];const ZOOM_OPTIONS=[{value:0.5,title:"50%"},{value:0.75,title:"75%"},{value:1,title:"100%"},{value:1.5,title:"150%"},{value:2,title:"200%"},{value:3,title:"300%"}];function createPubsub(){const subscribers=/* @__PURE__ */new Set();return{publish(msg){for(const subscriber of subscribers){subscriber(msg);}},subscribe(subscriber){subscribers.add(subscriber);return()=>{subscribers.delete(subscriber);};}};}const qs={parse(str){const params=new URLSearchParams("?"+str);const q={};params.forEach((value,key)=>{q[key]=value;});return q;},stringify(q){return Object.entries(q).map(_ref=>{let[key,value]=_ref;return"".concat(key,"=").concat(value);}).join("&");}};function resolveLocation(scopes,path){const segments=path.split("/").slice(1).filter(Boolean);const p=segments.join("/");if(segments.length===0){return{scope:null,story:null};}for(const scope of scopes){for(const story of scope.stories){const storyPath=[scope.name,story.name].filter(Boolean).join("/");if(p===storyPath){return{scope,story};}}}return{scope:null,story:null};}function buildFrameUrl(params){const{baseUrl="/frame/",path,payload,scheme,viewport,zoom}=params;return[baseUrl,"?path=".concat(encodeURIComponent(path)),"&scheme=".concat(scheme),"&viewport=".concat(viewport),"&zoom=".concat(zoom),...Object.entries(payload).map(_ref2=>{let[key,value]=_ref2;return"&".concat(key,"=").concat(value);})].join("");}const PropsContext=createContext(null);function useProps(){const props=useContext(PropsContext);if(!props){throw new Error("Props: missing context value");}return props;}const BooleanProp=memo(function BooleanProp2(props){const{schema,value}=props;const{setPropValue}=useProps();return/* @__PURE__ */jsxs(Flex,{as:"label",padding:3,children:[/* @__PURE__ */jsx(Box,{marginRight:2,style:{lineHeight:0},children:/* @__PURE__ */jsx(Checkbox,{checked:value||false,onChange:event=>setPropValue(schema.name,event.currentTarget.checked)})}),/* @__PURE__ */jsx(Box,{paddingY:1,children:/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",children:schema.name})})]});});const NumberProp=memo(function NumberProp2(props){const{schema,value=""}=props;const{setPropValue}=useProps();return/* @__PURE__ */jsxs(Box,{padding:3,children:[/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",children:schema.name}),/* @__PURE__ */jsx(Box,{marginTop:2,children:/* @__PURE__ */jsx(TextInput,{fontSize:[2,2,1],onChange:event=>setPropValue(schema.name,Number(event.currentTarget.value)),padding:2,value})})]});});const SelectProp=memo(function SelectProp2(props){const{schema,value:valueProp}=props;const{setPropValue}=useProps();const value=useMemo(()=>{const entries=Object.entries(schema.options);for(const[k,v]of entries){if(v===valueProp){return k;}}return"";},[schema,valueProp]);return/* @__PURE__ */jsxs(Box,{padding:3,children:[/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",children:schema.name}),/* @__PURE__ */jsx(Box,{marginTop:2,children:/* @__PURE__ */jsx(Select,{fontSize:[2,2,1],onChange:event=>{const optionKey=event.currentTarget.value;const optionValue=schema.options[optionKey];setPropValue(schema.name,optionValue);},padding:2,radius:2,value:String(value||""),children:Object.entries(schema.options).map(_ref3=>{let[key]=_ref3;return/* @__PURE__ */jsx("option",{value:key,children:key},key);})})})]});});const StringProp=memo(function StringProp2(props){const{schema,value}=props;const{setPropValue}=useProps();return/* @__PURE__ */jsxs(Box,{padding:3,children:[/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",children:schema.name}),/* @__PURE__ */jsx(Box,{marginTop:2,children:/* @__PURE__ */jsx(TextInput,{fontSize:[2,2,1],onChange:event=>setPropValue(schema.name,event.currentTarget.value),padding:2,value:value||""})})]});});const TextProp=memo(function TextProp2(props){const{schema,value}=props;const{setPropValue}=useProps();return/* @__PURE__ */jsxs(Box,{padding:3,children:[/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",children:schema.name}),/* @__PURE__ */jsx(Box,{marginTop:2,children:/* @__PURE__ */jsx(TextArea,{fontSize:[2,2,1],onChange:event=>setPropValue(schema.name,event.currentTarget.value),rows:4,value:value||""})})]});});function Prop(props){const{schema,value}=props;if(schema.type==="boolean"){return/* @__PURE__ */jsx(BooleanProp,{schema,value});}if(schema.type==="number"){return/* @__PURE__ */jsx(NumberProp,{schema,value});}if(schema.type==="select"){return/* @__PURE__ */jsx(SelectProp,{schema,value});}if(schema.type==="string"){return/* @__PURE__ */jsx(StringProp,{schema,value});}if(schema.type==="text"){return/* @__PURE__ */jsx(TextProp,{schema,value});}return/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsxs(Text,{size:1,weight:"semibold",children:["Unknown Prop type:"," ",/* @__PURE__ */jsxs("code",{children:[schema.name,": ",schema.type]})]})});}const PropsInspector=memo(function PropsInspector2(){const{schemas,value}=useProps();return/* @__PURE__ */jsxs(Box,{padding:2,children:[schemas.length===0&&/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{muted:true,size:[2,2,1],children:"No properties"})}),schemas.length>0&&schemas.map((schema,schemaIndex)=>/* @__PURE__ */jsx(Prop,{schema,value:value[schema.name]===void 0?schema.defaultValue:value[schema.name]},schemaIndex))]});});const isEqual=isEqual$2;const WorkshopContext=createContext(null);function useWorkshop(){const workshop=useContext(WorkshopContext);if(!workshop){throw new Error("Workshop: missing context value");}return workshop;}const btoa$1=typeof window==="undefined"?str=>Buffer.from(str,"binary").toString("base64"):window.btoa;const atob$1=typeof window==="undefined"?str=>Buffer.from(str,"base64").toString("binary"):window.atob;function uint8ArrayToBase64(uint8array){let str="";for(let i=0,{length}=uint8array;i<length;i++){str+=String.fromCharCode(uint8array[i]);}return btoa$1(str);}function base64ToUint8Array(base64){const binStr=atob$1(base64);const len=binStr.length;const bytes=new Uint8Array(len);for(let i=0;i<len;i++){bytes[i]=binStr.charCodeAt(i);}return bytes;}function decode(input){if(input.length===0)return"";const arr=base64ToUint8Array(input);return pako.inflate(arr,{to:"string"});}function encode(input){if(input.length===0)return"";const arr=pako.deflate(input);return uint8ArrayToBase64(arr);}function encodeValue(val){return encode(JSON.stringify(val));}function decodeValue(val){try{return JSON.parse(decode(val));}catch(_){return{};}}function propsReducer(state,msg){if(msg.type==="workshop/props/setValue"){return{...state,value:msg.value};}if(msg.type==="workshop/props/registerProp"){return{...state,schemas:state.schemas.concat([msg.schema])};}if(msg.type==="workshop/props/unregisterProp"){const value={...state.value};delete value[msg.name];return{...state,schemas:state.schemas.filter(s=>s.name!==msg.name),value};}if(msg.type==="workshop/props/setPropValue"){return{...state,value:{...state.value,[msg.name]:msg.value}};}return state;}const PropsProvider=memo(function PropsProvider2(props){const{children}=props;const{channel,broadcast,payload}=useWorkshop();const encodedValue=payload.value;const encodedValueRef=useRef(encodedValue);const[{schemas,value},setState]=useState({schemas:[],value:decodeValue(String(encodedValue))||{}});const registerProp=useCallback(schema=>{broadcast({type:"workshop/props/registerProp",schema});},[broadcast]);const unregisterProp=useCallback(name=>{broadcast({type:"workshop/props/unregisterProp",name});},[broadcast]);const setPropValue=useCallback((name,value2)=>{broadcast({type:"workshop/props/setPropValue",name,value:value2});},[broadcast]);const ctx=useMemo(()=>({registerProp,schemas,setPropValue,unregisterProp,value}),[registerProp,schemas,setPropValue,unregisterProp,value]);useEffect(()=>channel.subscribe(msg=>{setState(prevState=>{const nextState=propsReducer(prevState,msg);if(isEqual(prevState,nextState)){return prevState;}return nextState;});}),[channel]);useEffect(()=>{const nextEncodedValue=encodeValue(value);if(encodedValueRef.current!==nextEncodedValue){encodedValueRef.current=nextEncodedValue;broadcast({type:"workshop/setPayloadValue",key:"value",value:nextEncodedValue});}},[broadcast,value]);useEffect(()=>{if(encodedValueRef.current===encodedValue){return;}encodedValueRef.current=encodedValue;setState(prevState=>({...prevState,value:decodeValue(String(encodedValue))||{}}));},[encodedValue]);return/* @__PURE__ */jsx(PropsContext.Provider,{value:ctx,children});});function propsPlugin(){return{name:"props",title:"Properties",inspector:PropsInspector,provider:PropsProvider};}const WorkshopProvider=memo(function WorkshopProvider2(props){const{broadcast,children,channel,config,frameReady,origin,path,payload,scheme,viewport="auto",zoom=1}=props;const{plugins:pluginsProp=EMPTY_ARRAY$1,collections=EMPTY_ARRAY$1,frameUrl="/frame/",scopes,title="Workshop"}=config;if(!payload){throw new Error("missing `payload` property");}const plugins=useMemo(()=>[propsPlugin(),...pluginsProp],[pluginsProp]);const{scope,story}=useMemo(()=>resolveLocation(scopes,path),[path,scopes]);const workshop=useMemo(()=>({plugins,broadcast,channel,collections,frameReady,frameUrl,origin,path,payload,scheme,scope,scopes,story,title,viewport,zoom}),[plugins,broadcast,channel,collections,frameReady,frameUrl,origin,path,payload,scheme,scope,scopes,story,title,viewport,zoom]);let wrappedChildren=children;for(const plugin of plugins){if(plugin.provider){wrappedChildren=createElement(plugin.provider,{options:plugin.options||EMPTY_RECORD},wrappedChildren);}}return/* @__PURE__ */jsx(WorkshopContext.Provider,{value:workshop,children:wrappedChildren});});function workshopReducer(state,msg){if(msg.type==="workshop/frameReady"){return{...state,frameReady:true};}if(msg.type==="workshop/setState"){if(isEqual(state,msg.value)){return state;}return msg.value;}if(msg.type==="workshop/setZoom"){if(state.zoom===msg.value)return state;return{...state,zoom:msg.value};}if(msg.type==="workshop/setViewport"){if(state.viewport===msg.value)return state;return{...state,viewport:msg.value};}if(msg.type==="workshop/toggleScheme"){return{...state,scheme:state.scheme==="light"?"dark":"light"};}if(msg.type==="workshop/setScheme"){if(state.scheme===msg.value)return state;return{...state,scheme:msg.value};}if(msg.type==="workshop/setPath"){if(state.path===msg.value)return state;return{...state,path:msg.value};}if(msg.type==="workshop/setPayload"){if(isEqual(state.payload,msg.value)){return state;}return{...state,payload:msg.value};}if(msg.type==="workshop/setPayloadValue"){const payload={...state.payload,[msg.key]:msg.value};if(isEqual(state.payload,payload)){return state;}return{...state,payload};}return state;}const ROOT_PATH=(()=>{try{return process.env.ROOT_PATH;}catch(_){return void 0;}})();const RE_URL=/http:\/\/([^:/\s]+)(:[0-9]+)?/g;const RE_VITE_FS_PREFIX=/\/@fs\//g;const RE_VITE_FS_SUFFIX=/\?([a-z]{1})=([0-9]+)/g;function formatStack(stack){let ret=decodeURIComponent(stack);ret=stack.replace(RE_URL,"").replace(RE_VITE_FS_PREFIX,"/").replace(RE_VITE_FS_SUFFIX,"");if(ROOT_PATH)return replaceRootPath(ret,ROOT_PATH+"/");return ret;}function replaceRootPath(str,rootPath){const re=new RegExp(rootPath.replace(/\//g,"\\/"),"g");return str.replace(re,"");}const WorkshopCanvas$1=memo(function WorkshopCanvas2(){const{story}=useWorkshop();const[state,setState]=useState({error:null,errorInfo:null});const catchError=useCallback(_ref4=>{let{error,info:errorInfo}=_ref4;setState({error,errorInfo});},[]);const handleRetry=useCallback(()=>{setState({error:null,errorInfo:null});},[]);if(!story){return/* @__PURE__ */jsx(Fragment,{});}if(state.error){return/* @__PURE__ */jsx(Card,{as:"main",height:"fill",overflow:"auto",tone:"critical",children:/* @__PURE__ */jsx(ErrorScreen,{error:state.error,errorInfo:state.errorInfo,onRetry:handleRetry})});}return/* @__PURE__ */jsxs(Fragment,{children:[/* @__PURE__ */jsx("h1",{hidden:true,children:story.title}),/* @__PURE__ */jsx(Suspense,{fallback:/* @__PURE__ */jsx(LoadingScreen,{story}),children:/* @__PURE__ */jsx(Card,{as:"main",height:"fill",children:/* @__PURE__ */jsx(ErrorBoundary,{onCatch:catchError,children:createElement(story.component)})})})]});});const LoadingScreen=memo(function LoadingScreen2(props){const{story}=props;return/* @__PURE__ */jsxs(Fragment,{children:[/* @__PURE__ */jsxs("h1",{hidden:true,children:["Loading ",/* @__PURE__ */jsx("em",{children:story.title}),"\u2026"]}),/* @__PURE__ */jsx(Flex,{align:"center",as:"main",height:"fill",justify:"center",children:/* @__PURE__ */jsx(Spinner,{muted:true})})]});});const ErrorScreen=memo(function ErrorScreen2(props){const{error,errorInfo,onRetry}=props;return/* @__PURE__ */jsx(Box,{padding:4,children:/* @__PURE__ */jsxs(Stack,{space:4,children:[/* @__PURE__ */jsx(Heading,{as:"h1",size:[1,1,2],children:error.message}),/* @__PURE__ */jsx(Box,{children:/* @__PURE__ */jsx(Button,{onClick:onRetry,text:"Retry"})}),error.stack&&/* @__PURE__ */jsx(Code,{size:1,children:formatStack(error.stack)}),errorInfo&&/* @__PURE__ */jsx(Code,{size:1,children:"Component stack:"+formatStack(errorInfo.componentStack)})]})});});function isArray(value){return Array.isArray(value);}function isRecord(value){return Boolean(value)&&typeof value==="object"&&!Array.isArray(value);}function createMainController(){const _subscribers=/* @__PURE__ */new Set();let _msgQueue=[];let _flushTimeout=null;function _flush(){if(_flushTimeout){clearInterval(_flushTimeout);}_flushTimeout=setTimeout(()=>{window.parent.postMessage(_msgQueue);_msgQueue=[];_flushTimeout=null;},0);}function _handleMessage(event){const msgs=event.data;if(isArray(msgs)){for(const msg of msgs){if(isRecord(msg)&&typeof msg.type==="string"&&msg.type.startsWith("workshop/")){for(const subscriber of _subscribers){subscriber(msg);}}}}}function _mount(){window.addEventListener("message",_handleMessage,false);}function _unmount(){window.removeEventListener("message",_handleMessage,false);}return{message:{publish(msg){_msgQueue.push(msg);_flush();},subscribe(subscriber){_subscribers.add(subscriber);if(_subscribers.size===1){_mount();}return()=>{_subscribers.delete(subscriber);if(_subscribers.size===0){_unmount();}};}}};}function getStateFromLocation$1(){const query=typeof window==="undefined"?{}:qs.parse(window.location.search.slice(1));const{path="/",scheme,viewport,zoom,...payload}=query;return{frameReady:false,path,payload,scheme:typeof scheme==="string"?scheme:"light",viewport:typeof viewport==="string"?viewport:"auto",zoom:typeof zoom==="string"?Number(zoom):1};}memo(function WorkshopFrame2(props){const{config,setScheme}=props;const main=useMemo(()=>createMainController(),[]);const channel=useMemo(()=>createPubsub(),[]);const[boundaryElement,setBoundaryElement]=useState(null);const[portalElement,setPortalElement]=useState(null);const broadcast=useCallback(msg=>{channel.publish(msg);main.message.publish(msg);},[channel,main]);const[{frameReady,path,payload,scheme,viewport,zoom},setState]=useState(()=>getStateFromLocation$1());useEffect(()=>channel.subscribe(msg=>setState(s=>workshopReducer(s,msg))),[channel]);useEffect(()=>main.message.subscribe(channel.publish),[channel,main]);useEffect(()=>setScheme(scheme),[setScheme,scheme]);useEffect(()=>broadcast({type:"workshop/frameReady"}),[broadcast]);return/* @__PURE__ */jsx(ToastProvider,{children:/* @__PURE__ */jsx(BoundaryElementProvider,{element:boundaryElement,children:/* @__PURE__ */jsx(PortalProvider,{element:portalElement,children:/* @__PURE__ */jsx(WorkshopProvider,{broadcast,config,channel,frameReady,origin:"frame",path,payload,scheme,viewport,zoom,children:/* @__PURE__ */jsxs(Card,{height:"fill",ref:setBoundaryElement,children:[/* @__PURE__ */jsx(WorkshopCanvas$1,{}),/* @__PURE__ */jsx("div",{"data-portal":"",ref:setPortalElement})]})})})})});});var __freeze$4$1=Object.freeze;var __defProp$4$1=Object.defineProperty;var __template$4$1=(cooked,raw)=>__freeze$4$1(__defProp$4$1(cooked,"raw",{value:__freeze$4$1(raw||cooked.slice())}));var _a$4$1;createGlobalStyle(_a$4$1||(_a$4$1=__template$4$1(["\n  body {\n    background-color: ",";\n  }\n"])),_ref5=>{let{theme}=_ref5;return theme.sanity.color.base.bg;});var __freeze$3$1=Object.freeze;var __defProp$3$1=Object.defineProperty;var __template$3$1=(cooked,raw)=>__freeze$3$1(__defProp$3$1(cooked,"raw",{value:__freeze$3$1(raw||cooked.slice())}));var _a$3$1;const MemoTab=memo(Tab);const Root$4$1=styled(Card)(_a$3$1||(_a$3$1=__template$3$1(["\n  line-height: 0;\n\n  @media screen and (max-width: ","px) {\n    text-align: center;\n  }\n"])),_ref6=>{let{theme}=_ref6;return theme.sanity.media[1]-1;});const InspectorHeader=memo(function InspectorHeader2(props){const{currentTabId,onTabChange,tabs}=props;const layerStyle=useMemo(()=>({flex:"none",position:"sticky",top:0}),[]);const children=useMemo(()=>tabs.map(tab=>/* @__PURE__ */jsx(InspectorTabView,{onTabChange,selected:tab.id===currentTabId,tab},tab.id)),[currentTabId,onTabChange,tabs]);return/* @__PURE__ */jsx(Layer,{style:layerStyle,children:/* @__PURE__ */jsx(Root$4$1,{padding:2,shadow:1,children:/* @__PURE__ */jsx(TabList,{space:1,children})})});});function InspectorTabView(props){const{onTabChange,selected,tab}=props;const handleClick=useCallback(()=>{onTabChange(tab.id);},[onTabChange,tab]);return/* @__PURE__ */jsx(MemoTab,{"aria-controls":"".concat(tab.id,"-panel"),fontSize:[2,2,1],id:tab.id,label:tab.label,onClick:handleClick,selected,tone:tab.tone});}var __freeze$2$1=Object.freeze;var __defProp$2$1=Object.defineProperty;var __template$2$1=(cooked,raw)=>__freeze$2$1(__defProp$2$1(cooked,"raw",{value:__freeze$2$1(raw||cooked.slice())}));var _a$2$1;const Root$3$1=styled(Card)(_a$2$1||(_a$2$1=__template$2$1(["\n  overflow: hidden;\n\n  @media screen and (min-width: ","px) {\n    border-left: 1px solid var(--card-border-color);\n    min-width: 180px;\n    max-width: 300px;\n    overflow: auto;\n  }\n"])),_ref7=>{let{theme}=_ref7;return theme.sanity.media[1];});const MemoRender=memo(function MemoRender2(props){return createElement(props.component,{options:props.options});});const WorkshopInspector=memo(function WorkshopInspector2(props){const{expanded}=props;const{plugins}=useWorkshop();const tabs=useMemo(()=>{return plugins.filter(plugin=>plugin.inspector).map(plugin=>{return{id:plugin.name,label:plugin.title,tone:void 0,plugin};});},[plugins]);const[tabId,setTabId]=useState(tabs.length>0?tabs[0].id:null);const currentTab=tabs.find(tab=>tab.id===tabId);const showTabs=tabs.length>1;const display=useMemo(()=>expanded?["block"]:["none","none","block"],[expanded]);return/* @__PURE__ */jsx(Root$3$1,{display,flex:1,children:/* @__PURE__ */jsxs(Flex,{direction:"column",height:"fill",children:[showTabs&&/* @__PURE__ */jsx(InspectorHeader,{currentTabId:tabId,onTabChange:setTabId,tabs}),showTabs&&tabs.map(tab=>/* @__PURE__ */jsx(TabPanel,{"aria-labelledby":"".concat(tab.id,"-tab"),flex:1,hidden:tab.id!==tabId,id:"".concat(tab.id,"-panel"),overflow:"auto",children:tab.plugin.inspector&&/* @__PURE__ */jsx(MemoRender,{component:tab.plugin.inspector,options:tab.plugin.options||EMPTY_RECORD})},tab.id)),!showTabs&&(currentTab==null?void 0:currentTab.plugin.inspector)&&/* @__PURE__ */jsx(Box,{flex:1,overflow:"auto",children:/* @__PURE__ */jsx(MemoRender,{component:currentTab.plugin.inspector,options:currentTab.plugin.options||EMPTY_RECORD})})]})});});const debounce=lodashDebounce;function NavbarBreadcrumbs(){const{broadcast,scope,story,title}=useWorkshop();const handleHomeClick=useCallback(event=>{event.preventDefault();broadcast({type:"workshop/setPath",value:"/"});},[broadcast]);return/* @__PURE__ */jsx(NavbarBreadcrumbsView,{onHomeClick:handleHomeClick,scopeTitle:scope==null?void 0:scope.title,storyTitle:story==null?void 0:story.title,title});}const NavbarBreadcrumbsView=memo(function NavbarBreadcrumbsView2(props){const{onHomeClick,scopeTitle,storyTitle,title}=props;return/* @__PURE__ */jsxs(Breadcrumbs,{separator:/* @__PURE__ */jsx(Text,{muted:true,size:[2,2,1],children:"/"}),space:2,children:[/* @__PURE__ */jsx(Text,{size:[2,2,1],weight:"bold",children:/* @__PURE__ */jsx("a",{href:"/",onClick:onHomeClick,style:{color:"inherit"},children:title})}),scopeTitle&&/* @__PURE__ */jsx(Text,{align:"center",size:[2,2,1],children:scopeTitle}),storyTitle&&/* @__PURE__ */jsx(Text,{size:[2,2,1],children:storyTitle})]});});const OpenCanvasButton=memo(function OpenCanvasButton2(){const{frameUrl,path,payload,scheme,zoom,viewport}=useWorkshop();const canvasUrl=useMemo(()=>path==="/"?void 0:buildFrameUrl({baseUrl:frameUrl,path,payload,scheme,zoom,viewport}),[frameUrl,path,payload,scheme,zoom,viewport]);return/* @__PURE__ */jsx(Button,{as:canvasUrl?"a":"button",disabled:!canvasUrl,fontSize:1,href:canvasUrl,iconRight:LaunchIcon,mode:"ghost",padding:2,rel:"noopener noreferrer",target:"_blank",text:"Open story"});});function SchemeMenu(){const{broadcast,scheme}=useWorkshop();const handleToggleScheme=useCallback(()=>{broadcast({type:"workshop/toggleScheme"});},[broadcast]);return/* @__PURE__ */jsx(SchemeMenuView,{dark:scheme==="dark",onToggleScheme:handleToggleScheme});}const SchemeMenuView=memo(function SchemeMenuView2(props){const{dark,onToggleScheme}=props;return/* @__PURE__ */jsx(Button,{fontSize:1,icon:dark?MoonIcon:SunIcon,mode:"bleed",onClick:onToggleScheme,padding:2});});const ViewportMenu=memo(function ViewportMenu2(){const{broadcast,story,viewport}=useWorkshop();const setViewport=useCallback(value=>{broadcast({type:"workshop/setViewport",value});},[broadcast]);return/* @__PURE__ */jsx(ViewportMenuView,{disabled:!story,setViewport,viewport});});const POPOVER_PROPS$1={constrainSize:true,matchReferenceWidth:true,placement:"bottom",portal:true};const ViewportMenuView=memo(function ViewportMenuView2(props){var _a;const{disabled,setViewport,viewport}=props;return/* @__PURE__ */jsx(MenuButton,{button:/* @__PURE__ */jsx(Button,{disabled,fontSize:1,iconRight:SelectIcon,mode:"ghost",padding:2,style:{minWidth:80},text:(_a=VIEWPORT_OPTIONS.find(o=>o.name===viewport))==null?void 0:_a.title}),id:"viewport-menu",menu:/* @__PURE__ */jsx(Menu,{children:VIEWPORT_OPTIONS.map(option=>/* @__PURE__ */jsx(MenuItem,{fontSize:1,onClick:()=>setViewport(option.name),padding:2,selected:option.name===viewport,text:option.title},option.name))}),popover:POPOVER_PROPS$1});});function ZoomMenu(){const{broadcast,story,zoom}=useWorkshop();const setZoom=useCallback(value=>broadcast({type:"workshop/setZoom",value}),[broadcast]);return/* @__PURE__ */jsx(ZoomMenuView,{disabled:!story,setZoom,zoom});}const POPOVER_PROPS={constrainSize:true,matchReferenceWidth:true,placement:"bottom",portal:true};const ZoomMenuView=memo(function ZoomMenuView2(props){var _a;const{disabled,setZoom,zoom}=props;return/* @__PURE__ */jsx(MenuButton,{button:/* @__PURE__ */jsx(Button,{disabled,fontSize:1,iconRight:SelectIcon,mode:"ghost",padding:2,style:{minWidth:80},text:(_a=ZOOM_OPTIONS.find(o=>o.value===zoom))==null?void 0:_a.title}),id:"zoom-menu",menu:/* @__PURE__ */jsx(Menu,{children:ZOOM_OPTIONS.map(option=>/* @__PURE__ */jsx(MenuItem,{fontSize:1,onClick:()=>setZoom(option.value),padding:2,selected:option.value===zoom,text:option.title},option.value))}),popover:POPOVER_PROPS});});const WorkshopNavbar=memo(function WorkshopNavbar2(props){const{inspectorExpanded,navigatorExpanded,onInspectorToggle,onNavigatorToggle}=props;const mediaIndex=useMediaIndex();const{story,title}=useWorkshop();return/* @__PURE__ */jsx(Card,{borderBottom:true,flex:"none",padding:2,style:{lineHeight:0},children:/* @__PURE__ */jsxs(Flex,{gap:1,children:[/* @__PURE__ */jsx(Box,{display:["block","block","none"],flex:"none",children:/* @__PURE__ */jsx(Button,{"aria-label":"Open navigator",fontSize:[2,2,1],icon:MenuIcon,mode:"bleed",onClick:onNavigatorToggle,padding:2,selected:navigatorExpanded})}),/* @__PURE__ */jsxs(Flex,{flex:1,justify:["center","center","flex-start"],padding:2,sizing:"border",style:{minWidth:250},children:[mediaIndex<2&&/* @__PURE__ */jsx(Text,{weight:"bold",children:(story==null?void 0:story.title)||title}),mediaIndex>=2&&/* @__PURE__ */jsx(NavbarBreadcrumbs,{})]}),/* @__PURE__ */jsx(Box,{display:["block","block","none"],flex:"none",children:/* @__PURE__ */jsx(Button,{"aria-label":"Open inspector",fontSize:[2,2,1],icon:ControlsIcon,mode:"bleed",onClick:onInspectorToggle,padding:2,selected:inspectorExpanded})}),/* @__PURE__ */jsx(Box,{display:["none","none","block"],flex:"none",children:/* @__PURE__ */jsxs(Inline,{space:1,children:[/* @__PURE__ */jsx(OpenCanvasButton,{}),/* @__PURE__ */jsx(ViewportMenu,{}),/* @__PURE__ */jsx(ZoomMenu,{}),/* @__PURE__ */jsx(SchemeMenu,{})]})})]})});});function parseMenuNode(collections,node,name){if(node.__scope__){const scope=node.__scope__;if(scope.name==="@@root@@"){return scope.stories.map(s=>({type:"story",...s}));}return[{type:"scope",name:scope.name||"@@root@@",title:scope.title||"(root)",scope}];}const coll=collections.find(c=>c.name===name);const entries=Object.entries(node).filter(_ref8=>{let[key]=_ref8;return key!=="__scope__";});const items=entries.flatMap(_ref9=>{let[key,child]=_ref9;return parseMenuNode((coll==null?void 0:coll.children)||[],child,key);});return[{type:"list",name,title:(coll==null?void 0:coll.title)||name,items}];}function buildMenu(collections,scopes){const scopeMap={};for(const scope of scopes){const scopeName=scope.name||"@@root@@";const prevScope=scopeMap[scopeName]||{name:scopeName,title:scope.title,stories:[]};const mergedScope={...prevScope,name:scopeName,stories:prevScope.stories.concat(scope.stories)};scopeMap[scopeName]=mergedScope;}let tree={};for(const scope of Object.values(scopeMap)){tree=set(tree,scope.name||"@@root@@",{__scope__:scope});}const rootNode={type:"list",name:"@@root@@",items:[]};for(const[key,entry]of Object.entries(tree)){rootNode.items.push(...parseMenuNode(collections,entry,key));}return rootNode;}const SearchResults=memo(function SearchResults2(props){const{matches,onStoryClick}=props;return/* @__PURE__ */jsx(Stack,{space:1,children:matches.map(_ref10=>{let{scope,story}=_ref10;return/* @__PURE__ */jsx(Card,{as:"a","data-path":"/".concat(scope.name,"/").concat(story.name),href:"/".concat(scope.name,"/").concat(story.name),onClick:onStoryClick,padding:2,radius:2,children:/* @__PURE__ */jsx(Text,{size:1,textOverflow:"ellipsis",children:[scope.title||"",story.title].filter(Boolean).join(" / ")})},"".concat(scope.name,"/").concat(story.name));})});});const StoryTree=memo(function StoryTree2(props){const{items}=props;return/* @__PURE__ */jsx(Tree,{space:1,children:/* @__PURE__ */jsx(MenuItems,{items})});});const MenuItems=memo(function MenuItems2(props){const{basePath="",items}=props;const{broadcast,path:workshopPath,scope:currentScope,story:currentStory}=useWorkshop();const handleStoryClick=useCallback(event=>{event.preventDefault();const target=event.currentTarget;const targetPath=target.getAttribute("data-path");if(targetPath){broadcast({type:"workshop/setPath",value:targetPath});}},[broadcast]);return useMemo(()=>{if(items.length===0){return null;}return/* @__PURE__ */jsx(Fragment,{children:items.map((item,itemIndex)=>{if(item.type==="list"){const path="".concat(basePath,"/").concat(item.name);return/* @__PURE__ */jsx(MemoList,{expanded:workshopPath.startsWith(path+"/"),item,path},item.name||itemIndex);}if(item.type==="story"){return/* @__PURE__ */jsx(TreeItem,{"data-path":"/".concat(item.name||""),fontSize:[2,2,1],href:"/".concat(item.name||""),onClick:handleStoryClick,padding:2,selected:(currentStory==null?void 0:currentStory.component)===item.component,text:item.title},item.name);}if(item.type==="scope"){return/* @__PURE__ */jsx(MemoScope,{currentStory,expanded:item.scope===currentScope,item,onStoryClick:handleStoryClick},item.name);}return/* @__PURE__ */jsx(TreeItem,{text:"unknown"},itemIndex);})});},[basePath,currentScope,currentStory,handleStoryClick,items,workshopPath]);});const MemoList=memo(function MemoList2(props){const{expanded,item,path}=props;const children=useMemo(()=>/* @__PURE__ */jsx(MenuItems,{basePath:path,items:item.items}),[item,path]);return/* @__PURE__ */jsx(TreeItem,{expanded,fontSize:[2,2,1],padding:2,text:item.title,weight:"semibold",children});});const MemoScope=memo(function MemoScope2(props){const{currentStory,expanded,item,onStoryClick}=props;const children=useMemo(()=>item.scope.stories.map(story=>/* @__PURE__ */jsx(TreeItem,{"data-path":"/".concat(item.scope.name,"/").concat(story.name),fontSize:[2,2,1],href:"/".concat(item.scope.name,"/").concat(story.name),onClick:onStoryClick,padding:2,selected:currentStory===story,text:story.title},story.name)),[currentStory,item,onStoryClick]);return/* @__PURE__ */jsx(TreeItem,{expanded,fontSize:[2,2,1],padding:2,text:item.title,weight:"semibold",children});});var __freeze$1$1=Object.freeze;var __defProp$1$1=Object.defineProperty;var __template$1$1=(cooked,raw)=>__freeze$1$1(__defProp$1$1(cooked,"raw",{value:__freeze$1$1(raw||cooked.slice())}));var _a$1$1;const Root$2$1=styled(Card)(_a$1$1||(_a$1$1=__template$1$1(["\n  overflow: hidden;\n\n  @media screen and (min-width: ","px) {\n    border-right: 1px solid var(--card-border-color);\n    min-width: 180px;\n    max-width: 300px;\n    overflow: auto;\n  }\n"])),_ref11=>{let{theme}=_ref11;return theme.sanity.media[1];});const flexNoneStyle={flex:"none"};const lineHeightNoneStyle={lineHeight:0};const textInputFontSize=[2,2,1];const WorkshopNavigator=memo(function WorkshopNavigator2(props){const{collections=[],expanded}=props;const{broadcast,scopes}=useWorkshop();const menu=useMemo(()=>buildMenu(collections,scopes),[collections,scopes]);const[query,setQuery]=useState("");const matches=useMemo(()=>{var _a2;if(!query)return EMPTY_ARRAY$1;const q=query.toLowerCase();const ret=[];for(const scope of scopes){for(const story of scope.stories){if(((_a2=scope.title)==null?void 0:_a2.toLowerCase().includes(q))||story.title.toLowerCase().includes(q)){ret.push({scope,story});}}}return ret;},[query,scopes]);const handleSearchQueryChange=useCallback(event=>setQuery(event.currentTarget.value),[]);const handleSearchQueryClear=useCallback(()=>setQuery(""),[]);const handleStoryClick=useCallback(event=>{event.preventDefault();const target=event.currentTarget;const targetPath=target.getAttribute("data-path");if(targetPath){broadcast({type:"workshop/setPath",value:targetPath});setQuery("");}},[broadcast]);return/* @__PURE__ */jsx(NavigatorView,{expanded,matches,menu,onSearchQueryChange:handleSearchQueryChange,onSearchQueryClear:handleSearchQueryClear,onStoryClick:handleStoryClick,query});});const NavigatorView=memo(function NavigatorView2(props){const{expanded,matches,menu,onSearchQueryChange,onSearchQueryClear,onStoryClick,query}=props;const display=useMemo(()=>expanded?["block"]:["none","none","block"],[expanded]);return/* @__PURE__ */jsx(Root$2$1,{display,flex:1,children:/* @__PURE__ */jsxs(Flex,{direction:"column",height:"fill",children:[/* @__PURE__ */jsx(Layer,{style:flexNoneStyle,children:/* @__PURE__ */jsx(Card,{padding:2,shadow:1,style:lineHeightNoneStyle,children:/* @__PURE__ */jsx(TextInput,{border:false,clearButton:Boolean(query),fontSize:textInputFontSize,icon:SearchIcon,onChange:onSearchQueryChange,onClear:onSearchQueryClear,padding:2,placeholder:"Stories",radius:2,space:2,value:query})})}),/* @__PURE__ */jsxs(Card,{flex:1,overflow:"auto",children:[query&&matches.length>0&&/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(SearchResults,{matches,onStoryClick})}),!query&&menu.type==="list"&&/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(StoryTree,{items:menu.items})})]})]})});});var __freeze$b=Object.freeze;var __defProp$q=Object.defineProperty;var __template$b=(cooked,raw)=>__freeze$b(__defProp$q(cooked,"raw",{value:__freeze$b(raw||cooked.slice())}));var _a$b;const Frame=styled.iframe(_a$b||(_a$b=__template$b(["\n  display: block;\n  border: 0;\n  height: 100%;\n  width: 100%;\n"])));const WorkshopCanvas=memo(function WorkshopCanvas2(props){const{frameRef,hidden}=props;const{frameReady,frameUrl,path,payload,scheme,title,viewport,zoom}=useWorkshop();const viewportOption=VIEWPORT_OPTIONS.find(o=>o.name===viewport)||VIEWPORT_OPTIONS[0];const viewportW=viewportOption==null?void 0:viewportOption.rect.width;const viewportH=viewportOption==null?void 0:viewportOption.rect.height;const[initialFrameUrl]=useState(()=>buildFrameUrl({baseUrl:frameUrl,path,payload,scheme,viewport,zoom}));const containerStyle=useMemo(()=>({maxWidth:viewportW==="auto"?void 0:"".concat((viewportW||1)*zoom,"px"),maxHeight:viewportH?"".concat((viewportH||1)*zoom,"px"):void 0}),[viewportW,viewportH,zoom]);const display=useMemo(()=>hidden?"none":"block",[hidden]);const frameStyle=useMemo(()=>({transform:"scale(".concat(zoom,")"),transformOrigin:"0 0",width:"".concat(100/zoom,"%"),height:"".concat(100/zoom,"%")}),[zoom]);return/* @__PURE__ */jsx(Card,{display,flex:1,overflow:"hidden",tone:"transparent",children:/* @__PURE__ */jsxs(Flex,{align:"center",height:"fill",justify:"center",sizing:"border",children:[path==="/"&&/* @__PURE__ */jsx(Container,{width:0,children:/* @__PURE__ */jsxs(Stack,{padding:4,space:4,children:[/* @__PURE__ */jsx(Heading,{align:"center",children:title}),/* @__PURE__ */jsx(Text,{align:"center",muted:true,children:"Browse workshop stories in the navigator to the left."})]})}),!frameReady&&path!=="/"&&/* @__PURE__ */jsx(Spinner,{muted:true}),/* @__PURE__ */jsx(Container,{height:"fill",hidden:!frameReady||path==="/",style:containerStyle,width:"auto",children:/* @__PURE__ */jsx(Card,{height:"fill",shadow:1,children:/* @__PURE__ */jsx(Frame,{ref:frameRef,src:initialFrameUrl,style:frameStyle})})})]})});});function createWorkshopFrameController(){const _subscribers=/* @__PURE__ */new Set();let _frameElement=null;let _msgQueue=[];let _flushTimeout=null;function _flush(){if(_flushTimeout){clearInterval(_flushTimeout);}_flushTimeout=setTimeout(()=>{var _a;(_a=_frameElement==null?void 0:_frameElement.contentWindow)==null?void 0:_a.postMessage(_msgQueue,window.location.origin);_msgQueue=[];_flushTimeout=null;},0);}function _handleMessage(event){const msgs=event.data;if(isArray(msgs)){for(const msg of msgs){if(isRecord(msg)&&typeof msg.type==="string"&&msg.type.startsWith("workshop/")){for(const subscriber of _subscribers){subscriber(msg);}}}}}function _mount(){if(_frameElement==null?void 0:_frameElement.contentWindow){window.addEventListener("message",_handleMessage);}}function _unmount(el){if(el==null?void 0:el.contentWindow){window.removeEventListener("message",_handleMessage);}}return{message:{publish(msg){_msgQueue.push(msg);_flush();},subscribe(subscriber){_subscribers.add(subscriber);return()=>{_subscribers.delete(subscriber);};}},setElement(el){const prevFrameElement=_frameElement;_frameElement=el;if(el){_mount();}else if(prevFrameElement){_unmount(prevFrameElement);}}};}function getStateFromLocation(loc,schemeProp,frameReady){const path=loc.path;const query=loc.query||{};const{scheme,viewport,zoom,...payload}=query;return{frameReady:frameReady||false,path,payload,scheme:schemeProp||(typeof scheme==="string"?scheme:"light"),viewport:typeof viewport==="string"?viewport:"auto",zoom:typeof zoom==="number"?zoom:1};}function getQueryFromState(state){let withPayload=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const{payload,scheme,viewport,zoom}=state;const query={scheme};if(viewport&&viewport!==DEFAULT_VIEWPORT_VALUE){query.viewport=viewport;}if(zoom&&zoom!==DEFAULT_ZOOM_VALUE){query.zoom=zoom;}if(withPayload){for(const[key,val]of Object.entries(payload)){if(["schema","viewport","zoom"].includes(key)){console.warn('Workshop: the payload cannot contain a property named "'.concat(key,'" (protected name)'));}else{query[key]=val;}}}return query;}memo(function Workshop2(props){var _a,_b;const{config,locationStore,onSchemeChange,scheme:schemeProp}=props;const withNavbar=(_b=(_a=config.features)==null?void 0:_a.navbar)!=null?_b:true;const channel=useMemo(()=>createPubsub(),[]);const frame=useMemo(()=>createWorkshopFrameController(),[]);const[boundaryElement,setBoundaryElement]=useState(null);const[portalElement,setPortalElement]=useState(null);const[{frameReady,path,payload,scheme,viewport,zoom},setState]=useState(()=>getStateFromLocation(locationStore.get(),schemeProp));const mediaIndex=useMediaIndex();const[navigatorExpanded,setNavigatorExpanded]=useState(false);const[inspectorExpanded,setInspectorExpanded]=useState(false);const frameReadyRef=useRef(frameReady);const schemeRef=useRef(scheme);const pathRef=useRef(path);const queryRef=useRef({scheme,viewport,zoom,...payload});const broadcast=useCallback(msg=>{channel.publish(msg);frame.message.publish(msg);},[channel,frame]);const _pushLocation=useMemo(()=>debounce(loc=>locationStore.push(loc),150),[locationStore]);const _replaceLocation=useMemo(()=>debounce(loc=>locationStore.replace(loc),150),[locationStore]);const handleNavigatorToggle=useCallback(()=>{setNavigatorExpanded(v=>!v);setInspectorExpanded(false);},[]);const handleInspectorToggle=useCallback(()=>{setNavigatorExpanded(false);setInspectorExpanded(v=>!v);},[]);const mediaIndexRef=useRef(mediaIndex);useEffect(()=>{const prevMediaIndex=mediaIndexRef.current;if(prevMediaIndex<2&&mediaIndex>=2){setNavigatorExpanded(false);setInspectorExpanded(false);}mediaIndexRef.current=mediaIndex;},[mediaIndex]);useEffect(()=>{setNavigatorExpanded(false);},[path]);useEffect(()=>()=>_pushLocation.cancel(),[_pushLocation]);useEffect(()=>()=>_replaceLocation.cancel(),[_replaceLocation]);useEffect(()=>channel.subscribe(msg=>{setState(prevState=>{const nextState=workshopReducer(prevState,msg);const changed=!isEqual(prevState,nextState);if(changed){if(msg.type==="workshop/setPath"){if(pathRef.current!==nextState.path){pathRef.current=nextState.path;const nextQuery=getQueryFromState(nextState,false);_pushLocation({path:nextState.path,query:nextQuery});}}else if(msg.type!=="workshop/setState"){const nextQuery=getQueryFromState(nextState);if(!isEqual(queryRef.current,nextQuery)){queryRef.current=nextQuery;_replaceLocation({path:nextState.path,query:nextQuery});}}}return changed?nextState:prevState;});}),[_pushLocation,_replaceLocation,channel,locationStore]);useEffect(()=>frame.message.subscribe(channel.publish),[channel,frame]);useEffect(()=>{frameReadyRef.current=frameReady;},[frameReady]);useEffect(()=>locationStore.subscribe(loc=>{const nextState=getStateFromLocation(loc,void 0,frameReady);broadcast({type:"workshop/setState",value:nextState});}),[broadcast,frameReady,locationStore]);useEffect(()=>{schemeRef.current=scheme;onSchemeChange(scheme);},[onSchemeChange,scheme]);useEffect(()=>{if(schemeProp){if(schemeRef.current!==schemeProp){schemeRef.current=schemeProp;broadcast({type:"workshop/setScheme",value:schemeProp});}}},[broadcast,schemeProp]);if(!config.scopes){return/* @__PURE__ */jsx(Fragment,{children:"No scopes"});}return/* @__PURE__ */jsx(WorkshopProvider,{config,broadcast,channel,frameReady,origin:"main",path,payload,scheme,viewport,zoom,children:/* @__PURE__ */jsx(ToastProvider,{children:/* @__PURE__ */jsx(BoundaryElementProvider,{element:boundaryElement,children:/* @__PURE__ */jsx(PortalProvider,{element:portalElement,children:/* @__PURE__ */jsxs(Flex,{"data-boundary":"",direction:"column",height:"fill",ref:setBoundaryElement,style:{minWidth:320},children:[withNavbar&&/* @__PURE__ */jsx(WorkshopNavbar,{inspectorExpanded,navigatorExpanded,onInspectorToggle:handleInspectorToggle,onNavigatorToggle:handleNavigatorToggle}),/* @__PURE__ */jsxs(Flex,{flex:1,children:[/* @__PURE__ */jsx(WorkshopNavigator,{collections:config.collections,expanded:navigatorExpanded}),/* @__PURE__ */jsx(WorkshopCanvas,{frameRef:frame.setElement,hidden:navigatorExpanded||inspectorExpanded}),/* @__PURE__ */jsx(WorkshopInspector,{expanded:inspectorExpanded})]}),/* @__PURE__ */jsx("div",{"data-portal":"",ref:setPortalElement})]})})})})});});function CreateNewThreadInput(props){const{currentUser,fieldName,mentionOptions,onBlur,onFocus,onKeyDown,onNewThreadCreate,readOnly}=props;const[value,setValue]=useState(EMPTY_ARRAY$1);const commentInputHandle=useRef(null);const handleSubmit=useCallback(()=>{onNewThreadCreate==null?void 0:onNewThreadCreate(value);setValue(EMPTY_ARRAY$1);},[onNewThreadCreate,value]);const hasValue=useMemo(()=>hasCommentMessageValue(value),[value]);const startDiscard=useCallback(()=>{var _a;if(!hasValue){return;}(_a=commentInputHandle.current)==null?void 0:_a.discardDialogController.open();},[hasValue]);const handleInputKeyDown=useCallback(event=>{if(event.isDefaultPrevented()){return;}if(event.key==="Escape"){event.preventDefault();event.stopPropagation();startDiscard();}if(onKeyDown)onKeyDown(event);},[onKeyDown,startDiscard]);const confirmDiscard=useCallback(()=>{var _a,_b;setValue(EMPTY_ARRAY$1);(_a=commentInputHandle.current)==null?void 0:_a.discardDialogController.close();(_b=commentInputHandle.current)==null?void 0:_b.focus();},[]);const cancelDiscard=useCallback(()=>{var _a;(_a=commentInputHandle.current)==null?void 0:_a.discardDialogController.close();},[]);const placeholder=/* @__PURE__ */jsxs(Fragment,{children:["Add comment to ",/* @__PURE__ */jsx("b",{children:fieldName})]});return/* @__PURE__ */jsx(CommentInput,{currentUser,expandOnFocus:true,mentionOptions,onBlur,onChange:setValue,onDiscardCancel:cancelDiscard,onDiscardConfirm:confirmDiscard,onKeyDown:handleInputKeyDown,onFocus,onSubmit:handleSubmit,placeholder,readOnly,ref:commentInputHandle,value});}var __freeze$a=Object.freeze;var __defProp$p=Object.defineProperty;var __template$a=(cooked,raw)=>__freeze$a(__defProp$p(cooked,"raw",{value:__freeze$a(raw||cooked.slice())}));var _a$a,_b$4;const HeaderFlex=styled(Flex)(_a$a||(_a$a=__template$a(["\n  min-height: 25px;\n"])));const BreadcrumbsButton=styled(Button)(_ref67=>{let{theme}=_ref67;const fg=theme.sanity.color.base.fg;return css(_b$4||(_b$4=__template$a(["\n    --card-fg-color: ",";\n  "])),fg);});function CommentThreadLayout(props){const{breadcrumbs,canCreateNewThread,children,currentUser,fieldPath,mentionOptions,onNewThreadCreate,onPathSelect,readOnly}=props;const selectPath=useCallback(()=>{onPathSelect==null?void 0:onPathSelect(PathUtils.fromString(fieldPath));},[fieldPath,onPathSelect]);const handleNewThreadCreate=useCallback(payload=>{const nextComment={fieldPath,message:payload,parentCommentId:void 0,status:"open",// Since this is a new comment, we generate a new thread ID
threadId:uuid()};onNewThreadCreate==null?void 0:onNewThreadCreate(nextComment);},[onNewThreadCreate,fieldPath]);const crumbsTitlePath=useMemo(()=>(breadcrumbs==null?void 0:breadcrumbs.map(p=>p.title))||[],[breadcrumbs]);const lastCrumb=crumbsTitlePath[crumbsTitlePath.length-1];return/* @__PURE__ */jsxs(Stack,{space:2,children:[/* @__PURE__ */jsx(HeaderFlex,{align:"center",gap:2,paddingRight:1,sizing:"border",children:/* @__PURE__ */jsx(Stack,{flex:1,children:/* @__PURE__ */jsx(Flex,{align:"center",children:/* @__PURE__ */jsx(BreadcrumbsButton,{"aria-label":"Go to ".concat(lastCrumb," field"),mode:"bleed",onClick:selectPath,padding:2,children:/* @__PURE__ */jsx(CommentBreadcrumbs,{maxLength:3,titlePath:crumbsTitlePath})})})})}),canCreateNewThread&&/* @__PURE__ */jsx(ThreadCard,{children:/* @__PURE__ */jsx(CreateNewThreadInput,{currentUser,fieldName:lastCrumb,mentionOptions,onNewThreadCreate:handleNewThreadCreate,readOnly})}),/* @__PURE__ */jsx(Stack,{space:2,children})]});}const EMPTY_STATE_MESSAGES={open:{title:"No open comments yet",message:/* @__PURE__ */jsxs("span",{children:["Open comments on this document ",/* @__PURE__ */jsx("br",{}),"will be shown here."]})},resolved:{title:"No resolved comments yet",message:/* @__PURE__ */jsxs(Fragment,{children:["Resolved comments on this document ",/* @__PURE__ */jsx("br",{}),"will be shown here."]})}};function CommentsListStatus(props){const{status,error,loading,hasNoComments}=props;if(error){return/* @__PURE__ */jsx(Flex,{align:"center",justify:"center",flex:1,padding:4,children:/* @__PURE__ */jsx(Flex,{align:"center",children:/* @__PURE__ */jsx(Text,{size:1,muted:true,children:"Something went wrong"})})});}if(loading){return/* @__PURE__ */jsx(Flex,{align:"center",justify:"center",flex:1,padding:4,children:/* @__PURE__ */jsxs(Flex,{align:"center",gap:2,children:[/* @__PURE__ */jsx(Spinner,{muted:true,size:1}),/* @__PURE__ */jsx(Text,{size:1,muted:true,children:"Loading comments..."})]})});}if(hasNoComments){return/* @__PURE__ */jsx(Flex,{align:"center",justify:"center",flex:1,sizing:"border",children:/* @__PURE__ */jsx(Container,{width:0,padding:4,children:/* @__PURE__ */jsxs(Stack,{space:3,children:[/* @__PURE__ */jsx(Text,{align:"center",size:1,muted:true,weight:"semibold",children:EMPTY_STATE_MESSAGES[status].title}),/* @__PURE__ */jsx(Text,{align:"center",size:1,muted:true,children:EMPTY_STATE_MESSAGES[status].message})]})})});}return null;}const SCROLL_INTO_VIEW_OPTIONS$1={behavior:"smooth",block:"start",inline:"nearest"};function groupThreads(comments){return comments.reduce((acc,comment)=>{const field=comment.fieldPath;if(!acc[field]){acc[field]=[];}acc[field].push(comment);return acc;},{});}const CommentsListInner=forwardRef(function CommentsListInner2(props,ref){const{comments,currentUser,error,loading,mentionOptions,onCopyLink,onCreateRetry,onDelete,onEdit,onNewThreadCreate,onPathSelect,onReply,onStatusChange,readOnly,selectedPath,status}=props;const[boundaryElement,setBoundaryElement]=useState(null);const scrollToComment=useCallback(id=>{const commentElement=document==null?void 0:document.querySelector('[data-comment-id="'.concat(id,'"]'));if(commentElement){commentElement.scrollIntoView(SCROLL_INTO_VIEW_OPTIONS$1);}},[]);const handleListItemPathSelect=useCallback((path,threadId)=>{onPathSelect==null?void 0:onPathSelect(path,threadId);},[onPathSelect]);useImperativeHandle(ref,()=>{return{scrollToComment};},[scrollToComment]);const groupedThreads=useMemo(()=>Object.entries(groupThreads(comments)),[comments]);const showComments=!loading&&!error&&groupedThreads.length>0;return/* @__PURE__ */jsxs(Flex,{direction:"column",flex:1,height:"fill",overflow:"hidden",ref:setBoundaryElement,sizing:"border",children:[/* @__PURE__ */jsx(CommentsListStatus,{error,hasNoComments:groupedThreads.length===0,loading,status}),showComments&&/* @__PURE__ */jsx(Stack,{as:"ul",flex:1,overflow:"auto",padding:3,paddingTop:1,paddingBottom:6,sizing:"border",space:1,children:/* @__PURE__ */jsx(BoundaryElementProvider,{element:boundaryElement,children:groupedThreads==null?void 0:groupedThreads.map(_ref68=>{let[fieldPath,group]=_ref68;const breadcrumbs=group[0].breadcrumbs;const firstThreadId=group[0].threadId;return/* @__PURE__ */jsx(Stack,{as:"li","data-group-id":firstThreadId,paddingTop:3,children:/* @__PURE__ */jsx(CommentThreadLayout,{breadcrumbs,canCreateNewThread:status==="open",currentUser,fieldPath,mentionOptions,onNewThreadCreate,onPathSelect,readOnly,children:group.map(item=>{var _a,_b;const replies=item.replies.slice().reverse();const canReply=status==="open"&&((_a=item.parentComment._state)==null?void 0:_a.type)!=="createError"&&((_b=item.parentComment._state)==null?void 0:_b.type)!=="createRetrying";const hasSelectedThread=selectedPath==null?void 0:selectedPath.threadId;const threadIsSelected=(selectedPath==null?void 0:selectedPath.threadId)===item.threadId;const fieldIsSelect=(selectedPath==null?void 0:selectedPath.fieldPath)===item.fieldPath;const isSelected=threadIsSelected||fieldIsSelect&&!hasSelectedThread;return/* @__PURE__ */jsx(CommentsListItem,{canReply,currentUser,mentionOptions,onCopyLink,onCreateRetry,onDelete,onEdit,onPathSelect:path=>handleListItemPathSelect(path,item.threadId),onReply,onStatusChange,parentComment:item.parentComment,readOnly,replies,selected:isSelected},item.parentComment._id);})},fieldPath)},fieldPath);})})})]});});const CommentsList=React.memo(CommentsListInner);const DIALOG_COPY={thread:{title:"Delete this comment thread?",body:"All comments in this thread will be deleted, and once deleted cannot be recovered.",confirmButtonText:"Delete thread"},comment:{title:"Delete this comment?",body:"Once deleted, a comment cannot be recovered.",confirmButtonText:"Delete comment"}};function CommentDeleteDialog(props){const{isParent,onClose,commentId,onConfirm,loading,error}=props;const{title,body,confirmButtonText}=DIALOG_COPY[isParent?"thread":"comment"];const handleDelete=useCallback(()=>{onConfirm(commentId);},[commentId,onConfirm]);return/* @__PURE__ */jsx(Dialog,{header:title,id:"delete-comment-dialog",onClose,width:0,footer:/* @__PURE__ */jsxs(Grid,{columns:2,padding:2,gap:2,children:[/* @__PURE__ */jsx(Button,{text:"Cancel",mode:"ghost",onClick:onClose}),/* @__PURE__ */jsx(Button,{loading,onClick:handleDelete,text:confirmButtonText,tone:"critical"})]}),children:/* @__PURE__ */jsxs(Stack,{padding:4,space:4,children:[/* @__PURE__ */jsx(Text,{children:body}),error&&/* @__PURE__ */jsx(TextWithTone,{tone:"critical",children:"An error occurred while deleting the comment. Please try again."})]})});}var __freeze$9=Object.freeze;var __defProp$o=Object.defineProperty;var __template$9=(cooked,raw)=>__freeze$9(__defProp$o(cooked,"raw",{value:__freeze$9(raw||cooked.slice())}));var _a$9;const StyledBadge=styled(Badge)(_ref69=>{let{theme}=_ref69;const fgTint=theme.sanity.color.dark?50:700;const bgTint=theme.sanity.color.dark?700:100;const bg=hues.purple[bgTint].hex;const fg=hues.purple[fgTint].hex;return css(_a$9||(_a$9=__template$9(["\n    background-color: ",";\n    box-shadow: inset 0 0 0 1px ",";\n    color: ",";\n  "])),bg,bg,fg);});function BetaBadge(){return/* @__PURE__ */jsx(StyledBadge,{children:"Beta"});}var __freeze$8=Object.freeze;var __defProp$n=Object.defineProperty;var __template$8=(cooked,raw)=>__freeze$8(__defProp$n(cooked,"raw",{value:__freeze$8(raw||cooked.slice())}));var _a$8;const Root$7=styled(Box)(_a$8||(_a$8=__template$8(["\n  max-width: 280px;\n"])));function CommentsOnboardingPopover(props){const{onDismiss}=props;return/* @__PURE__ */jsx(Popover,{content:/* @__PURE__ */jsx(Root$7,{padding:4,children:/* @__PURE__ */jsxs(Stack,{space:3,children:[/* @__PURE__ */jsx(Text,{weight:"semibold",size:1,children:"Collaborate in One Place"}),/* @__PURE__ */jsx(Text,{size:1,children:"Add a comment on any field. All comments for this document will be here, grouped by field."}),/* @__PURE__ */jsx(Flex,{justify:"flex-end",marginTop:2,children:/* @__PURE__ */jsx(Button,{fontSize:1,padding:2,text:"Got it",tone:"primary",onClick:onDismiss})})]})}),open:true,portal:true,...props});}const CommentsContext=createContext(null);function getParams(user){const params={};if(user!==null){params.identity=user.id;}return params;}const PARSED_FILTERS_MEMO=/* @__PURE__ */new Map();async function matchesFilter(user,filter,document){if(!PARSED_FILTERS_MEMO.has(filter)){PARSED_FILTERS_MEMO.set(filter,parse("*[".concat(filter,"]")));}const parsed=PARSED_FILTERS_MEMO.get(filter);const evalParams=getParams(user);const{identity}=evalParams;const params={...evalParams};const data=await(await evaluate(parsed,{dataset:[document],identity,params})).get();return(data==null?void 0:data.length)===1;}async function grantsPermissionOn(user,grants,permission,document){if(!document){return{granted:true,reason:"Null document, nothing to check"};}if(!grants.length){return{granted:false,reason:"No document grants"};}const matchingGrants=[];for(const grant of grants){if(await matchesFilter(user,grant.filter,document)){matchingGrants.push(grant);}}const foundMatch=matchingGrants.some(grant=>grant.permissions.some(p=>p===permission));return{granted:foundMatch,reason:foundMatch?"Matching grant":"No matching grants found"};}const INITIAL_STATE$1={data:[],error:null,loading:true};let cachedSystemGroups=null;function useMentionOptions(opts){const{documentValue}=opts;const projectStore=useProjectStore();const userStore=useUserStore();const client=useClient(DEFAULT_STUDIO_CLIENT_OPTIONS);const[state,setState]=useState(INITIAL_STATE$1);const list$=useMemo(()=>{const members$=projectStore.get().pipe(map$1(res=>{var _a;return(_a=res.members)==null?void 0:_a.filter(m=>!m.isRobot);}));const users$=members$.pipe(switchMap$1(async members=>{const ids=members.map(_ref70=>{let{id}=_ref70;return id;});const users=await userStore.getUsers(ids);return users;}),map$1(res=>res.map(user=>({displayName:user.displayName,id:user.id,canBeMentioned:false}))));const cached=cachedSystemGroups;const systemGroup$=cached?of(cached):client.observable.fetch('*[_type == "system.group"]');const grants$=forkJoin([users$,systemGroup$]).pipe(mergeMap(async _ref71=>{let[users,groups]=_ref71;if(!cached){cachedSystemGroups=groups;}const grantPromises=users==null?void 0:users.map(async user=>{const grants=groups.map(group=>{if(group.members.includes(user.id)){return group.grants;}return[];});const flattenedGrants=[...grants].flat();const{granted}=await grantsPermissionOn(user,flattenedGrants,"read",documentValue);return{...user,canBeMentioned:granted};});const usersWithPermission=await Promise.all(grantPromises||[]);return usersWithPermission;}));const $alphabetical=grants$.pipe(map$1(res=>({error:null,loading:false,data:sortBy(res,"displayName")})));return $alphabetical;},[client.observable,documentValue,projectStore,userStore]);useEffect(()=>{const initial$=of(INITIAL_STATE$1);const state$=concat(initial$,list$);const sub=state$.subscribe(setState);return()=>{sub.unsubscribe();};},[list$]);return state;}function useNotificationTarget(opts){const{documentId,documentType}=opts||{};const schemaType=useSchema().get(documentType);const{title:workspaceTitle}=useWorkspace();const{createPathWithParams,params}=usePaneRouter();const documentPreviewStore=useDocumentPreviewStore();const previewState=useMemoObservable(()=>{if(!documentId||!schemaType)return of(null);return getPreviewStateObservable(documentPreviewStore,schemaType,documentId,"");},[documentId,documentPreviewStore,schemaType]);const{published,draft}=previewState||{};const documentTitle=(draft==null?void 0:draft.title)||(published==null?void 0:published.title)||"Sanity document";const handleGetNotificationValue=useCallback(_ref72=>{let{commentId}=_ref72;const path=createPathWithParams({...params,comment:commentId,inspect:COMMENTS_INSPECTOR_NAME});const url="".concat(window.location.origin).concat(path);return{documentTitle,url,workspaceTitle};},[createPathWithParams,documentTitle,params,workspaceTitle]);return{getNotificationValue:handleGetNotificationValue};}function useCommentOperations(opts){const{client,currentUser,dataset,documentId,documentType,getThreadLength,onCreate,onCreateError,onEdit,onRemove,onUpdate,projectId,runSetup,workspace}=opts;const authorId=currentUser==null?void 0:currentUser.id;const activeToolName=useRouterState(useCallback(routerState=>typeof routerState.tool==="string"?routerState.tool:void 0,[]));const{tools}=useWorkspace();const activeTool=useMemo(()=>tools.find(tool=>tool.name===activeToolName),[activeToolName,tools]);const{getNotificationValue}=useNotificationTarget({documentId,documentType});const handleCreate=useCallback(async comment=>{const commentId=(comment==null?void 0:comment.id)||uuid();const currentThreadLength=((getThreadLength==null?void 0:getThreadLength(comment.threadId))||0)+1;const{documentTitle="",url="",workspaceTitle=""}=getNotificationValue({commentId})||{};const notification={currentThreadLength,documentTitle,url,workspaceTitle};const nextComment={_id:commentId,_type:"comment",authorId:authorId||"",// improve
lastEditedAt:void 0,message:comment.message,parentCommentId:comment.parentCommentId,status:comment.status,threadId:comment.threadId,context:{payload:{workspace},notification,tool:(activeTool==null?void 0:activeTool.name)||""},target:{path:{field:comment.fieldPath},document:{_dataset:dataset,_projectId:projectId,_ref:documentId,_type:"crossDatasetReference",_weak:true},documentType}};onCreate==null?void 0:onCreate(nextComment);if(!client){try{await runSetup(nextComment);}catch(err){onCreateError==null?void 0:onCreateError(nextComment._id,err);throw err;}return;}try{await client.create(nextComment);}catch(err){onCreateError==null?void 0:onCreateError(nextComment._id,err);throw err;}},[activeTool==null?void 0:activeTool.name,authorId,client,dataset,documentId,documentType,getNotificationValue,getThreadLength,onCreate,onCreateError,projectId,runSetup,workspace]);const handleRemove=useCallback(async id=>{if(!client)return;onRemove==null?void 0:onRemove(id);await Promise.all([client.delete({query:'*[_type == "comment" && parentCommentId == "'.concat(id,'"]')}),client.delete(id)]);},[client,onRemove]);const handleEdit=useCallback(async(id,comment)=>{if(!client)return;const editedComment={message:comment.message,lastEditedAt:/* @__PURE__ */new Date().toISOString()};onEdit==null?void 0:onEdit(id,editedComment);await client.patch(id).set(editedComment).commit();},[client,onEdit]);const handleUpdate=useCallback(async(id,comment)=>{if(!client)return;onUpdate==null?void 0:onUpdate(id,comment);if(comment.status){await Promise.all([client.patch({query:'*[_type == "comment" && parentCommentId == "'.concat(id,'"]')}).set({status:comment.status}).commit(),client.patch(id).set(comment).commit()]);return;}await(client==null?void 0:client.patch(id).set(comment).commit());},[client,onUpdate]);const operation=useMemo(()=>({create:handleCreate,edit:handleEdit,remove:handleRemove,update:handleUpdate}),[handleCreate,handleRemove,handleEdit,handleUpdate]);return{operation};}function useComments(){const value=useContext(CommentsContext);if(!value){throw new Error("useComments must be used within a CommentsProvider");}return value;}function useCommentsSetup(){const ctx=useContext(CommentsSetupContext);if(!ctx){throw new Error("useCommentsSetup: missing context value");}return ctx;}function useCommentsEnabled(opts){const{documentId,documentType}=opts;const{enabled:featureEnabled,isLoading}=useFeatureEnabled("studioComments");const{enabled}=useSource().document.unstable_comments;const enabledFromConfig=enabled({documentType,documentId:getPublishedId(documentId)});const commentsEnabled=useMemo(()=>{if(isLoading){return{isEnabled:false,reason:"loading"};}if(!featureEnabled){return{isEnabled:false,reason:"plan-upgrade-required"};}if(!enabledFromConfig){return{isEnabled:false,reason:"disabled-by-config"};}return{isEnabled:true,reason:null};},[enabledFromConfig,featureEnabled,isLoading]);return commentsEnabled;}const CommentsOnboardingContext=createContext(null);const VERSION=1;const LOCAL_STORAGE_KEY="sanityStudio:comments:inspector:onboarding:dismissed:v".concat(VERSION);const setLocalStorage=value=>{try{window.localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(value));}catch(_){}};const getLocalStorage=()=>{try{const value=window.localStorage.getItem(LOCAL_STORAGE_KEY);return value?JSON.parse(value):false;}catch(_){return false;}};function CommentsOnboardingProvider(props){const{children}=props;const[dismissed,setDismissed]=useState(getLocalStorage());const handleDismiss=useCallback(()=>{setDismissed(true);setLocalStorage(true);},[setDismissed]);const ctxValue=useMemo(()=>({setDismissed:handleDismiss,isDismissed:dismissed}),[handleDismiss,dismissed]);return/* @__PURE__ */jsx(CommentsOnboardingContext.Provider,{value:ctxValue,children});}function useCommentsOnboarding(){const ctx=useContext(CommentsOnboardingContext);if(!ctx){throw new Error("useCommentsOnboarding: missing context value");}return ctx;}function createCommentsSet(comments){const commentsById=comments.reduce((acc,comment)=>({...acc,[comment._id]:comment}),{});return commentsById;}function commentsReducer(state,action){switch(action.type){case"COMMENTS_SET":{const commentsById=createCommentsSet(action.comments);return{...state,comments:commentsById};}case"COMMENT_ADDED":{const nextCommentResult=action.payload;const nextCommentValue=nextCommentResult;const nextComment={[nextCommentResult._id]:{...state.comments[nextCommentResult._id],...nextCommentValue,_state:nextCommentResult._state||void 0,// If the comment is created optimistically, it won't have a createdAt date.
// In that case, we'll use the current date.
// The correct date will be set when the comment is created on the server
// and the comment is received in the realtime listener.
_createdAt:nextCommentResult._createdAt||/* @__PURE__ */new Date().toISOString()}};const commentExists=state.comments&&state.comments[nextCommentResult._id];if(commentExists){return{...state,comments:{...state.comments,...nextComment}};}const nextComments={...(state.comments||{}),...nextComment};return{...state,comments:nextComments};}case"COMMENT_RECEIVED":{const nextCommentResult=action.payload;return{...state,comments:{...state.comments,[nextCommentResult._id]:nextCommentResult}};}case"COMMENT_DELETED":{const{[action.id]:_,...restComments}=state.comments;Object.keys(restComments).forEach(commentId=>{if(restComments[commentId].parentCommentId===action.id){delete restComments[commentId];}});return{...state,comments:restComments};}case"COMMENT_UPDATED":{const updatedComment=action.payload;const id=updatedComment._id;return{...state,comments:{...state.comments,[id]:{...state.comments[id],...updatedComment}}};}default:return state;}}const INITIAL_STATE={comments:{}};const LISTEN_OPTIONS={events:["welcome","mutation","reconnect"],includeResult:true,visibility:"query"};const SORT_FIELD="_createdAt";const SORT_ORDER="desc";const QUERY_FILTERS=['_type == "comment"',"target.document._ref == $documentId"];const QUERY_PROJECTION="{\n  _createdAt,\n  _id,\n  authorId,\n  lastEditedAt,\n  message,\n  parentCommentId,\n  status,\n  target,\n  threadId,\n}";const QUERY_SORT_ORDER="order(".concat(SORT_FIELD," ").concat(SORT_ORDER,")");const QUERY="*[".concat(QUERY_FILTERS.join(" && "),"] ").concat(QUERY_PROJECTION," | ").concat(QUERY_SORT_ORDER);function useCommentsStore(opts){const{client,documentId}=opts;const[state,dispatch]=useReducer(commentsReducer,INITIAL_STATE);const[loading,setLoading]=useState(client!==null);const[error,setError]=useState(null);const params=useMemo(()=>({documentId:getPublishedId(documentId)}),[documentId]);const initialFetch=useCallback(async()=>{if(!client){setLoading(false);return;}try{const res=await client.fetch(QUERY,params);dispatch({type:"COMMENTS_SET",comments:res});setLoading(false);}catch(err){setError(err);}},[client,params]);const handleListenerEvent=useCallback(async event=>{if(event.type==="welcome"){setLoading(true);await initialFetch();setLoading(false);}if(event.type==="reconnect"){setLoading(true);}if(event.type==="mutation"){if(event.transition==="appear"){const nextComment=event.result;if(nextComment){dispatch({type:"COMMENT_RECEIVED",payload:nextComment});}}if(event.transition==="disappear"){dispatch({type:"COMMENT_DELETED",id:event.documentId});}if(event.transition==="update"){const updatedComment=event.result;if(updatedComment){dispatch({type:"COMMENT_UPDATED",payload:updatedComment});}}}},[initialFetch]);const listener$=useMemo(()=>{if(!client)return of();const events$=client.observable.listen(QUERY,params,LISTEN_OPTIONS).pipe(catchError$1(err=>{setError(err);return of(err);}));return events$;},[client,params]);useEffect(()=>{const sub=listener$.subscribe(handleListenerEvent);return()=>{sub==null?void 0:sub.unsubscribe();};},[handleListenerEvent,listener$]);const commentsAsArray=useMemo(()=>Object.values(state.comments),[state.comments]);return{data:commentsAsArray,dispatch,error,loading};}function getSchemaField(schemaType,fieldPath){var _a;const paths=PathUtils.fromString(fieldPath);const firstPath=paths[0];if(firstPath&&isObjectSchemaType(schemaType)){const field=(_a=schemaType==null?void 0:schemaType.fields)==null?void 0:_a.find(f=>f.name===firstPath);if(field){const nextPath=PathUtils.toString(paths.slice(1));if(nextPath){return getSchemaField(field.type,nextPath);}return field;}}return void 0;}function findArrayItemIndex(array,pathSegment){if(typeof pathSegment==="number"){return pathSegment;}const index=findIndex(array,pathSegment);return index===-1?false:index;}function buildCommentBreadcrumbs(props){const{currentUser,schemaType,fieldPath,documentValue}=props;const paths=PathUtils.fromString(fieldPath);const fieldPaths=[];let currentSchemaType=null;paths.forEach((seg,index)=>{var _a,_b,_c;const currentPath=paths.slice(0,index+1);const previousPath=paths.slice(0,index);const field=getSchemaField(schemaType,PathUtils.toString(currentPath));const isKeySegment=seg.hasOwnProperty("_key");const parentValue=getValueAtPath(documentValue,previousPath);const currentValue=getValueAtPath(documentValue,currentPath);const conditionalContext={document:documentValue,currentUser,parent:parentValue,value:currentValue};if(isKeySegment&&Array.isArray(parentValue)){const arrayItemIndex=findArrayItemIndex(parentValue,seg);const isNumber=typeof arrayItemIndex==="number";fieldPaths.push({invalid:arrayItemIndex===false,isArrayItem:true,title:isNumber?"#".concat(Number(arrayItemIndex)+1):"Unknown array item"});return;}if(field==null?void 0:field.type){const hidden=resolveConditionalProperty(field.type.hidden,conditionalContext);fieldPaths.push({invalid:hidden,isArrayItem:false,title:getSchemaTypeTitle(field.type)});currentSchemaType=field.type;return;}if(isArraySchemaType(currentSchemaType)){const arrayValue=getValueAtPath(documentValue,previousPath);const objectType=arrayValue==null?void 0:arrayValue._type;const objectField=(_a=currentSchemaType==null?void 0:currentSchemaType.of)==null?void 0:_a.find(type=>type.name===objectType);const currentField=(_b=objectField==null?void 0:objectField.fields)==null?void 0:_b.find(f=>f.name===seg);if(!currentField){fieldPaths.push({invalid:true,isArrayItem:false,title:"Unknown field"});return;}const currentTitle=getSchemaTypeTitle(currentField==null?void 0:currentField.type);const objectFieldHidden=resolveConditionalProperty((_c=objectField==null?void 0:objectField.type)==null?void 0:_c.hidden,conditionalContext);const currentFieldHidden=resolveConditionalProperty(currentField==null?void 0:currentField.type.hidden,conditionalContext);const isHidden=objectFieldHidden||currentFieldHidden;fieldPaths.push({invalid:isHidden,isArrayItem:false,title:currentTitle});currentSchemaType=currentField==null?void 0:currentField.type;return;}fieldPaths.push({invalid:true,isArrayItem:false,title:"Unknown field"});});return fieldPaths;}function buildCommentThreadItems(props){const{comments,currentUser,documentValue,schemaType}=props;const parentComments=comments==null?void 0:comments.filter(c=>!c.parentCommentId);const items=parentComments.map(parentComment=>{const crumbs=buildCommentBreadcrumbs({currentUser,documentValue,fieldPath:parentComment.target.path.field,schemaType});const hasInvalidBreadcrumb=crumbs.some(bc=>bc.invalid);if(hasInvalidBreadcrumb)return void 0;const replies=comments==null?void 0:comments.filter(r=>r.parentCommentId===parentComment._id);const commentsCount=[parentComment,...replies].length;return{breadcrumbs:crumbs,commentsCount,fieldPath:parentComment.target.path.field,parentComment,replies,threadId:parentComment.threadId};}).filter(Boolean);return items;}const EMPTY_ARRAY=[];const EMPTY_COMMENTS_DATA={open:EMPTY_ARRAY,resolved:EMPTY_ARRAY};const EMPTY_COMMENTS={data:EMPTY_COMMENTS_DATA,error:null,loading:false};const EMPTY_MENTION_OPTIONS={data:[],error:null,loading:false};const noop=async()=>{await Promise.resolve();};const noopOperation={execute:noop};const COMMENTS_DISABLED_CONTEXT={comments:EMPTY_COMMENTS,create:noopOperation,edit:noopOperation,getComment:()=>void 0,getCommentPath:()=>null,isRunningSetup:false,mentionOptions:EMPTY_MENTION_OPTIONS,remove:noopOperation,selectedPath:null,setSelectedPath:noop,setStatus:noop,status:"open",update:noopOperation};const CommentsProvider=memo(function CommentsProvider2(props){const{children,documentId,documentType}=props;const{isEnabled}=useCommentsEnabled({documentId,documentType});if(!isEnabled){return/* @__PURE__ */jsx(CommentsContext.Provider,{value:COMMENTS_DISABLED_CONTEXT,children});}return/* @__PURE__ */jsx(CommentsProviderInner,{...props});});const CommentsProviderInner=memo(function CommentsProviderInner2(props){const{children,documentId,documentType}=props;const[selectedPath,setSelectedPath]=useState(null);const[status,setStatus]=useState("open");const{client,runSetup,isRunningSetup}=useCommentsSetup();const publishedId=getPublishedId(documentId);const editState=useEditState(publishedId,documentType,"low");const documentValue=useMemo(()=>{return editState.draft||editState.published;},[editState.draft,editState.published]);const{dispatch,data=EMPTY_ARRAY,error,loading}=useCommentsStore({documentId:publishedId,client});const mentionOptions=useMentionOptions(useMemo(()=>({documentValue}),[documentValue]));const schemaType=useSchema().get(documentType);const currentUser=useCurrentUser();const{name:workspaceName,dataset,projectId}=useWorkspace();const threadItemsByStatus=useMemo(()=>{if(!schemaType||!currentUser)return EMPTY_COMMENTS_DATA;const sorted=orderBy(data,["_createdAt"],["desc"]);const items=buildCommentThreadItems({comments:sorted,schemaType,currentUser,documentValue});return{open:items.filter(item=>item.parentComment.status==="open"),resolved:items.filter(item=>item.parentComment.status==="resolved")};},[currentUser,data,documentValue,schemaType]);const getThreadLength=useCallback(threadId=>{return threadItemsByStatus.open.filter(item=>item.threadId===threadId).length;},[threadItemsByStatus.open]);const getComment=useCallback(id=>data==null?void 0:data.find(c=>c._id===id),[data]);const getCommentPath=useCallback(id=>{const comment=getComment(id);if(!comment)return null;return comment.target.path.field;},[getComment]);const handleSetSelectedPath=useCallback(nextPath=>{if(nextPath===null){setSelectedPath(null);return;}setTimeout(()=>{setSelectedPath(nextPath);});},[]);const handleOnCreate=useCallback(async payload=>{var _a,_b;const hasError=((_b=(_a=data==null?void 0:data.find(c=>c._id===payload._id))==null?void 0:_a._state)==null?void 0:_b.type)==="createError";dispatch({type:"COMMENT_ADDED",payload:{...payload,_state:hasError?{type:"createRetrying"}:void 0}});},[data,dispatch]);const handleOnUpdate=useCallback((id,payload)=>{dispatch({type:"COMMENT_UPDATED",payload:{_id:id,...payload}});},[dispatch]);const handleOnEdit=useCallback((id,payload)=>{dispatch({type:"COMMENT_UPDATED",payload:{_id:id,...payload}});},[dispatch]);const handleOnCreateError=useCallback((id,err)=>{dispatch({type:"COMMENT_UPDATED",payload:{_id:id,_state:{error:err,type:"createError"}}});},[dispatch]);const{operation}=useCommentOperations(useMemo(()=>({client,currentUser,dataset,documentId:publishedId,documentType,projectId,schemaType,workspace:workspaceName,getThreadLength,// This function runs when the first comment creation is executed.
// It is used to create the addon dataset and configure a client for
// the addon dataset.
runSetup,// The following callbacks runs when the comment operations are executed.
// They are used to update the local state of the comments immediately after
// a comment operation has been executed. This is done to avoid waiting for
// the real time listener to update the comments and make the UI feel more
// responsive. The comment will be updated again when we receive an mutation
// event from the real time listener.
onCreate:handleOnCreate,onCreateError:handleOnCreateError,onEdit:handleOnEdit,onUpdate:handleOnUpdate}),[client,currentUser,dataset,publishedId,documentType,projectId,schemaType,workspaceName,getThreadLength,runSetup,handleOnCreate,handleOnCreateError,handleOnEdit,handleOnUpdate]));const ctxValue=useMemo(()=>({setSelectedPath:handleSetSelectedPath,selectedPath,isRunningSetup,status,setStatus,getComment,getCommentPath,comments:{data:threadItemsByStatus,error,loading:loading||isRunningSetup},create:{execute:operation.create},remove:{execute:operation.remove},edit:{execute:operation.edit},update:{execute:operation.update},mentionOptions}),[handleSetSelectedPath,selectedPath,isRunningSetup,status,getComment,getCommentPath,threadItemsByStatus,error,loading,operation.create,operation.remove,operation.edit,operation.update,mentionOptions]);return/* @__PURE__ */jsx(CommentsContext.Provider,{value:ctxValue,children});});const CommentsSetupContext=createContext(null);function CommentsSetupProvider(props){const{children}=props;const{dataset,projectId}=useWorkspace();const originalClient=useClient(DEFAULT_STUDIO_CLIENT_OPTIONS);const[addonDatasetClient,setAddonDatasetClient]=useState(null);const[isRunningSetup,setIsRunningSetup]=useState(false);const getAddonDatasetName=useCallback(async()=>{var _a;const res=await originalClient.withConfig({apiVersion:"vX"}).request({uri:"/projects/".concat(projectId,"/datasets?datasetProfile=comments&addonFor=").concat(dataset),tag:"sanity.studio"});return(_a=res==null?void 0:res[0])==null?void 0:_a.name;},[dataset,originalClient,projectId]);const handleCreateClient=useCallback(addonDatasetName=>{const client=originalClient.withConfig({apiVersion:"v2022-05-09",dataset:addonDatasetName,projectId,requestTagPrefix:"sanity.studio",useCdn:false,withCredentials:true});return client;},[originalClient,projectId]);const handleRunSetup=useCallback(async comment=>{setIsRunningSetup(true);try{const addonDatasetName=await getAddonDatasetName();if(addonDatasetName){const client=handleCreateClient(addonDatasetName);setAddonDatasetClient(client);await client.create(comment);setIsRunningSetup(false);return;}}catch(_){}try{const res=await originalClient.withConfig({apiVersion:"vX"}).request({uri:"/comments/".concat(dataset,"/setup"),method:"POST"});const datasetName=res==null?void 0:res.datasetName;if(!datasetName){setIsRunningSetup(false);return;}const client=handleCreateClient(datasetName);setAddonDatasetClient(client);await client.create(comment);}catch(err){throw err;}finally{setIsRunningSetup(false);}},[dataset,getAddonDatasetName,handleCreateClient,originalClient]);useEffect(()=>{getAddonDatasetName().then(addonDatasetName=>{if(!addonDatasetName)return;const client=handleCreateClient(addonDatasetName);setAddonDatasetClient(client);});},[getAddonDatasetName,handleCreateClient]);const ctxValue=useMemo(()=>({client:addonDatasetClient,runSetup:handleRunSetup,isRunningSetup}),[addonDatasetClient,handleRunSetup,isRunningSetup]);return/* @__PURE__ */jsx(CommentsSetupContext.Provider,{value:ctxValue,children});}const Root$6=styled(Card)({position:"relative",zIndex:1,lineHeight:0,"&:after":{content:'""',display:"block",position:"absolute",left:0,bottom:-1,right:0,borderBottom:"1px solid var(--card-border-color)",opacity:0.5}});const CommentsInspectorHeader=forwardRef(function CommentsInspectorHeader2(props,ref){const{onClose,onViewChange,view}=props;const handleSetOpenView=useCallback(()=>onViewChange("open"),[onViewChange]);const handleSetResolvedView=useCallback(()=>onViewChange("resolved"),[onViewChange]);return/* @__PURE__ */jsx(Root$6,{ref,children:/* @__PURE__ */jsxs(Flex,{padding:2,children:[/* @__PURE__ */jsxs(Flex,{align:"center",flex:1,gap:2,paddingY:2,padding:3,children:[/* @__PURE__ */jsx(Text,{as:"h1",size:1,weight:"semibold",children:"Comments"}),/* @__PURE__ */jsx(BetaBadge,{})]}),/* @__PURE__ */jsxs(Flex,{flex:"none",padding:1,gap:2,children:[/* @__PURE__ */jsx(MenuButton,{id:"comment-status-menu-button",button:/* @__PURE__ */jsx(Button,{text:startCase(view),fontSize:1,padding:2,mode:"bleed",iconRight:ChevronDownIcon,space:2}),menu:/* @__PURE__ */jsxs(Menu,{style:{width:"180px"},children:[/* @__PURE__ */jsx(MenuItem,{fontSize:1,iconRight:view==="open"?CheckmarkIcon:void 0,onClick:handleSetOpenView,text:"Open comments"}),/* @__PURE__ */jsx(MenuItem,{fontSize:1,iconRight:view==="resolved"?CheckmarkIcon:void 0,onClick:handleSetResolvedView,text:"Resolved comments"})]}),popover:{placement:"bottom-end"}}),/* @__PURE__ */jsx(Button,{"aria-label":"Close comments",fontSize:1,icon:DoubleChevronRightIcon,mode:"bleed",onClick:onClose,padding:2})]})]})});});function CommentsInspector(props){const{onClose}=props;const[showDeleteDialog,setShowDeleteDialog]=useState(false);const[commentToDelete,setCommentToDelete]=useState(null);const[deleteLoading,setDeleteLoading]=useState(false);const[deleteError,setDeleteError]=useState(null);const commentsListHandleRef=useRef(null);const currentUser=useCurrentUser();const{params,createPathWithParams,setParams}=usePaneRouter();const uniqueParams=useUnique(params)||EMPTY_PARAMS$2;const commentIdParamRef=useRef(uniqueParams==null?void 0:uniqueParams.comment);const pushToast=useToast().push;const{onPathOpen,ready}=useDocumentPane();const{isDismissed,setDismissed}=useCommentsOnboarding();const{comments,create,edit,getComment,getCommentPath,isRunningSetup,mentionOptions,remove,selectedPath,setSelectedPath,setStatus,status,update}=useComments();const currentComments=useMemo(()=>comments.data[status],[comments,status]);const loading=useMemo(()=>{return comments.loading||!ready;},[comments.loading,ready]);const handleChangeView=useCallback(nextView=>{setStatus(nextView);setSelectedPath(null);},[setSelectedPath,setStatus]);const handleCloseInspector=useCallback(()=>{onClose();setSelectedPath(null);},[onClose,setSelectedPath]);const handleCopyLink=useCallback(id=>{const path=createPathWithParams({...params,comment:id});const url="".concat(window.location.origin).concat(path);navigator.clipboard.writeText(url).then(()=>{pushToast({closable:true,status:"info",title:"Copied link to clipboard"});}).catch(()=>{pushToast({closable:true,status:"error",title:"Unable to copy link to clipboard"});});},[createPathWithParams,params,pushToast]);const handleCreateRetry=useCallback(id=>{const comment=getComment(id);if(!comment)return;create.execute({fieldPath:comment.target.path.field,id:comment._id,message:comment.message,parentCommentId:comment.parentCommentId,status:comment.status,threadId:comment.threadId});},[create,getComment]);const closeDeleteDialog=useCallback(()=>{if(deleteLoading)return;setShowDeleteDialog(false);setCommentToDelete(null);},[deleteLoading]);const handlePathSelect=useCallback((path,threadId)=>{onPathOpen(path);setSelectedPath({fieldPath:PathUtils.toString(path),origin:"inspector",threadId:threadId||null});},[onPathOpen,setSelectedPath]);const handleNewThreadCreate=useCallback(payload=>{create.execute(payload);setSelectedPath({fieldPath:payload.fieldPath,origin:"inspector",threadId:payload.threadId});},[create,setSelectedPath]);const handleReply=useCallback(payload=>{create.execute(payload);},[create]);const handleEdit=useCallback((id,payload)=>{edit.execute(id,payload);},[edit]);const handleStatusChange=useCallback((id,nextStatus)=>{update.execute(id,{status:nextStatus});},[update]);const onDeleteStart=useCallback(id=>{var _a;const parent=currentComments.find(c=>{var _a2;return((_a2=c.parentComment)==null?void 0:_a2._id)===id;});const isParent=Boolean(parent&&((_a=parent==null?void 0:parent.replies)==null?void 0:_a.length)>0);setShowDeleteDialog(true);setCommentToDelete({commentId:id,isParent});},[currentComments]);const handleDeleteConfirm=useCallback(async id=>{try{setDeleteLoading(true);await remove.execute(id);closeDeleteDialog();}catch(err){setDeleteError(err);}finally{setDeleteLoading(false);}},[closeDeleteDialog,remove]);const handleScrollToComment=useCallback((id,fieldPath)=>{if(fieldPath){requestAnimationFrame(()=>{var _a;setSelectedPath({fieldPath,origin:"inspector",threadId:null});(_a=commentsListHandleRef.current)==null?void 0:_a.scrollToComment(id);setParams({...params,comment:void 0});commentIdParamRef.current=void 0;});}},[params,setParams,setSelectedPath]);useEffect(()=>{const path=getCommentPath(commentIdParamRef.current||"");if(path&&!loading&&commentIdParamRef.current){handleScrollToComment(commentIdParamRef.current,path);}},[getCommentPath,handleScrollToComment,loading]);return/* @__PURE__ */jsxs(Fragment$1,{children:[commentToDelete&&showDeleteDialog&&/* @__PURE__ */jsx(CommentDeleteDialog,{...commentToDelete,error:deleteError,loading:deleteLoading,onClose:closeDeleteDialog,onConfirm:handleDeleteConfirm}),/* @__PURE__ */jsxs(Flex,{direction:"column",overflow:"hidden",height:"fill",children:[/* @__PURE__ */jsx(CommentsOnboardingPopover,{onDismiss:setDismissed,open:!isDismissed,placement:"left-start",children:/* @__PURE__ */jsx(CommentsInspectorHeader,{onClose:handleCloseInspector,onViewChange:handleChangeView,view:status})}),currentUser&&/* @__PURE__ */jsx(CommentsList,{comments:currentComments,currentUser,error:comments.error,loading,mentionOptions,onCopyLink:handleCopyLink,onCreateRetry:handleCreateRetry,onDelete:onDeleteStart,onEdit:handleEdit,onNewThreadCreate:handleNewThreadCreate,onPathSelect:handlePathSelect,onReply:handleReply,onStatusChange:handleStatusChange,readOnly:isRunningSetup,ref:commentsListHandleRef,selectedPath,status})]})]});}function useMenuItem$1(props){const{documentId,documentType}=props;const{isEnabled}=useCommentsEnabled({documentId,documentType});return{hidden:!isEnabled,icon:CommentIcon$1,showAsAction:true,title:"Comments"};}const commentsInspector=defineDocumentInspector({name:COMMENTS_INSPECTOR_NAME,component:CommentsInspector,useMenuItem:useMenuItem$1});var __freeze$7=Object.freeze;var __defProp$m=Object.defineProperty;var __template$7=(cooked,raw)=>__freeze$7(__defProp$m(cooked,"raw",{value:__freeze$7(raw||cooked.slice())}));var _a$7,_b$3;const TOOLTIP_DELAY={open:500};const TooltipText=styled(Text)(_a$7||(_a$7=__template$7(["\n  width: max-content;\n"])));const ContentStack=styled(Stack)(_b$3||(_b$3=__template$7(["\n  width: 320px;\n"])));function CommentFieldButton(props){const{count,currentUser,fieldTitle,isRunningSetup,mentionOptions,onChange,onClick,onCommentAdd,onDiscard,onInputKeyDown,open,setOpen,value}=props;const[popoverElement,setPopoverElement]=useState(null);const commentInputHandle=useRef(null);const hasComments=Boolean(count>0);const closePopover=useCallback(()=>setOpen(false),[setOpen]);const handleSubmit=useCallback(()=>{onCommentAdd();closePopover();},[closePopover,onCommentAdd]);const hasValue=useMemo(()=>hasCommentMessageValue(value),[value]);const startDiscard=useCallback(()=>{var _a2;if(!hasValue){closePopover();return;}(_a2=commentInputHandle.current)==null?void 0:_a2.discardDialogController.open();},[closePopover,hasValue]);const handleInputKeyDown=useCallback(event=>{if(event.isDefaultPrevented()){return;}if(event.key==="Escape"){event.preventDefault();event.stopPropagation();startDiscard();}if(onInputKeyDown)onInputKeyDown(event);},[onInputKeyDown,startDiscard]);const handleDiscardCancel=useCallback(()=>{var _a2;(_a2=commentInputHandle.current)==null?void 0:_a2.discardDialogController.close();},[]);const handleDiscardConfirm=useCallback(()=>{var _a2;(_a2=commentInputHandle.current)==null?void 0:_a2.discardDialogController.close();closePopover();onDiscard();},[closePopover,onDiscard]);useClickOutside(startDiscard,[popoverElement]);const placeholder=/* @__PURE__ */jsxs(Fragment,{children:["Add comment to ",/* @__PURE__ */jsx("b",{children:fieldTitle})]});if(!hasComments){const content=/* @__PURE__ */jsx(ContentStack,{padding:2,space:4,children:/* @__PURE__ */jsx(CommentInput,{currentUser,focusLock:true,focusOnMount:true,mentionOptions,onChange,onDiscardCancel:handleDiscardCancel,onDiscardConfirm:handleDiscardConfirm,onKeyDown:handleInputKeyDown,onSubmit:handleSubmit,placeholder,readOnly:isRunningSetup,ref:commentInputHandle,value})});return/* @__PURE__ */jsx(Popover,{constrainSize:true,content,fallbackPlacements:["left-start"],open,placement:"bottom-end",portal:true,ref:setPopoverElement,children:/* @__PURE__ */jsx("div",{children:/* @__PURE__ */jsx(Tooltip,{delay:TOOLTIP_DELAY,disabled:open,portal:true,placement:"top",content:/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{size:1,children:"Add comment"})}),children:/* @__PURE__ */jsx(Button,{"aria-label":"Add comment",disabled:isRunningSetup,fontSize:1,icon:AddCommentIcon,mode:"bleed",onClick,padding:2,selected:open})})})});}return/* @__PURE__ */jsx(Tooltip,{portal:true,placement:"top",content:/* @__PURE__ */jsx(Box,{padding:2,sizing:"border",children:/* @__PURE__ */jsxs(TooltipText,{size:1,children:["View comment",count>1?"s":""]})}),delay:TOOLTIP_DELAY,fallbackPlacements:["bottom"],children:/* @__PURE__ */jsx(Button,{"aria-label":"Open comments",mode:"bleed",onClick,padding:2,children:/* @__PURE__ */jsxs(Flex,{align:"center",gap:2,children:[/* @__PURE__ */jsx(Text,{size:1,children:/* @__PURE__ */jsx(CommentIcon,{})}),/* @__PURE__ */jsx(Text,{size:0,children:count>9?"9+":count})]})})});}var __freeze$6=Object.freeze;var __defProp$l=Object.defineProperty;var __template$6=(cooked,raw)=>__freeze$6(__defProp$l(cooked,"raw",{value:__freeze$6(raw||cooked.slice())}));var _a$6,_b$2;const HIGHLIGHT_BLOCK_VARIANTS={initial:{opacity:0},animate:{opacity:1},exit:{opacity:0}};function CommentField(props){const{documentId,documentType}=useDocumentPane();const{isEnabled}=useCommentsEnabled({documentId,documentType});if(!isEnabled){return props.renderDefault(props);}return/* @__PURE__ */jsx(CommentFieldInner,{...props});}const SCROLL_INTO_VIEW_OPTIONS={behavior:"smooth",block:"start",inline:"nearest"};const HighlightDiv=styled(motion.div)(_ref73=>{let{theme}=_ref73;const{radius,space,color}=theme.sanity;const bg=hues.blue[color.dark?900:50].hex;return css(_a$6||(_a$6=__template$6(["\n    mix-blend-mode: ",";\n    border-radius: ","px;\n    top: -","px;\n    left: -","px;\n    bottom: -","px;\n    right: -","px;\n    pointer-events: none;\n    position: absolute;\n    z-index: 1;\n    width: calc(100% + ","px);\n    height: calc(100% + ","px);\n    background-color: ",";\n  "])),color.dark?"screen":"multiply",radius[3],space[2],space[2],space[2],space[2],space[2]*2,space[2]*2,bg);});const FieldStack=styled(Stack)(_b$2||(_b$2=__template$6(["\n  position: relative;\n"])));function CommentFieldInner(props){const[open,setOpen]=useState(false);const[value,setValue]=useState(null);const[shouldScrollToThread,setShouldScrollToThread]=useState(false);const rootElementRef=useRef(null);const{element:boundaryElement}=useBoundaryElement();const{openInspector,inspector}=useDocumentPane();const currentUser=useCurrentUser();const{comments,create,isRunningSetup,mentionOptions,selectedPath,setSelectedPath,setStatus,status}=useComments();const inView=useInView(rootElementRef);const fieldTitle=useMemo(()=>getSchemaTypeTitle(props.schemaType),[props.schemaType]);const currentComments=useMemo(()=>comments.data[status],[comments.data,status]);const[shouldHighlight,setShouldHighlight]=useState(false);const commentsInspectorOpen=useMemo(()=>{return(inspector==null?void 0:inspector.name)===COMMENTS_INSPECTOR_NAME;},[inspector==null?void 0:inspector.name]);const isSelected=useMemo(()=>{if(!commentsInspectorOpen)return false;if((selectedPath==null?void 0:selectedPath.origin)==="field")return false;return(selectedPath==null?void 0:selectedPath.fieldPath)===PathUtils.toString(props.path);},[commentsInspectorOpen,props.path,selectedPath==null?void 0:selectedPath.fieldPath,selectedPath==null?void 0:selectedPath.origin]);const currentThreadId=useMemo(()=>{var _a2;const pathString=PathUtils.toString(props.path);return(_a2=currentComments.find(comment=>comment.fieldPath===pathString))==null?void 0:_a2.threadId;},[currentComments,props.path]);const count=useMemo(()=>{const stringPath=PathUtils.toString(props.path);const commentsCount=comments.data.open.map(c=>c.fieldPath===stringPath?c.commentsCount:0).reduce((acc,val)=>acc+val,0);return commentsCount||0;},[comments.data.open,props.path]);const hasComments=Boolean(count>0);const handleScrollToThread=useCallback(threadId=>{if(commentsInspectorOpen&&shouldScrollToThread&&threadId){const node=document.querySelector('[data-group-id="'.concat(threadId,'"]'));if(node){node.scrollIntoView(SCROLL_INTO_VIEW_OPTIONS);setShouldScrollToThread(false);}}},[shouldScrollToThread,commentsInspectorOpen]);const handleOpenInspector=useCallback(()=>openInspector(COMMENTS_INSPECTOR_NAME),[openInspector]);const handleClick=useCallback(()=>{if(hasComments&&status==="resolved"){setStatus("open");}if(hasComments){setOpen(false);openInspector(COMMENTS_INSPECTOR_NAME);}else{setOpen(v=>!v);}if(currentThreadId){setShouldScrollToThread(true);handleScrollToThread(currentThreadId);setSelectedPath({fieldPath:PathUtils.toString(props.path),origin:"field",threadId:null});}},[hasComments,status,currentThreadId,setStatus,openInspector,handleScrollToThread,setSelectedPath,props.path]);const handleCommentAdd=useCallback(()=>{if(value){const newThreadId=uuid();const nextComment={fieldPath:PathUtils.toString(props.path),message:value,parentCommentId:void 0,status:"open",threadId:newThreadId};create.execute(nextComment);handleOpenInspector();setStatus("open");setValue(null);requestAnimationFrame(()=>{setSelectedPath({fieldPath:PathUtils.toString(props.path),origin:"field",threadId:newThreadId});setShouldScrollToThread(true);handleScrollToThread(newThreadId);});}},[create,handleOpenInspector,handleScrollToThread,props.path,setSelectedPath,setStatus,value]);const handleDiscard=useCallback(()=>setValue(null),[]);useEffect(()=>{if(currentThreadId){handleScrollToThread(currentThreadId);}},[currentThreadId,handleScrollToThread]);const scrollIntoViewIfNeededOpts=useMemo(()=>({...SCROLL_INTO_VIEW_OPTIONS,boundary:boundaryElement,scrollMode:"if-needed",block:"start"}),[boundaryElement]);useEffect(()=>{if(isSelected&&rootElementRef.current){scrollIntoView(rootElementRef.current,scrollIntoViewIfNeededOpts);}},[boundaryElement,isSelected,props.path,scrollIntoViewIfNeededOpts,selectedPath]);useEffect(()=>{const showHighlight=inView&&isSelected;setShouldHighlight(showHighlight);const timer=setTimeout(()=>{setShouldHighlight(false);},1200);return()=>clearTimeout(timer);},[currentComments,inView,isSelected,props.path,selectedPath]);const internalComments=useMemo(()=>({button:currentUser&&/* @__PURE__ */jsx(CommentFieldButton,{count:Number(count),currentUser,fieldTitle,isRunningSetup,mentionOptions,onChange:setValue,onClick:handleClick,onCommentAdd:handleCommentAdd,onDiscard:handleDiscard,open,setOpen,value}),hasComments,isAddingComment:open}),[currentUser,count,fieldTitle,mentionOptions,handleClick,handleCommentAdd,handleDiscard,open,value,isRunningSetup,hasComments]);return/* @__PURE__ */jsxs(FieldStack,{ref:rootElementRef,children:[/* @__PURE__ */jsx(AnimatePresence,{children:shouldHighlight&&/* @__PURE__ */jsx(HighlightDiv,{animate:"animate",exit:"exit",initial:"initial",variants:HIGHLIGHT_BLOCK_VARIANTS})}),props.renderDefault({...props,// eslint-disable-next-line camelcase
__internal_comments:internalComments})]});}function CommentsLayout(props){return/* @__PURE__ */jsx(CommentsSetupProvider,{children:/* @__PURE__ */jsx(CommentsOnboardingProvider,{children:props.renderDefault(props)})});}const comments=definePlugin({name:"sanity/desk/comments",document:{inspectors:[commentsInspector]},form:{components:{field:CommentField}},studio:{components:{layout:CommentsLayout}}});const DeskToolContext=createContext(null);function useDeskTool(){const deskTool=useContext(DeskToolContext);if(!deskTool)throw new Error("DeskTool: missing context value");return deskTool;}const TIMELINE_LABELS={create:"created",delete:"deleted",discardDraft:"discarded draft",initial:"created",editDraft:"edited",editLive:"live edited",publish:"published",unpublish:"unpublished"};const TIMELINE_ICON_COMPONENTS={create:AddCircleIcon,delete:TrashIcon,discardDraft:CloseIcon,initial:AddCircleIcon,editDraft:EditIcon,editLive:EditIcon,publish:PublishIcon,unpublish:UnpublishIcon};function formatTimelineEventLabel(type){return TIMELINE_LABELS[type];}function getTimelineEventIconComponent(type){return TIMELINE_ICON_COMPONENTS[type];}function UserAvatarStack(_ref74){let{maxLength,userIds}=_ref74;return/* @__PURE__ */jsx(AvatarStack,{maxLength,children:userIds.map(userId=>/* @__PURE__ */jsx(UserAvatar,{user:userId,withTooltip:true},userId))});}var __freeze$5=Object.freeze;var __defProp$k=Object.defineProperty;var __template$5=(cooked,raw)=>__freeze$5(__defProp$k(cooked,"raw",{value:__freeze$5(raw||cooked.slice())}));var _a$5,_b$1,_c$1,_d$1,_e,_f,_g;const IconWrapper=styled(Flex)(_ref75=>{let{theme}=_ref75;var _a2;const borderColor=(_a2=theme.sanity.color.base.skeleton)==null?void 0:_a2.from;return css(_a$5||(_a$5=__template$5(["\n    --timeline-hairline-width: 1px;\n    position: relative;\n    z-index: 2;\n    margin: 0;\n    padding: 0;\n\n    &::before {\n      position: absolute;\n      content: '';\n      height: 100%;\n      width: var(--timeline-hairline-width);\n      background: ",";\n      top: 0;\n      left: calc((100% - var(--timeline-hairline-width)) / 2);\n      z-index: 1;\n    }\n  "])),borderColor);});const Root$5=styled(Button)(_ref76=>{let{$selected,$disabled}=_ref76;return css(_d$1||(_d$1=__template$5(["\n    position: relative;\n    width: 100%;\n\n    /* Line styling */\n    &[data-first] ","::before {\n      height: 50%;\n      top: unset;\n      bottom: 0;\n    }\n\n    &[data-last] ","::before {\n      height: 50%;\n    }\n\n    ","\n\n    ","\n  "])),IconWrapper,IconWrapper,$selected&&css(_b$1||(_b$1=__template$5(["\n      ","::before {\n        background: transparent;\n      }\n    "])),IconWrapper),$disabled&&css(_c$1||(_c$1=__template$5(["\n      cursor: not-allowed;\n    "]))));});const IconBox=styled(Box)(_e||(_e=__template$5(["\n  background: var(--card-bg-color);\n  border-radius: 50px;\n  position: relative;\n  z-index: 2;\n"])));const EventLabel=styled(Text)(_f||(_f=__template$5(["\n  text-transform: capitalize;\n"])));const TimestampBox=styled(Box)(_g||(_g=__template$5(["\n  min-width: 1rem;\n  margin-left: ",";\n"])),_ref77=>{let{theme}=_ref77;return"-".concat(rem(theme.sanity.space[1]));});const TIMELINE_ITEM_EVENT_TONE={initial:"primary",create:"primary",publish:"positive",editLive:"caution",editDraft:"caution",unpublish:"critical",discardDraft:"critical",delete:"critical",withinSelection:"primary"};function TimelineItem(_ref78){let{chunk,isFirst,isLast,isLatest,isSelected,onSelect,timestamp,type}=_ref78;const iconComponent=getTimelineEventIconComponent(type);const authorUserIds=Array.from(chunk.authors);const isSelectable=type!=="delete";const formattedTimestamp=useMemo(()=>{const parsedDate=new Date(timestamp);const formattedDate=format(parsedDate,"MMM d, yyyy, hh:mm a");return formattedDate;},[timestamp]);const handleClick=useCallback(evt=>{evt.preventDefault();evt.stopPropagation();if(isSelectable){onSelect(chunk);}},[onSelect,chunk,isSelectable]);return/* @__PURE__ */jsx(Root$5,{$selected:isSelected,$disabled:!isSelectable,"data-chunk-id":chunk.id,"data-first":isFirst?true:void 0,"data-last":isLast?true:void 0,"data-ui":"timelineItem",mode:isSelected?"default":"bleed",onClick:handleClick,padding:0,radius:2,tone:isSelected?"primary":TIMELINE_ITEM_EVENT_TONE[chunk.type],children:/* @__PURE__ */jsx(Box,{paddingX:2,children:/* @__PURE__ */jsxs(Flex,{align:"stretch",children:[/* @__PURE__ */jsx(IconWrapper,{align:"center",children:/* @__PURE__ */jsx(IconBox,{padding:2,children:/* @__PURE__ */jsx(Text,{size:2,children:iconComponent&&createElement(iconComponent)})})}),/* @__PURE__ */jsxs(Stack,{space:2,margin:2,children:[isLatest&&/* @__PURE__ */jsx(Flex,{children:/* @__PURE__ */jsx(Card,{padding:1,radius:2,shadow:1,tone:isSelected?"primary":TIMELINE_ITEM_EVENT_TONE[chunk.type],children:/* @__PURE__ */jsx(Label,{muted:true,size:0,children:"Latest"})})}),/* @__PURE__ */jsx(Box,{children:/* @__PURE__ */jsx(EventLabel,{size:1,weight:"medium",children:formatTimelineEventLabel(type)||/* @__PURE__ */jsx("code",{children:type})})}),/* @__PURE__ */jsx(TimestampBox,{paddingX:1,children:/* @__PURE__ */jsx(Text,{size:0,muted:true,children:formattedTimestamp})})]}),/* @__PURE__ */jsx(Flex,{flex:1,justify:"flex-end",align:"center",children:/* @__PURE__ */jsx(UserAvatarStack,{maxLength:3,userIds:authorUserIds})})]})})});}var __freeze$4=Object.freeze;var __defProp$j=Object.defineProperty;var __template$4=(cooked,raw)=>__freeze$4(__defProp$j(cooked,"raw",{value:__freeze$4(raw||cooked.slice())}));var _a$4,_b,_c,_d;const StackWrapper=styled(Stack)(_a$4||(_a$4=__template$4(["\n  max-width: 200px;\n"])));const ListWrapper=styled(Flex)(_b||(_b=__template$4(["\n  max-height: calc(100vh - 198px);\n  min-width: 244px;\n"])));const Root$4=styled(Box)(_ref79=>{let{$visible}=_ref79;return css(_d||(_d=__template$4(["\n    opacity: 0;\n    pointer-events: none;\n\n    ","\n  "])),$visible&&css(_c||(_c=__template$4(["\n      opacity: 1;\n      pointer-events: auto;\n    "]))));});const Timeline=_ref80=>{let{chunks,disabledBeforeFirstChunk,hasMoreChunks,lastChunk,onLoadMore,onSelect,firstChunk}=_ref80;const[mounted,setMounted]=useState(false);const filteredChunks=useMemo(()=>{return chunks.filter(c=>{if(disabledBeforeFirstChunk&&firstChunk){return c.index<firstChunk.index;}return true;});},[chunks,disabledBeforeFirstChunk,firstChunk]);const selectedIndex=useMemo(()=>(lastChunk==null?void 0:lastChunk.id)?filteredChunks.findIndex(c=>c.id===lastChunk.id):-1,[lastChunk==null?void 0:lastChunk.id,filteredChunks]);const renderItem=useCallback((chunk,_ref81)=>{let{activeIndex}=_ref81;const isFirst=activeIndex===0;const isLast=filteredChunks&&activeIndex===filteredChunks.length-1||false;return/* @__PURE__ */jsxs(Box,{paddingBottom:isLast?1:0,paddingTop:isFirst?1:0,paddingX:1,children:[/* @__PURE__ */jsx(TimelineItem,{chunk,isFirst,isLast,isLatest:activeIndex===0&&!disabledBeforeFirstChunk,isSelected:activeIndex===selectedIndex,onSelect,timestamp:chunk.endTimestamp,type:chunk.type}),activeIndex===filteredChunks.length-1&&hasMoreChunks&&/* @__PURE__ */jsx(Flex,{align:"center",justify:"center",padding:4,children:/* @__PURE__ */jsx(Spinner,{muted:true})})]});},[disabledBeforeFirstChunk,filteredChunks,hasMoreChunks,onSelect,selectedIndex]);useEffect(()=>setMounted(true),[]);return/* @__PURE__ */jsxs(Root$4,{$visible:!selectedIndex||mounted,"data-ui":"timeline",children:[filteredChunks.length===0&&/* @__PURE__ */jsxs(StackWrapper,{padding:3,space:3,children:[/* @__PURE__ */jsx(Text,{size:1,weight:"semibold",children:"No document history"}),/* @__PURE__ */jsx(Text,{muted:true,size:1,children:"When changing the content of the document, the document versions will appear in this menu."})]}),filteredChunks.length>0&&/* @__PURE__ */jsx(ListWrapper,{direction:"column",children:/* @__PURE__ */jsx(CommandList,{activeItemDataAttr:"data-hovered",ariaLabel:"Document revisions",autoFocus:"list",initialIndex:selectedIndex,initialScrollAlign:"center",itemHeight:40,items:filteredChunks,onEndReached:onLoadMore,onEndReachedIndexOffset:20,overscan:5,renderItem,wrapAround:false})})]});};Timeline.displayName="Timeline";function TimelineError(){return/* @__PURE__ */jsxs(Flex,{align:"flex-start",gap:3,padding:4,children:[/* @__PURE__ */jsx(TextWithTone,{tone:"critical",children:/* @__PURE__ */jsx(ErrorOutlineIcon,{})}),/* @__PURE__ */jsxs(Stack,{space:4,children:[/* @__PURE__ */jsx(TextWithTone,{size:1,tone:"critical",weight:"semibold",children:"An error occurred whilst retrieving document changes."}),/* @__PURE__ */jsx(TextWithTone,{size:1,tone:"critical",children:"Document history transactions have not been affected."})]})]});}var __freeze$3=Object.freeze;var __defProp$i=Object.defineProperty;var __template$3=(cooked,raw)=>__freeze$3(__defProp$i(cooked,"raw",{value:__freeze$3(raw||cooked.slice())}));var _a$3;const Root$3=styled(Popover)(_a$3||(_a$3=__template$3(["\n  overflow: hidden;\n  overflow: clip;\n"])));function TimelineMenu(_ref82){let{chunk,mode,placement}=_ref82;const{setTimelineRange,setTimelineMode,timelineError,ready,timelineStore,isDeleted}=useDocumentPane();const[open,setOpen]=useState(false);const[button,setButton]=useState(null);const[popover,setPopover]=useState(null);const toast=useToast();const chunks=useTimelineSelector(timelineStore,state=>state.chunks);const loading=useTimelineSelector(timelineStore,state=>state.isLoading);const hasMoreChunks=useTimelineSelector(timelineStore,state=>state.hasMoreChunks);const realRevChunk=useTimelineSelector(timelineStore,state=>state.realRevChunk);const sinceTime=useTimelineSelector(timelineStore,state=>state.sinceTime);const handleOpen=useCallback(()=>{setTimelineMode(mode);setOpen(true);},[mode,setTimelineMode]);const handleClose=useCallback(()=>{setTimelineMode("closed");setOpen(false);},[setTimelineMode]);const handleClickOutside=useCallback(()=>{if(open){handleClose();}},[handleClose,open]);const handleGlobalKeyDown=useCallback(event=>{if(open&&(event.key==="Escape"||event.key==="Tab")){handleClose();button==null?void 0:button.focus();}},[button,handleClose,open]);useClickOutside(handleClickOutside,[button,popover]);useGlobalKeyDown(handleGlobalKeyDown);const selectRev=useCallback(revChunk=>{try{const[sinceId,revId]=timelineStore.findRangeForRev(revChunk);setTimelineMode("closed");setTimelineRange(sinceId,revId);}catch(err){toast.push({closable:true,description:err.message,status:"error",title:"Unable to load revision"});}},[setTimelineMode,setTimelineRange,timelineStore,toast]);const selectSince=useCallback(sinceChunk=>{try{const[sinceId,revId]=timelineStore.findRangeForSince(sinceChunk);setTimelineMode("closed");setTimelineRange(sinceId,revId);}catch(err){toast.push({closable:true,description:err.message,status:"error",title:"Unable to load revision"});}},[setTimelineMode,setTimelineRange,timelineStore,toast]);const handleLoadMore=useCallback(()=>{if(!loading){timelineStore.loadMore();}},[loading,timelineStore]);const content=timelineError?/* @__PURE__ */jsx(TimelineError,{}):/* @__PURE__ */jsxs(Fragment,{children:[mode==="rev"&&/* @__PURE__ */jsx(Timeline,{chunks,firstChunk:realRevChunk,hasMoreChunks,lastChunk:realRevChunk,onLoadMore:handleLoadMore,onSelect:selectRev}),mode==="since"&&/* @__PURE__ */jsx(Timeline,{chunks,disabledBeforeFirstChunk:true,firstChunk:realRevChunk,hasMoreChunks,lastChunk:sinceTime,onLoadMore:handleLoadMore,onSelect:selectSince})]});const timeLabel=useFormattedTimestamp((chunk==null?void 0:chunk.endTimestamp)||"");const revLabel=chunk?"".concat(upperFirst(formatTimelineEventLabel(chunk.type)),": ").concat(timeLabel):"Latest version";const sinceLabel=chunk?"Since: ".concat(timeLabel):"Since: unknown version";const buttonLabel=mode==="rev"?revLabel:sinceLabel;return/* @__PURE__ */jsx(Root$3,{constrainSize:true,content:open&&content,"data-ui":"versionMenu",open,placement,portal:true,ref:setPopover,children:/* @__PURE__ */jsx(Button,{disabled:!ready,mode:"bleed",fontSize:1,padding:2,iconRight:SelectIcon,onClick:open?handleClose:handleOpen,ref:setButton,selected:open,style:{maxWidth:"100%"},text:ready?buttonLabel:"Loading history"})});}function useFormattedTimestamp(time){const formatted=useMemo(()=>{const parsedDate=time?new Date(time):/* @__PURE__ */new Date();const formattedDate=format(parsedDate,"MMM d, yyyy, hh:mm a");return formattedDate;},[time]);return formatted;}const Root$2=styled(Card)({position:"relative",zIndex:1,lineHeight:0,"&:after":{content:'""',display:"block",position:"absolute",left:0,bottom:-1,right:0,borderBottom:"1px solid var(--card-border-color)",opacity:0.5}});function DocumentInspectorHeader(props){const{as:forwardedAs,children,closeButtonLabel,onClose,title,...restProps}=props;return/* @__PURE__ */jsxs(Root$2,{...restProps,as:forwardedAs,children:[/* @__PURE__ */jsxs(Flex,{padding:2,children:[/* @__PURE__ */jsx(Box,{flex:1,padding:3,children:/* @__PURE__ */jsx(Text,{as:"h1",size:1,weight:"semibold",children:title})}),/* @__PURE__ */jsx(Box,{flex:"none",padding:1,children:/* @__PURE__ */jsx(Button,{"aria-label":closeButtonLabel,fontSize:1,icon:CloseIcon,mode:"bleed",onClick:onClose,padding:2})})]}),children]});}var __freeze$2=Object.freeze;var __defProp$h=Object.defineProperty;var __template$2=(cooked,raw)=>__freeze$2(__defProp$h(cooked,"raw",{value:__freeze$2(raw||cooked.slice())}));var _a$2;const Root$1=styled.div(_a$2||(_a$2=__template$2(["\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n    opacity: 0.5;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n"])));function Resizer(props){const{onResize,onResizeStart}=props;const mouseXRef=useRef(0);const handleMouseDown=useCallback(event=>{event.preventDefault();mouseXRef.current=event.pageX;onResizeStart();const handleMouseMove=e=>{e.preventDefault();onResize(e.pageX-mouseXRef.current);};const handleMouseUp=()=>{window.removeEventListener("mousemove",handleMouseMove);window.removeEventListener("mouseup",handleMouseUp);};window.addEventListener("mousemove",handleMouseMove);window.addEventListener("mouseup",handleMouseUp);},[onResize,onResizeStart]);return/* @__PURE__ */jsxs(Root$1,{onMouseDown:handleMouseDown,children:[/* @__PURE__ */jsx("span",{}),/* @__PURE__ */jsx("span",{})]});}var __freeze$1=Object.freeze;var __defProp$g=Object.defineProperty;var __template$1=(cooked,raw)=>__freeze$1(__defProp$g(cooked,"raw",{value:__freeze$1(raw||cooked.slice())}));var _a$1;const Root=styled(Box)(_a$1||(_a$1=__template$1(["\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n"])));function Resizable(props){const{as:forwardedAs,children,minWidth,maxWidth,...restProps}=props;const[element,setElement]=useState(null);const elementWidthRef=useRef();const[targetWidth,setTargetWidth]=useState();const handleResizeStart=useCallback(()=>{elementWidthRef.current=element==null?void 0:element.offsetWidth;},[element]);const handleResize=useCallback(deltaX=>{const w=elementWidthRef.current;if(!w)return;setTargetWidth(Math.min(Math.max(w-deltaX,minWidth),maxWidth));},[minWidth,maxWidth]);const style=useMemo(()=>targetWidth?{flex:"none",width:targetWidth}:{minWidth,maxWidth},[minWidth,maxWidth,targetWidth]);return/* @__PURE__ */jsxs(Root,{as:forwardedAs,...restProps,ref:setElement,style,children:[children,/* @__PURE__ */jsx(Resizer,{onResize:handleResize,onResizeStart:handleResizeStart})]});}function LoadingContent(){return/* @__PURE__ */jsx(Delay,{ms:300,children:/* @__PURE__ */jsxs(Flex,{align:"center",direction:"column",height:"fill",justify:"center",paddingTop:3,children:[/* @__PURE__ */jsx(Spinner,{muted:true}),/* @__PURE__ */jsx(Box,{marginTop:3,children:/* @__PURE__ */jsx(Text,{align:"center",muted:true,size:1,children:"Loading changes"})})]})});}function collectLatestAuthorAnnotations(diff){const authorMap=/* @__PURE__ */new Map();visitDiff(diff,child=>{if(child.action==="unchanged"||!("annotation"in child)||!child.annotation){return true;}const{author,timestamp}=child.annotation;const previous=authorMap.get(author);if(!previous||previous.timestamp<timestamp){authorMap.set(author,child.annotation);}return true;});return Array.from(authorMap.values()).sort((a,b)=>a.timestamp<b.timestamp?1:-1);}var __freeze=Object.freeze;var __defProp$f=Object.defineProperty;var __template=(cooked,raw)=>__freeze(__defProp$f(cooked,"raw",{value:__freeze(raw||cooked.slice())}));var _a;const Scroller=styled(ScrollContainer)(_a||(_a=__template(["\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n"])));function ChangesInspector(props){const{onClose}=props;const{documentId,schemaType,timelineError,timelineStore,value}=useDocumentPane();const scrollRef=useRef(null);const diff=useTimelineSelector(timelineStore,state=>state.diff);const onOlderRevision=useTimelineSelector(timelineStore,state=>state.onOlderRevision);const selectionState=useTimelineSelector(timelineStore,state=>state.selectionState);const sinceTime=useTimelineSelector(timelineStore,state=>state.sinceTime);const loading=selectionState==="loading";const isComparingCurrent=!onOlderRevision;const documentContext=React.useMemo(()=>({documentId,schemaType,FieldWrapper:ChangeFieldWrapper,rootDiff:diff,isComparingCurrent,value}),[documentId,diff,isComparingCurrent,schemaType,value]);const changeAnnotations=React.useMemo(()=>diff?collectLatestAuthorAnnotations(diff):[],[diff]);return/* @__PURE__ */jsxs(Flex,{"data-testid":"review-changes-pane",direction:"column",height:"fill",overflow:"hidden",children:[/* @__PURE__ */jsx(DocumentInspectorHeader,{as:"header",closeButtonLabel:"Close review changes",flex:"none",onClose,title:"Review changes",children:/* @__PURE__ */jsxs(Flex,{gap:1,padding:3,paddingTop:0,paddingBottom:2,children:[/* @__PURE__ */jsx(Box,{flex:1,children:/* @__PURE__ */jsx(TimelineMenu,{mode:"since",chunk:sinceTime,placement:"bottom-start"})}),/* @__PURE__ */jsx(Box,{flex:"none",children:/* @__PURE__ */jsx(DiffTooltip,{annotations:changeAnnotations,description:"Changes by",portal:true,children:/* @__PURE__ */jsx(AvatarStack,{maxLength:4,"aria-label":"Changes by",children:changeAnnotations.map(_ref83=>{let{author}=_ref83;return/* @__PURE__ */jsx(UserAvatar,{user:author},author);})})})})]})}),/* @__PURE__ */jsx(Card,{flex:1,children:/* @__PURE__ */jsx(BoundaryElementProvider,{element:scrollRef.current,children:/* @__PURE__ */jsx(Scroller,{"data-ui":"Scroller",ref:scrollRef,children:/* @__PURE__ */jsx(Box,{flex:1,padding:4,children:/* @__PURE__ */jsx(Content,{diff,documentContext,error:timelineError,loading,schemaType})})})})})]});}function Content(_ref84){let{error,diff,documentContext,loading,schemaType}=_ref84;if(error){return/* @__PURE__ */jsx(NoChanges,{});}if(loading){return/* @__PURE__ */jsx(LoadingContent,{});}if(!diff){return/* @__PURE__ */jsx(NoChanges,{});}return/* @__PURE__ */jsx(DocumentChangeContext.Provider,{value:documentContext,children:/* @__PURE__ */jsx(ChangeList,{diff,schemaType})});}const changesInspector={name:HISTORY_INSPECTOR_NAME,useMenuItem:()=>{const{features}=useDeskTool();return{hidden:!features.reviewChanges,icon:RestoreIcon,title:"Review changes"};},component:ChangesInspector,onClose:_ref85=>{let{params}=_ref85;return{params:{...params,since:void 0}};},onOpen:_ref86=>{let{params}=_ref86;return{params:{...params,since:"@lastPublished"}};}};function getPathTypes(options){const{path,schemaType,value}=options;const result=[];let s=schemaType;let v=value;for(const segment of path){if(typeof segment==="string"){if(!isRecord$1(v)&&v!==void 0){throw new Error("Parent value is not an object, cannot get path segment: .".concat(segment));}if(s.jsonType!=="object"){throw new Error("Parent type is not an object schema type, cannot get path segment: .".concat(segment));}v=v==null?void 0:v[segment];const field=s.fields.find(f=>f.name===segment);if(!field){throw new Error("Field type not found: .".concat(segment));}s=field.type;result.push(s);continue;}if(typeof segment==="number"){if(!isArray$1(v)&&v!==void 0){throw new Error("Parent value is not an array, cannot get path segment: [".concat(segment,"]"));}if(s.jsonType!=="array"){throw new Error("Parent type is not an array schema type, cannot get path segment: [".concat(segment,"]"));}v=v==null?void 0:v[segment];const itemType=s.of.find(ofType=>{if(typeof v==="string"){return ofType.jsonType==="string";}if(typeof v==="number"){return ofType.jsonType==="number";}if(typeof v==="boolean"){return ofType.jsonType==="boolean";}if(isRecord$1(v)){return ofType.name===(v==null?void 0:v._type);}return false;});if(!itemType){throw new Error("Item type not found: [".concat(segment,"]"));}s=itemType;result.push(s);continue;}if(isRecord$1(segment)&&segment._key){if(!isArray$1(v)){throw new Error("Parent value is not an array, cannot get path segment: [_key == ".concat(segment,"]"));}if(s.jsonType!=="array"){throw new Error("Parent type is not an array schema type, cannot get path segment: .".concat(segment));}const values=v!=null?v:[];v=values.find(i=>isRecord$1(i)&&i._key===segment._key);if(!isRecord$1(v)){throw new Error("Array item not found: [_key == ".concat(segment._key,"]"));}const ofType=s.of.find(i=>isRecord$1(v)&&i.name===(v==null?void 0:v._type));if(!ofType){throw new Error("Array item type not found: .".concat(v==null?void 0:v._type));}s=ofType;result.push(s);continue;}throw new Error("Invalid path segment: ".concat(JSON.stringify(segment)));}return result;}const MARKER_ICON={error:ErrorOutlineIcon,warning:WarningOutlineIcon,info:InfoOutlineIcon};const MARKER_TONE={error:"critical",warning:"caution",info:"primary"};function ValidationInspector(props){const{onClose}=props;const{onFocus,onPathOpen,schemaType,validation,value}=useDocumentPane();const handleOpen=useCallback(path=>{onPathOpen(path);onFocus(path);},[onFocus,onPathOpen]);return/* @__PURE__ */jsxs(Flex,{direction:"column",height:"fill",overflow:"hidden",children:[/* @__PURE__ */jsx(DocumentInspectorHeader,{as:"header",closeButtonLabel:"Close validation",flex:"none",onClose,title:"Validation"}),/* @__PURE__ */jsxs(Card,{flex:1,overflow:"auto",padding:3,children:[validation.length===0&&/* @__PURE__ */jsx(Box,{padding:2,children:/* @__PURE__ */jsx(Text,{muted:true,size:1,children:"No validation errors"})}),validation.length>0&&/* @__PURE__ */jsx(Stack,{space:2,children:validation.map((marker,i)=>/* @__PURE__ */jsx(ValidationCard,{marker,onOpen:handleOpen,schemaType,value},i))})]})]});}function ValidationCard(props){const{marker,onOpen,schemaType,value}=props;const handleOpen=useCallback(()=>onOpen(marker.path),[marker,onOpen]);const[errorInfo,setErrorInfo]=useState(null);return/* @__PURE__ */jsxs(ErrorBoundary,{onCatch:setErrorInfo,children:[errorInfo&&/* @__PURE__ */jsx(Card,{padding:3,radius:2,tone:"critical",children:/* @__PURE__ */jsxs(Text,{size:1,children:["ERROR: ",errorInfo.error.message]})}),!errorInfo&&/* @__PURE__ */jsx(Card,{__unstable_focusRing:true,as:"button",onClick:handleOpen,padding:3,radius:2,tone:MARKER_TONE[marker.level],children:/* @__PURE__ */jsxs(Flex,{align:"flex-start",gap:3,children:[/* @__PURE__ */jsx(Box,{flex:"none",children:/* @__PURE__ */jsx(Text,{size:1,children:createElement(MARKER_ICON[marker.level])})}),/* @__PURE__ */jsxs(Stack,{flex:1,space:2,children:[/* @__PURE__ */jsx(DocumentNodePathBreadcrumbs,{path:marker.path,schemaType,value}),/* @__PURE__ */jsx(Text,{muted:true,size:1,children:marker.item.message})]})]})})]});}function DocumentNodePathBreadcrumbs(props){const{path,schemaType,value}=props;const pathTypes=useMemo(()=>getPathTypes({path,schemaType,value}),[path,schemaType,value]);return/* @__PURE__ */jsx(Text,{size:1,children:pathTypes.map((t,i)=>/* @__PURE__ */jsxs(Fragment$1,{children:[i>0&&/* @__PURE__ */jsx("span",{style:{color:"var(--card-muted-fg-color)",opacity:0.5},children:" / "}),/* @__PURE__ */jsx("span",{style:{fontWeight:500},children:t.title||t.name})]},i))});}function useMenuItem(props){const{documentId,documentType}=props;const{validation:validationMarkers}=useValidationStatus(documentId,documentType);const validation=useMemo(()=>validationMarkers.map(item=>({level:item.level,message:item.item.message,path:item.path})),[validationMarkers]);const hasErrors=validation.some(isValidationError);const hasWarnings=validation.some(isValidationWarning);const icon=useMemo(()=>{if(hasErrors)return ErrorOutlineIcon;if(hasWarnings)return WarningOutlineIcon;return CheckmarkCircleIcon;},[hasErrors,hasWarnings]);const tone=useMemo(()=>{if(hasErrors)return"critical";if(hasWarnings)return"caution";return"positive";},[hasErrors,hasWarnings]);return{hidden:validation.length===0,icon,title:"Validation",tone,showAsAction:true};}const validationInspector={name:VALIDATION_INSPECTOR_NAME,component:ValidationInspector,useMenuItem};const documentActions=[PublishAction,UnpublishAction,DiscardChangesAction,DuplicateAction,DeleteAction,HistoryRestoreAction];const documentBadges=[LiveEditBadge];const inspectors=[validationInspector,changesInspector];const deskTool=definePlugin(options=>({name:"@sanity/desk-tool",document:{actions:prevActions=>{return Array.from(/* @__PURE__ */new Set([...prevActions,...documentActions]));},badges:prevBadges=>{return Array.from(/* @__PURE__ */new Set([...prevBadges,...documentBadges]));},inspectors:prevInspectors=>{return Array.from(/* @__PURE__ */new Set([...prevInspectors,...inspectors]));}},plugins:[comments()],tools:[{name:(options==null?void 0:options.name)||"desk",title:(options==null?void 0:options.title)||"Desk",icon:(options==null?void 0:options.icon)||MasterDetailIcon,component:lazy(()=>import('./index-dd34e89c.js').then(function(n){return n.index;})),canHandleIntent:(intent,params)=>{return Boolean(intent==="edit"&&params.id||intent==="create"&&params.type||intent==="create"&&params.template);},// Controlled by sanity/src/desk/components/deskTool/DeskTitle.tsx
controlsDocumentTitle:true,getIntentState,options,router}]}));function getInspectorItems(_ref87){let{currentInspector,hasValue,inspectors,inspectorMenuItems}=_ref87;return inspectors.map((inspector,index)=>{var _a;const menuItem=inspectorMenuItems[index];if(!menuItem||menuItem.hidden)return null;return{action:"".concat(INSPECT_ACTION_PREFIX).concat(inspector.name),group:menuItem.showAsAction?void 0:"inspectors",icon:menuItem.icon,isDisabled:!hasValue,selected:(currentInspector==null?void 0:currentInspector.name)===inspector.name,shortcut:(_a=menuItem.hotkeys)==null?void 0:_a.join("+"),showAsAction:menuItem.showAsAction,title:menuItem.title,tone:menuItem.tone};}).filter(Boolean);}function getInspectItem(_ref88){let{hasValue}=_ref88;return{action:"inspect",group:"inspectors",title:"Inspect",icon:BinaryDocumentIcon,isDisabled:!hasValue,shortcut:"Ctrl+Alt+I"};}function getProductionPreviewItem(_ref89){let{previewUrl}=_ref89;if(!previewUrl)return null;return{action:"production-preview",group:"links",title:"Open preview",icon:EarthAmericasIcon,shortcut:"Ctrl+Alt+O"};}function getMenuItems(params){const inspectorItems=getInspectorItems(params);const items=[// Get production preview item
getProductionPreviewItem(params)].filter(Boolean);return[...inspectorItems,// TODO: convert to inspector or document view?
getInspectItem(params),...items];}const isSanityDocument=value=>isRecord$1(value)&&typeof value._id==="string"&&typeof value._type==="string";function usePreviewUrl(value){const[previewUrl,setPreviewUrl]=useState(void 0);const[error,setError]=useState(null);const{resolveProductionUrl}=useSource().document;const value$=useAsObservable(value);if(error)throw error;useEffect(()=>{value$.pipe(// this so that the preview URL isn't fetched on every keystroke
debounceTime(500),switchMap(document=>isSanityDocument(document)?from(resolveProductionUrl({document})):of(void 0)),catchError(e=>{const message=isRecord$1(e)&&typeof e.message==="string"?e.message:"Unknown error";throw new Error("An error was thrown while trying to get your preview url: ".concat(message));})).subscribe({next:setPreviewUrl,error:setError});},[resolveProductionUrl,value$]);return previewUrl;}function getInitialValueTemplateOpts(templates,opts){const payload=opts.panePayload||{};const structureNodeTemplate=opts.templateName;if(opts.urlTemplate&&structureNodeTemplate&&structureNodeTemplate!==opts.urlTemplate){console.warn('Conflicting templates: URL says "'.concat(opts.urlTemplate,'", structure node says "').concat(structureNodeTemplate,'". Using "').concat(structureNodeTemplate,'".'));}const template=structureNodeTemplate||opts.urlTemplate;const typeTemplates=templates.filter(t=>t.schemaType===opts.documentType);const templateParams={...opts.templateParams,...(typeof payload==="object"?payload||{}:{})};let templateName=template;if(!template&&typeTemplates.length===1){templateName=typeTemplates[0].id;}return{templateName,templateParams};}const InspectorMenuItem=memo(function InspectorMenuItem2(props){const{documentId,documentType,index,setMenuItem,useMenuItem}=props;const node=useUnique(useMenuItem({documentId,documentType}));useEffect(()=>{setMenuItem(index,node);},[index,node,setMenuItem]);return/* @__PURE__ */jsx(Fragment,{});});function DocumentInspectorMenuItemsResolver(props){const{documentId,documentType,inspectors,onMenuItems}=props;const len=inspectors.length;const lenRef=useRef(len);const[menuItems,setMenuItems]=useState(()=>Array.from(new Array(len)));const menuItemsRef=useRef(menuItems);useEffect(()=>{if(lenRef.current!==len){const newFieldActions=Array.from(new Array(len));for(let i=0;i<len;i++){newFieldActions[i]=menuItemsRef.current[i];}lenRef.current=len;setMenuItems(()=>{menuItemsRef.current=newFieldActions;return newFieldActions;});}},[len]);const setMenuItem=useCallback((index,node)=>{setMenuItems(prev=>{const next=[...prev];next[index]=node;menuItemsRef.current=next;return next;});},[]);useEffect(()=>{onMenuItems(menuItems.filter(Boolean));},[menuItems,onMenuItems]);return/* @__PURE__ */jsx(Fragment,{children:inspectors.map((inspector,inspectorIndex)=>inspector.useMenuItem&&/* @__PURE__ */jsx(InspectorMenuItem,{documentId,documentType,index:inspectorIndex,setMenuItem,useMenuItem:inspector.useMenuItem},inspector.name))});}const DocumentPaneProvider=memo(props=>{const{children,index,pane,paneKey}=props;const schema=useSchema();const templates=useTemplates();const{actions:documentActions,badges:documentBadges,unstable_fieldActions:fieldActionsResolver,unstable_languageFilter:languageFilterResolver,inspectors:inspectorsResolver}=useSource().document;const presenceStore=usePresenceStore();const paneRouter=usePaneRouter();const setPaneParams=paneRouter.setParams;const{features}=useDeskTool();const{push:pushToast}=useToast();const{options,menuItemGroups=DEFAULT_MENU_ITEM_GROUPS,title=null,views:viewsProp=[]}=pane;const paneOptions=useUnique(options);const documentIdRaw=paneOptions.id;const documentId=getPublishedId(documentIdRaw);const documentType=options.type;const params=useUnique(paneRouter.params)||EMPTY_PARAMS;const panePayload=useUnique(paneRouter.payload);const{templateName,templateParams}=useMemo(()=>getInitialValueTemplateOpts(templates,{documentType,templateName:paneOptions.template,templateParams:paneOptions.templateParameters,panePayload,urlTemplate:params.template}),[documentType,paneOptions,params,panePayload,templates]);const initialValueRaw=useInitialValue({documentId,documentType,templateName,templateParams});const initialValue=useUnique(initialValueRaw);const{patch}=useDocumentOperation(documentId,documentType);const editState=useEditState(documentId,documentType);const{validation:validationRaw}=useValidationStatus(documentId,documentType);const connectionState=useConnectionState(documentId,documentType);const schemaType=schema.get(documentType);const value=(editState==null?void 0:editState.draft)||(editState==null?void 0:editState.published)||initialValue.value;const[isDeleting,setIsDeleting]=useState(false);const[inspectorMenuItems,setInspectorMenuItems]=useState([]);const actions=useMemo(()=>documentActions({schemaType:documentType,documentId}),[documentActions,documentId,documentType]);const badges=useMemo(()=>documentBadges({schemaType:documentType,documentId}),[documentBadges,documentId,documentType]);const languageFilter=useMemo(()=>languageFilterResolver({schemaType:documentType,documentId}),[documentId,documentType,languageFilterResolver]);const validation=useUnique(validationRaw);const views=useUnique(viewsProp);const[focusPath,setFocusPath]=useState(()=>params.path?fromString(params.path):[]);const activeViewId=params.view||views[0]&&views[0].id||null;const[timelineMode,setTimelineMode]=useState("closed");const[timelineError,setTimelineError]=useState(null);const timelineStore=useTimelineStore({documentId,documentType,onError:setTimelineError,rev:params.rev,since:params.since});const onOlderRevision=useTimelineSelector(timelineStore,state=>state.onOlderRevision);const revTime=useTimelineSelector(timelineStore,state=>state.revTime);const sinceAttributes=useTimelineSelector(timelineStore,state=>state.sinceAttributes);const timelineDisplayed=useTimelineSelector(timelineStore,state=>state.timelineDisplayed);const timelineReady=useTimelineSelector(timelineStore,state=>state.timelineReady);const isPristine=useTimelineSelector(timelineStore,state=>state.isPristine);const isDeleted=useMemo(()=>{if(!timelineReady){return false;}return Boolean(!(editState==null?void 0:editState.draft)&&!(editState==null?void 0:editState.published))&&!isPristine;},[editState==null?void 0:editState.draft,editState==null?void 0:editState.published,isPristine,timelineReady]);const previewUrl=usePreviewUrl(value);const[presence,setPresence]=useState([]);useEffect(()=>{const subscription=presenceStore.documentPresence(documentId).subscribe(nextPresence=>{setPresence(nextPresence);});return()=>{subscription.unsubscribe();};},[documentId,presenceStore]);const inspectors=useMemo(()=>inspectorsResolver({documentId,documentType}),[documentId,documentType,inspectorsResolver]);const[inspectorName,setInspectorName]=useState(()=>params.inspect||null);const inspectParamRef=useRef(params.inspect);useEffect(()=>{if(inspectParamRef.current!==params.inspect){inspectParamRef.current=params.inspect;setInspectorName(params.inspect||null);}},[params.inspect]);const currentInspector=inspectors==null?void 0:inspectors.find(i=>i.name===inspectorName);const resolvedChangesInspector=inspectors.find(i=>i.name===HISTORY_INSPECTOR_NAME);const changesOpen=(currentInspector==null?void 0:currentInspector.name)===HISTORY_INSPECTOR_NAME;const hasValue=Boolean(value);const menuItems=useMemo(()=>getMenuItems({currentInspector,features,hasValue,inspectorMenuItems,inspectors,previewUrl}),[currentInspector,features,hasValue,inspectorMenuItems,inspectors,previewUrl]);const inspectOpen=params.inspect==="on";const compareValue=changesOpen?sinceAttributes:(editState==null?void 0:editState.published)||null;const fieldActions=useMemo(()=>schemaType?fieldActionsResolver({documentId,documentType,schemaType}):[],[documentId,documentType,fieldActionsResolver,schemaType]);const ready=connectionState==="connected"&&editState.ready&&(timelineReady||!!timelineError);const displayed=useMemo(()=>onOlderRevision?timelineDisplayed||{_id:value._id,_type:value._type}:value,[onOlderRevision,timelineDisplayed,value]);const setTimelineRange=useCallback((newSince,newRev)=>{setPaneParams({...params,since:newSince,rev:newRev||void 0});},[params,setPaneParams]);const handleFocus=useCallback(nextFocusPath=>{setFocusPath(nextFocusPath);presenceStore.setLocation([{type:"document",documentId,path:nextFocusPath,lastActiveAt:/* @__PURE__ */new Date().toISOString()}]);},[documentId,presenceStore,setFocusPath]);const handleBlur=useCallback(blurredPath=>{setFocusPath([]);},[setFocusPath]);const patchRef=useRef(()=>{throw new Error("Nope");});patchRef.current=event=>{patch.execute(toMutationPatches(event.patches),initialValue.value);};const handleChange=useCallback(event=>patchRef.current(event),[]);const closeInspector=useCallback(closeInspectorName=>{var _a,_b,_c,_d;const inspector=closeInspectorName&&inspectors.find(i=>i.name===closeInspectorName);if(closeInspectorName&&!inspector){console.warn('No inspector named "'.concat(closeInspectorName,'"'));return;}if(!currentInspector){return;}if(inspector){const result=(_b=(_a=inspector.onClose)==null?void 0:_a.call(inspector,{params}))!=null?_b:{params};setInspectorName(null);inspectParamRef.current=void 0;setPaneParams({...result.params,inspect:void 0});return;}if(currentInspector){const result=(_d=(_c=currentInspector.onClose)==null?void 0:_c.call(currentInspector,{params}))!=null?_d:{params};setInspectorName(null);inspectParamRef.current=void 0;setPaneParams({...result.params,inspect:void 0});}},[currentInspector,inspectors,params,setPaneParams]);const openInspector=useCallback((nextInspectorName,paneParams)=>{var _a,_b,_c,_d;const nextInspector=inspectors.find(i=>i.name===nextInspectorName);if(!nextInspector){console.warn('No inspector named "'.concat(nextInspectorName,'"'));return;}if((currentInspector==null?void 0:currentInspector.name)===nextInspector.name){setPaneParams({...params,...paneParams,inspect:nextInspector.name});return;}let currentParams=params;if(currentInspector){const closeResult=(_b=(_a=nextInspector.onClose)==null?void 0:_a.call(nextInspector,{params:currentParams}))!=null?_b:{params:currentParams};currentParams=closeResult.params;}const result=(_d=(_c=nextInspector.onOpen)==null?void 0:_c.call(nextInspector,{params:currentParams}))!=null?_d:{params:currentParams};setInspectorName(nextInspector.name);inspectParamRef.current=nextInspector.name;setPaneParams({...result.params,...paneParams,inspect:nextInspector.name});},[currentInspector,inspectors,params,setPaneParams]);const handleHistoryClose=useCallback(()=>{if(resolvedChangesInspector){closeInspector(resolvedChangesInspector.name);}},[closeInspector,resolvedChangesInspector]);const handleHistoryOpen=useCallback(()=>{if(!features.reviewChanges){return;}if(resolvedChangesInspector){openInspector(resolvedChangesInspector.name);}},[features.reviewChanges,openInspector,resolvedChangesInspector]);const handlePaneClose=useCallback(()=>paneRouter.closeCurrent(),[paneRouter]);const handlePaneSplit=useCallback(()=>paneRouter.duplicateCurrent(),[paneRouter]);const toggleLegacyInspect=useCallback(function(){let toggle=arguments.length>0&&arguments[0]!==undefined?arguments[0]:!inspectOpen;if(toggle){setPaneParams({...params,inspect:"on"});}else{setPaneParams(omit(params,"inspect"));}},[inspectOpen,params,setPaneParams]);const handleMenuAction=useCallback(item=>{if(item.action==="production-preview"&&previewUrl){window.open(previewUrl);return true;}if(item.action==="inspect"){toggleLegacyInspect(true);return true;}if(item.action==="reviewChanges"){handleHistoryOpen();return true;}if(typeof item.action==="string"&&item.action.startsWith(INSPECT_ACTION_PREFIX)){const nextInspectorName=item.action.slice(INSPECT_ACTION_PREFIX.length);const nextInspector=inspectors.find(i=>i.name===nextInspectorName);if(nextInspector){if(nextInspector.name===inspectorName){closeInspector(nextInspector.name);}else{openInspector(nextInspector.name);}return true;}}return false;},[closeInspector,handleHistoryOpen,inspectorName,inspectors,openInspector,previewUrl,toggleLegacyInspect]);const handleKeyUp=useCallback(event=>{for(const item of menuItems){if(item.shortcut){if(isHotkey(item.shortcut,event)){event.preventDefault();event.stopPropagation();handleMenuAction(item);return;}}}},[handleMenuAction,menuItems]);const handleLegacyInspectClose=useCallback(()=>toggleLegacyInspect(false),[toggleLegacyInspect]);const[openPath,onSetOpenPath]=useState([]);const[fieldGroupState,onSetFieldGroupState]=useState();const[collapsedPaths,onSetCollapsedPath]=useState();const[collapsedFieldSets,onSetCollapsedFieldSets]=useState();const handleOnSetCollapsedPath=useCallback((path,collapsed)=>{onSetCollapsedPath(prevState=>setAtPath(prevState,path,collapsed));},[]);const handleOnSetCollapsedFieldSet=useCallback((path,collapsed)=>{onSetCollapsedFieldSets(prevState=>setAtPath(prevState,path,collapsed));},[]);const handleSetActiveFieldGroup=useCallback((path,groupName)=>onSetFieldGroupState(prevState=>setAtPath(prevState,path,groupName)),[]);const requiredPermission=value._createdAt?"update":"create";const liveEdit=Boolean(schemaType==null?void 0:schemaType.liveEdit);const docId=value._id?value._id:"dummy-id";const docPermissionsInput=useMemo(()=>{return{...value,_id:liveEdit?getPublishedId(docId):getDraftId(docId)};},[liveEdit,value,docId]);const[permissions,isPermissionsLoading]=useDocumentValuePermissions({document:docPermissionsInput,permission:requiredPermission});const isNonExistent=!(value==null?void 0:value._id);const readOnly=useMemo(()=>{var _a;const hasNoPermission=!isPermissionsLoading&&!(permissions==null?void 0:permissions.granted);const updateActionDisabled=!isActionEnabled(schemaType,"update");const createActionDisabled=isNonExistent&&!isActionEnabled(schemaType,"create");const reconnecting=connectionState==="reconnecting";const isLocked=(_a=editState.transactionSyncLock)==null?void 0:_a.enabled;return!ready||revTime!==null||hasNoPermission||updateActionDisabled||createActionDisabled||reconnecting||isLocked||isDeleting||isDeleted;},[connectionState,editState.transactionSyncLock,isNonExistent,isDeleted,isDeleting,isPermissionsLoading,permissions==null?void 0:permissions.granted,ready,revTime,schemaType]);const formState=useFormState(schemaType,{value:displayed,readOnly,comparisonValue:compareValue,focusPath,openPath,collapsedPaths,presence,validation,collapsedFieldSets,fieldGroupState,changesOpen});const formStateRef=useRef(formState);formStateRef.current=formState;const setOpenPath=useCallback(path=>{const ops=getExpandOperations(formStateRef.current,path);ops.forEach(op=>{if(op.type==="expandPath"){onSetCollapsedPath(prevState=>setAtPath(prevState,op.path,false));}if(op.type==="expandFieldSet"){onSetCollapsedFieldSets(prevState=>setAtPath(prevState,op.path,false));}if(op.type==="setSelectedGroup"){onSetFieldGroupState(prevState=>setAtPath(prevState,op.path,op.groupName));}});onSetOpenPath(path);},[formStateRef]);const documentPane={actions,activeViewId,badges,changesOpen,closeInspector,collapsedFieldSets,collapsedPaths,compareValue,connectionState,displayed,documentId,documentIdRaw,documentType,editState,fieldActions,focusPath,inspector:currentInspector||null,inspectors,menuItems,onBlur:handleBlur,onChange:handleChange,onFocus:handleFocus,onPathOpen:setOpenPath,onHistoryClose:handleHistoryClose,onHistoryOpen:handleHistoryOpen,onInspectClose:handleLegacyInspectClose,onKeyUp:handleKeyUp,onMenuAction:handleMenuAction,onPaneClose:handlePaneClose,onPaneSplit:handlePaneSplit,onSetActiveFieldGroup:handleSetActiveFieldGroup,onSetCollapsedPath:handleOnSetCollapsedPath,onSetCollapsedFieldSet:handleOnSetCollapsedFieldSet,openInspector,index,inspectOpen,validation,menuItemGroups:menuItemGroups||[],paneKey,previewUrl,ready,schemaType,isPermissionsLoading,permissions,setTimelineMode,setTimelineRange,setIsDeleting,isDeleting,isDeleted,timelineError,timelineMode,timelineStore,title,value,views,formState,unstable_languageFilter:languageFilter};useEffect(()=>{if(connectionState==="reconnecting"){pushToast({id:"sanity/desk/reconnecting",status:"warning",title:/* @__PURE__ */jsx(Fragment,{children:"Connection lost. Reconnecting\u2026"})});}},[connectionState,pushToast]);useEffect(()=>{var _a;if(ready&&params.path){const{path,...restParams}=params;const pathFromUrl=resolveKeyedPath((_a=formStateRef.current)==null?void 0:_a.value,fromString(path));setFocusPath(pathFromUrl);setOpenPath(pathFromUrl);paneRouter.setParams(restParams);}},[params,documentId,setOpenPath,ready,paneRouter]);const[rootFieldActionNodes,setRootFieldActionNodes]=useState([]);return/* @__PURE__ */jsxs(DocumentPaneContext.Provider,{value:documentPane,children:[inspectors.length>0&&/* @__PURE__ */jsx(DocumentInspectorMenuItemsResolver,{documentId,documentType,inspectors,onMenuItems:setInspectorMenuItems}),fieldActions.length>0&&schemaType&&/* @__PURE__ */jsx(FieldActionsResolver,{actions:fieldActions,documentId,documentType,onActions:setRootFieldActionNodes,path:EMPTY_ARRAY$7,schemaType}),/* @__PURE__ */jsx(FieldActionsProvider,{actions:rootFieldActionNodes,path:EMPTY_ARRAY$7,children:/* @__PURE__ */jsx(CommentsProvider,{documentId,documentType,children})})]});});DocumentPaneProvider.displayName="DocumentPaneProvider";var __defProp$e=Object.defineProperty;var __defNormalProp$e=(obj,key,value)=>key in obj?__defProp$e(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$e=(obj,key,value)=>{__defNormalProp$e(obj,typeof key!=="symbol"?key+"":key,value);return value;};class SerializeError extends Error{constructor(message,parentPath,pathSegment,hint){super(message);__publicField$e(this,"path");__publicField$e(this,"helpId");const segment=typeof pathSegment==="undefined"?"<unknown>":"".concat(pathSegment);this.path=(parentPath||[]).concat(hint?"".concat(segment," (").concat(hint,")"):segment);}withHelpUrl(id){this.helpId=id;return this;}}var HELP_URL=/* @__PURE__ */(HELP_URL2=>{HELP_URL2["ID_REQUIRED"]="structure-node-id-required";HELP_URL2["TITLE_REQUIRED"]="structure-title-required";HELP_URL2["FILTER_REQUIRED"]="structure-filter-required";HELP_URL2["INVALID_LIST_ITEM"]="structure-invalid-list-item";HELP_URL2["COMPONENT_REQUIRED"]="structure-view-component-required";HELP_URL2["DOCUMENT_ID_REQUIRED"]="structure-document-id-required";HELP_URL2["DOCUMENT_TYPE_REQUIRED"]="structure-document-type-required";HELP_URL2["SCHEMA_TYPE_REQUIRED"]="structure-schema-type-required";HELP_URL2["SCHEMA_TYPE_NOT_FOUND"]="structure-schema-type-not-found";HELP_URL2["LIST_ITEMS_MUST_BE_ARRAY"]="structure-list-items-must-be-array";HELP_URL2["QUERY_PROVIDED_FOR_FILTER"]="structure-query-provided-for-filter";HELP_URL2["ACTION_OR_INTENT_REQUIRED"]="structure-action-or-intent-required";HELP_URL2["LIST_ITEM_IDS_MUST_BE_UNIQUE"]="structure-list-item-ids-must-be-unique";HELP_URL2["ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE"]="structure-action-and-intent-mutually-exclusive";HELP_URL2["API_VERSION_REQUIRED_FOR_CUSTOM_FILTER"]="structure-api-version-required-for-custom-filter";return HELP_URL2;})(HELP_URL||{});const IMPLICIT_FIELDS=["_id","_type","_createdAt","_updatedAt","_rev"];function joinReferences(schemaType,path){const[head,...tail]=path;if(!("fields"in schemaType)){return"";}const schemaField=schemaType.fields.find(field=>field.name===head);if(!schemaField){if(!IMPLICIT_FIELDS.includes(head)){console.warn('The current ordering config targeted the nonexistent field "%s" on schema type "%s". It should be one of %o',head,schemaType.name,schemaType.fields.map(field=>field.name));}return"";}if("to"in schemaField.type&&schemaField.type.name==="reference"){const refTypes=schemaField.type.to;return"".concat(head,"->{").concat(refTypes.map(refType=>joinReferences(refType,tail)).join(","),"}");}const tailFields=tail.length>0&&joinReferences(schemaField.type,tail);const tailWrapper=tailFields?"{".concat(tailFields,"}"):"";return tail.length>0?"".concat(head).concat(tailWrapper):head;}function getExtendedProjection(schemaType,orderBy){return orderBy.map(ordering=>joinReferences(schemaType,ordering.field.split("."))).join(", ");}const ORDER_BY_UPDATED_AT={title:"Last edited",name:"lastEditedDesc",by:[{field:"_updatedAt",direction:"desc"}]};const ORDER_BY_CREATED_AT={title:"Created",name:"lastCreatedDesc",by:[{field:"_createdAt",direction:"desc"}]};const DEFAULT_SELECTED_ORDERING_OPTION=ORDER_BY_UPDATED_AT;const DEFAULT_ORDERING_OPTIONS=[ORDER_BY_UPDATED_AT,// _updatedAt
ORDER_BY_CREATED_AT// _createdAt
];var __defProp$d=Object.defineProperty;var __defNormalProp$d=(obj,key,value)=>key in obj?__defProp$d(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$d=(obj,key,value)=>{__defNormalProp$d(obj,typeof key!=="symbol"?key+"":key,value);return value;};function maybeSerializeMenuItem(item,index,path){return item instanceof MenuItemBuilder?item.serialize({path,index}):item;}class MenuItemBuilder{constructor(_context,spec){this._context=_context;/** menu item option object. See {@link PartialMenuItem} */__publicField$d(this,"spec");this.spec=spec?spec:{};}/**
   * Set menu item action
   * @param action - menu item action. See {@link MenuItemActionType}
   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}
   */action(action){return this.clone({action});}/**
   * Get menu item action
   * @returns menu item builder action. See {@link PartialMenuItem}
   */getAction(){return this.spec.action;}/**
   * Set menu item intent
   * @param intent - menu item intent. See {@link Intent}
   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}
   */intent(intent){return this.clone({intent});}/**
   * Get menu item intent
   * @returns menu item intent. See {@link PartialMenuItem}
   */getIntent(){return this.spec.intent;}/**
   * Set menu item title
   * @param title - menu item title
   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}
   */title(title){return this.clone({title});}/**
   * Get menu item title
   * @returns menu item title
   */getTitle(){return this.spec.title;}/**
   * Set menu item group
   * @param group - menu item group
   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}
   */group(group){return this.clone({group});}/**
   * Get menu item group
   * @returns menu item group. See {@link PartialMenuItem}
   */getGroup(){return this.spec.group;}/**
   * Set menu item icon
   * @param icon - menu item icon
   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}
   */icon(icon){return this.clone({icon});}/**
   * Get menu item icon
   * @returns menu item icon. See {@link PartialMenuItem}
   */getIcon(){return this.spec.icon;}/**
   * Set menu item parameters
   * @param params - menu item parameters. See {@link MenuItemParamsType}
   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}
   */params(params){return this.clone({params});}/**
   * Get meny item parameters
   * @returns menu item parameters. See {@link PartialMenuItem}
   */getParams(){return this.spec.params;}/**
   * Set menu item to show as action
   * @param showAsAction - determine if menu item should show as action
   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}
   */showAsAction(){let showAsAction=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;return this.clone({showAsAction:Boolean(showAsAction)});}/**
   * Check if menu item should show as action
   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}
   */getShowAsAction(){return this.spec.showAsAction;}/** Serialize menu item builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns menu item node based on path provided in options. See {@link MenuItem}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const{title,action,intent}=this.spec;if(!title){const hint=typeof action==="string"?'action: "'.concat(action,'"'):void 0;throw new SerializeError("`title` is required for menu item",options.path,options.index,hint).withHelpUrl(HELP_URL.TITLE_REQUIRED);}if(!action&&!intent){throw new SerializeError("`action` or `intent` required for menu item with title ".concat(this.spec.title),options.path,options.index,'"'.concat(title,'"')).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED);}if(intent&&action){throw new SerializeError("cannot set both `action` AND `intent`",options.path,options.index,'"'.concat(title,'"')).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE);}return{...this.spec,title};}/** Clone menu item builder
   * @param withSpec - menu item options. See {@link PartialMenuItem}
   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}
   */clone(withSpec){const builder=new MenuItemBuilder(this._context);builder.spec={...this.spec,...(withSpec||{})};return builder;}}function getOrderingMenuItem(context,ordering,extendedProjection){return new MenuItemBuilder(context).group("sorting").title("Sort by ".concat(ordering.title)).icon(SortIcon).action("setSortOrder").params({by:ordering.by,extendedProjection});}function getOrderingMenuItemsForSchemaType(context,typeName){const{schema}=context;const type=typeof typeName==="string"?schema.get(typeName):typeName;if(!type||!("orderings"in type)){return[];}return(type.orderings?type.orderings.concat(DEFAULT_ORDERING_OPTIONS):DEFAULT_ORDERING_OPTIONS).map(ordering=>getOrderingMenuItem(context,ordering,getExtendedProjection(type,ordering.by)));}var __defProp$c=Object.defineProperty;var __defNormalProp$c=(obj,key,value)=>key in obj?__defProp$c(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$c=(obj,key,value)=>{__defNormalProp$c(obj,typeof key!=="symbol"?key+"":key,value);return value;};function maybeSerializeMenuItemGroup(item,index,path){return item instanceof MenuItemGroupBuilder?item.serialize({path,index}):item;}class MenuItemGroupBuilder{constructor(_context,spec){this._context=_context;/** Menu item group ID */__publicField$c(this,"_id");/** Menu item group title */__publicField$c(this,"_title");this._id=spec?spec.id:"";this._title=spec?spec.title:"";}/**
   * Set menu item group ID
   * @param id - menu item group ID
   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}
   */id(id){return new MenuItemGroupBuilder(this._context,{id,title:this._title});}/**
   * Get menu item group ID
   * @returns menu item group ID
   */getId(){return this._id;}/**
   * Set menu item group title
   * @param title - menu item group title
   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}
   */title(title){return new MenuItemGroupBuilder(this._context,{id:this._id,title});}/**
   * Get menu item group title
   * @returns menu item group title
   */getTitle(){return this._title;}/**
   * Serialize menu item group builder
   * @param options - serialization options (path). See {@link SerializeOptions}
   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const{_id,_title}=this;if(!_id){throw new SerializeError("`id` is required for a menu item group",options.path,options.index,_title).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!_title){throw new SerializeError("`title` is required for a menu item group",options.path,_id).withHelpUrl(HELP_URL.TITLE_REQUIRED);}return{id:_id,title:_title};}}const disallowedPattern=/([^A-Za-z0-9-_.])/;function validateId(id,parentPath,pathSegment){if(typeof id!=="string"){throw new SerializeError("Structure node id must be of type string, got ".concat(typeof id),parentPath,pathSegment);}const[disallowedChar]=id.match(disallowedPattern)||[];if(disallowedChar){throw new SerializeError('Structure node id cannot contain character "'.concat(disallowedChar,'"'),parentPath,pathSegment);}if(id.startsWith("__edit__")){throw new SerializeError("Structure node id cannot start with __edit__",parentPath,pathSegment);}return id;}function getStructureNodeId(title,id){if(id){return id;}const camelCased=camelCase(title);return disallowedPattern.test(camelCased)?camelCase(speakingurl(title)):camelCased;}var __defProp$b=Object.defineProperty;var __defNormalProp$b=(obj,key,value)=>key in obj?__defProp$b(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$b=(obj,key,value)=>{__defNormalProp$b(obj,typeof key!=="symbol"?key+"":key,value);return value;};class ComponentBuilder{constructor(spec){/** component builder option object */__publicField$b(this,"spec");this.spec={options:{},...(spec?spec:{})};}/** Set Component ID
   * @param id - component ID
   * @returns component builder based on ID provided
   */id(id){return this.clone({id});}/** Get ID
   * @returns ID
   */getId(){return this.spec.id;}/** Set Component title
   * @param title - component title
   * @returns component builder based on title provided (and ID)
   */title(title){return this.clone({title,id:getStructureNodeId(title,this.spec.id)});}/** Get Component title
   * @returns title
   */getTitle(){return this.spec.title;}/** Set Component child
   * @param child - child component
   * @returns component builder based on child component provided
   */child(child){return this.clone({child});}/** Get Component child
   * @returns child component
   */getChild(){return this.spec.child;}/** Set component
   * @param component - user built component
   * @returns component builder based on component provided
   */component(component){return this.clone({component});}/** Get Component
   * @returns component
   */getComponent(){return this.spec.component;}/** Set Component options
   * @param options - component options
   * @returns component builder based on options provided
   */options(options){return this.clone({options});}/** Get Component options
   * @returns component options
   */getOptions(){return this.spec.options||{};}/** Set Component menu items
   * @param menuItems - component menu items
   * @returns component builder based on menuItems provided
   */menuItems(menuItems){return this.clone({menuItems});}/** Get Component menu items
   * @returns menu items
   */getMenuItems(){return this.spec.menuItems;}/** Set Component menu item groups
   * @param menuItemGroups - component menu item groups
   * @returns component builder based on menuItemGroups provided
   */menuItemGroups(menuItemGroups){return this.clone({menuItemGroups});}/** Get Component menu item groups
   * @returns menu item groups
   */getMenuItemGroups(){return this.spec.menuItemGroups;}/** Serialize component
   * @param options - serialization options
   * @returns component object based on path provided in options
   *
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const{id,title,child,options:componentOptions,component}=this.spec;if(!id){throw new SerializeError("`id` is required for `component` structure item",options.path,options.index).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!component){throw new SerializeError("`component` is required for `component` structure item",options.path,options.index).withHelpUrl(HELP_URL.ID_REQUIRED);}return{id:validateId(id,options.path,options.index),title,type:"component",child,component,options:componentOptions||{},menuItems:(this.spec.menuItems||[]).map((item,i)=>maybeSerializeMenuItem(item,i,options.path)),menuItemGroups:(this.spec.menuItemGroups||[]).map((item,i)=>maybeSerializeMenuItemGroup(item,i,options.path))};}/** Clone component builder (allows for options overriding)
   * @param withSpec - component builder options
   * @returns cloned builder
   */clone(withSpec){const builder=new ComponentBuilder();builder.spec={...this.spec,...(withSpec||{})};return builder;}}async function resolveTypeForDocument(getClient,id){const query="*[_id in [$documentId, $draftId]]._type";const documentId=getPublishedId(id);const draftId=getDraftId(id);const types=await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(query,{documentId,draftId},{tag:"structure.resolve-type"});return types[0];}var __defProp$a=Object.defineProperty;var __defNormalProp$a=(obj,key,value)=>key in obj?__defProp$a(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$a=(obj,key,value)=>{__defNormalProp$a(obj,typeof key!=="symbol"?key+"":key,value);return value;};class GenericViewBuilder{constructor(){/** Generic view option object */__publicField$a(this,"spec",{});}/** Set generic view ID
   * @param id - generic view ID
   * @returns generic view builder based on ID provided.
   */id(id){return this.clone({id});}/** Get generic view ID
   * @returns generic view ID
   */getId(){return this.spec.id;}/** Set generic view title
   * @param title - generic view title
   * @returns generic view builder based on title provided and (if provided) its ID.
   */title(title){return this.clone({title,id:this.spec.id||kebabCase(title)});}/** Get generic view title
   * @returns generic view title
   */getTitle(){return this.spec.title;}/** Set generic view icon
   * @param icon - generic view icon
   * @returns generic view builder based on icon provided.
   */icon(icon){return this.clone({icon});}/** Get generic view icon
   * @returns generic view icon
   */getIcon(){return this.spec.icon;}/** Serialize generic view
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic view object based on path provided in options. See {@link BaseView}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const{id,title,icon}=this.spec;if(!id){throw new SerializeError("`id` is required for view item",options.path,options.index).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!title){throw new SerializeError("`title` is required for view item",options.path,options.index).withHelpUrl(HELP_URL.TITLE_REQUIRED);}return{id:validateId(id,options.path,options.index),title,icon};}}function isSerializable(view){return typeof view.serialize==="function";}function maybeSerializeView(item,index,path){return isSerializable(item)?item.serialize({path,index}):item;}var __defProp$9=Object.defineProperty;var __defNormalProp$9=(obj,key,value)=>key in obj?__defProp$9(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$9=(obj,key,value)=>{__defNormalProp$9(obj,typeof key!=="symbol"?key+"":key,value);return value;};const isComponentSpec=spec=>isRecord$1(spec)&&spec.type==="component";class ComponentViewBuilder extends GenericViewBuilder{constructor(componentOrSpec){const spec=isComponentSpec(componentOrSpec)?{...componentOrSpec}:{options:{}};super();/** Partial Component view option object. See {@link ComponentView} */__publicField$9(this,"spec");this.spec=spec;const userComponent=typeof componentOrSpec==="function"?componentOrSpec:this.spec.component;if(userComponent){this.spec=this.component(userComponent).spec;}}/** Set view Component
   * @param component - component view component. See {@link UserViewComponent}
   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}
   */component(component){return this.clone({component});}/** Get view Component
   * @returns Partial component view. See {@link ComponentView}
   */getComponent(){return this.spec.component;}/** Set view Component options
   * @param options - component view options
   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}
   */options(options){return this.clone({options});}/** Get view Component options
   * @returns component view options. See {@link ComponentView}
   */getOptions(){return this.spec.options||{};}/** Serialize view Component
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns component view based on path provided in options. See {@link ComponentView}
   *
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const base=super.serialize(options);const component=this.spec.component;if(typeof component!=="function"){throw new SerializeError("`component` is required and must be a function for `component()` view item",options.path,options.index).withHelpUrl(HELP_URL.COMPONENT_REQUIRED);}return{...base,component,options:this.spec.options||{},type:"component"};}/** Clone Component view builder (allows for options overriding)
   * @param withSpec - partial for component view option. See {@link ComponentView}
   * @returns component view builder. See {@link ComponentViewBuilder}
   */clone(withSpec){const builder=new ComponentViewBuilder();builder.spec={...this.spec,...(withSpec||{})};return builder;}}var __defProp$8=Object.defineProperty;var __defNormalProp$8=(obj,key,value)=>key in obj?__defProp$8(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$8=(obj,key,value)=>{__defNormalProp$8(obj,typeof key!=="symbol"?key+"":key,value);return value;};class FormViewBuilder extends GenericViewBuilder{constructor(spec){super();/** Document list options. See {@link FormView} */__publicField$8(this,"spec");this.spec={id:"editor",title:"Editor",...(spec?spec:{})};}/**
   * Serialize Form view builder
   * @param options - Serialize options. See {@link SerializeOptions}
   * @returns form view builder based on path provided in options. See {@link FormView}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};return{...super.serialize(options),type:"form"};}/**
   * Clone Form view builder (allows for options overriding)
   * @param withSpec - Partial form view builder options. See {@link FormView}
   * @returns form view builder. See {@link FormViewBuilder}
   */clone(withSpec){const builder=new FormViewBuilder();builder.spec={...this.spec,...(withSpec||{})};return builder;}}const form=spec=>new FormViewBuilder(spec);const component=componentOrSpec=>new ComponentViewBuilder(componentOrSpec);var views=/*#__PURE__*/Object.freeze({__proto__:null,ComponentViewBuilder:ComponentViewBuilder,FormViewBuilder:FormViewBuilder,GenericViewBuilder:GenericViewBuilder,component:component,form:form,maybeSerializeView:maybeSerializeView});var __defProp$7=Object.defineProperty;var __defNormalProp$7=(obj,key,value)=>key in obj?__defProp$7(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$7=(obj,key,value)=>{__defNormalProp$7(obj,typeof key!=="symbol"?key+"":key,value);return value;};const createDocumentChildResolver=_ref90=>{let{resolveDocumentNode,getClient}=_ref90;return async(itemId,_ref91)=>{let{params,path}=_ref91;let type=params.type;const parentPath=path.slice(0,path.length-1);const currentSegment=path[path.length-1];if(!type){type=await resolveTypeForDocument(getClient,itemId);}if(!type){throw new SerializeError("Failed to resolve document, and no type provided in parameters.",parentPath,currentSegment);}return resolveDocumentNode({documentId:itemId,schemaType:type});};};class DocumentBuilder{constructor(_context,spec){this._context=_context;/** Component builder option object See {@link PartialDocumentNode} */__publicField$7(this,"spec");this.spec=spec?spec:{};}/** Set Document Builder ID
   * @param id - document builder ID
   * @returns document builder based on ID provided. See {@link DocumentBuilder}
   */id(id){return this.clone({id});}/** Get Document Builder ID
   * @returns document ID. See {@link PartialDocumentNode}
   */getId(){return this.spec.id;}/** Set Document title
   * @param title - document title
   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}
   */title(title){return this.clone({title,id:getStructureNodeId(title,this.spec.id)});}/** Get Document title
   * @returns document title. See {@link PartialDocumentNode}
   */getTitle(){return this.spec.title;}/** Set Document child
   * @param child - document child
   * @returns document builder based on child provided. See {@link DocumentBuilder}
   */child(child){return this.clone({child});}/** Get Document child
   * @returns document child. See {@link PartialDocumentNode}
   */getChild(){return this.spec.child;}/** Set Document ID
   * @param documentId - document ID
   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}
   */documentId(documentId){const paneId=this.spec.id||documentId;return this.clone({id:paneId,options:{...(this.spec.options||{}),id:documentId}});}/** Get Document ID
   * @returns document ID. See {@link DocumentOptions}
   */getDocumentId(){var _a;return(_a=this.spec.options)==null?void 0:_a.id;}/** Set Document Type
   * @param documentType - document type
   * @returns document builder with document based on type provided. See {@link DocumentBuilder}
   */schemaType(documentType){return this.clone({options:{...(this.spec.options||{}),type:typeof documentType==="string"?documentType:documentType.name}});}/** Get Document Type
   * @returns document type. See {@link DocumentOptions}
   */getSchemaType(){var _a;return(_a=this.spec.options)==null?void 0:_a.type;}/** Set Document Template
   * @param templateId - document template ID
   * @param parameters - document template parameters
   * @returns document builder with document based on template provided. See {@link DocumentBuilder}
   */initialValueTemplate(templateId,parameters){return this.clone({options:{...(this.spec.options||{}),template:templateId,templateParameters:parameters}});}/** Get Document Template
   * @returns document template. See {@link DocumentOptions}
   */getInitialValueTemplate(){var _a;return(_a=this.spec.options)==null?void 0:_a.template;}/** Get Document's initial value Template parameters
   * @returns document template parameters. See {@link DocumentOptions}
   */getInitialValueTemplateParameters(){var _a;return(_a=this.spec.options)==null?void 0:_a.templateParameters;}/** Set Document views
   * @param views - document views. See {@link ViewBuilder} and {@link View}
   * @returns document builder with document based on views provided. See {@link DocumentBuilder}
   */views(views){return this.clone({views});}/** Get Document views
   * @returns document views. See {@link ViewBuilder} and {@link View}
   */getViews(){return this.spec.views||[];}/** Serialize Document builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}
   */serialize(){let{path=[],index,hint}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const urlId=path[index||path.length-1];const id=this.spec.id||urlId&&"".concat(urlId)||"";const options={id,type:void 0,template:void 0,templateParameters:void 0,...this.spec.options};if(typeof id!=="string"||!id){throw new SerializeError("`id` is required for document nodes",path,index,hint).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!options||!options.id){throw new SerializeError("document id (`id`) is required for document nodes",path,id,hint).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED);}if(!options||!options.type){throw new SerializeError("document type (`schemaType`) is required for document nodes",path,id,hint);}const views=(this.spec.views&&this.spec.views.length>0?this.spec.views:[form()]).map((item,i)=>maybeSerializeView(item,i,path));const viewIds=views.map(view=>view.id);const dupes=uniq(viewIds.filter((viewId,i)=>viewIds.includes(viewId,i+1)));if(dupes.length>0){throw new SerializeError("document node has views with duplicate IDs: ".concat(dupes.join(",  ")),path,id,hint);}return{...this.spec,child:this.spec.child||createDocumentChildResolver(this._context),id:validateId(id,path,index),type:"document",options:getDocumentOptions(options),views};}/** Clone Document builder
   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}
   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}
   */clone(){let withSpec=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const builder=new DocumentBuilder(this._context);const options={...(this.spec.options||{}),...(withSpec.options||{})};builder.spec={...this.spec,...withSpec,options};return builder;}}function getDocumentOptions(spec){const opts={id:spec.id||"",type:spec.type||"*"};if(spec.template){opts.template=spec.template;}if(spec.templateParameters){opts.templateParameters=spec.templateParameters;}return opts;}function documentFromEditor(context,spec){let doc=(spec==null?void 0:spec.type)?// Use user-defined document fragment as base if possible
context.resolveDocumentNode({schemaType:spec.type}):// Fall back to plain old document builder
new DocumentBuilder(context);if(!spec)return doc;const{id,type,template,templateParameters}=spec.options;doc=doc.id(spec.id).documentId(id);if(type){doc=doc.schemaType(type);}if(template){doc=doc.initialValueTemplate(template,templateParameters);}if(spec.child){doc=doc.child(spec.child);}return doc;}function documentFromEditorWithInitialValue(_ref92,templateId,parameters){let{resolveDocumentNode,templates}=_ref92;const template=templates.find(t=>t.id===templateId);if(!template){throw new Error('Template with ID "'.concat(templateId,'" not defined'));}return resolveDocumentNode({schemaType:template.schemaType}).initialValueTemplate(templateId,parameters);}const layoutOptions=["default","card","media","detail","block"];const DEFAULT_INTENT_HANDLER=Symbol("Document type list canHandleIntent");const defaultIntentChecker=(intentName,params,_ref93)=>{let{pane}=_ref93;var _a,_b;const isEdit=intentName==="edit";const isCreate=intentName==="create";const typedSpec=pane;const paneFilter=((_a=typedSpec.options)==null?void 0:_a.filter)||"";const paneParams=((_b=typedSpec.options)==null?void 0:_b.params)||{};const typeNames=typedSpec.schemaTypeName?[typedSpec.schemaTypeName]:getTypeNamesFromFilter(paneFilter,paneParams);const initialValueTemplates=typedSpec.initialValueTemplates||[];if(isCreate&&params.template){return initialValueTemplates.some(tpl=>tpl.templateId===params.template);}return isEdit&&params.id&&typeNames.includes(params.type)||isCreate&&typeNames.includes(params.type);};defaultIntentChecker.identity=DEFAULT_INTENT_HANDLER;var __defProp$6=Object.defineProperty;var __defNormalProp$6=(obj,key,value)=>key in obj?__defProp$6(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$6=(obj,key,value)=>{__defNormalProp$6(obj,typeof key!=="symbol"?key+"":key,value);return value;};class InitialValueTemplateItemBuilder{constructor(_context,spec){this._context=_context;/** Initial Value template item option object. See {@link InitialValueTemplateItem} */__publicField$6(this,"spec");this.spec=spec?spec:{};}/** Set initial value template item builder ID
   * @param id - initial value template item ID
   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}
   */id(id){return this.clone({id});}/** Get initial value template item builder ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */getId(){return this.spec.id;}/** Set initial value template item title
   * @param title - initial value template item title
   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}
   */title(title){return this.clone({title});}/** Get initial value template item title
   * @returns initial value template item title. See {@link InitialValueTemplateItem}
   */getTitle(){return this.spec.title;}/** Set initial value template item description
   * @param description - initial value template item description
   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}
   */description(description){return this.clone({description});}/** Get initial value template item description
   * @returns initial value template item description. See {@link InitialValueTemplateItem}
   */getDescription(){return this.spec.description;}/** Set initial value template ID
   * @param templateId - initial value template item template ID
   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}
   */templateId(templateId){const paneId=this.spec.id||templateId;return this.clone({id:paneId,templateId});}/** Get initial value template item template ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */getTemplateId(){return this.spec.templateId;}/** Get initial value template item template parameters
   * @param parameters - initial value template item parameters
   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}
   */parameters(parameters){return this.clone({parameters});}/** Get initial value template item template parameters
   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}
   */getParameters(){return this.spec.parameters;}/** Serialize initial value template item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}
   */serialize(){let{path=[],index,hint}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const{spec,_context}=this;const{templates}=_context;if(typeof spec.id!=="string"||!spec.id){throw new SerializeError("`id` is required for initial value template item nodes",path,index,hint).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!spec.templateId){throw new SerializeError("template id (`templateId`) is required for initial value template item nodes",path,spec.id,hint).withHelpUrl(HELP_URL.ID_REQUIRED);}const template=templates.find(t=>t.id===spec.templateId);if(!template){throw new SerializeError("template id (`templateId`) is required for initial value template item nodes",path,spec.id,hint).withHelpUrl(HELP_URL.ID_REQUIRED);}return{id:spec.id,templateId:spec.id,schemaType:template.schemaType,type:"initialValueTemplateItem",description:spec.description||template.description,title:spec.title||template.title,subtitle:spec.subtitle,icon:spec.icon||template.icon,initialDocumentId:spec.initialDocumentId,parameters:spec.parameters};}/** Clone generic view builder (allows for options overriding)
   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}
   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}
   */clone(){let withSpec=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const builder=new InitialValueTemplateItemBuilder(this._context);builder.spec={...this.spec,...withSpec};return builder;}}function defaultInitialValueTemplateItems(context){const{schema,getStructureBuilder,templates}=context;const typeNames=schema.getTypeNames();const ordered=templates.filter(tpl=>{var _a;return!((_a=tpl.parameters)==null?void 0:_a.length);}).sort((a,b)=>typeNames.indexOf(a.schemaType)-typeNames.indexOf(b.schemaType));return ordered.map(tpl=>getStructureBuilder().initialValueTemplateItem(tpl.id));}function maybeSerializeInitialValueTemplateItem(item,index,path){return item instanceof InitialValueTemplateItemBuilder?item.serialize({path,index}):item;}function menuItemsFromInitialValueTemplateItems(context,templateItems){const{schema,templates}=context;return templateItems.map(item=>{const template=templates.find(t=>t.id===item.templateId);const title=item.title||(template==null?void 0:template.title)||"Create new";const params=pickBy({type:template&&template.schemaType,template:item.templateId},Boolean);const intentParams=item.parameters?[params,item.parameters]:params;const schemaType=template&&schema.get(template.schemaType);return new MenuItemBuilder(context).title(title).icon(template&&template.icon||(schemaType==null?void 0:schemaType.icon)||ComposeIcon).intent({type:"create",params:intentParams}).serialize();});}var __defProp$5=Object.defineProperty;var __defNormalProp$5=(obj,key,value)=>key in obj?__defProp$5(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$5=(obj,key,value)=>{__defNormalProp$5(obj,typeof key!=="symbol"?key+"":key,value);return value;};function noChildResolver(){return void 0;}const shallowIntentChecker=(intentName,params,_ref94)=>{let{pane,index}=_ref94;return index<=1&&defaultIntentChecker(intentName,params,{pane,index});};class GenericListBuilder{constructor(){/** Check if initial value templates are set */__publicField$5(this,"initialValueTemplatesSpecified",false);/** Generic list option object */__publicField$5(this,"spec",{});}/** Set generic list ID
   * @param id - generic list ID
   * @returns generic list builder based on ID provided.
   */id(id){return this.clone({id});}/** Get generic list ID
   * @returns generic list ID
   */getId(){return this.spec.id;}/** Set generic list title
   * @param title - generic list title
   * @returns generic list builder based on title and ID provided.
   */title(title){return this.clone({title,id:getStructureNodeId(title,this.spec.id)});}/** Get generic list title
   * @returns generic list title
   */getTitle(){return this.spec.title;}/** Set generic list layout
   * @param defaultLayout - generic list layout key.
   * @returns generic list builder based on layout provided.
   */defaultLayout(defaultLayout){return this.clone({defaultLayout});}/** Get generic list layout
   * @returns generic list layout
   */getDefaultLayout(){return this.spec.defaultLayout;}/** Set generic list menu items
   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}
   * @returns generic list builder based on menu items provided.
   */menuItems(menuItems){return this.clone({menuItems});}/** Get generic list menu items
   * @returns generic list menu items
   */getMenuItems(){return this.spec.menuItems;}/** Set generic list menu item groups
   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}
   * @returns generic list builder based on menu item groups provided.
   */menuItemGroups(menuItemGroups){return this.clone({menuItemGroups});}/** Get generic list menu item groups
   * @returns generic list menu item groups
   */getMenuItemGroups(){return this.spec.menuItemGroups;}/** Set generic list child
   * @param child - generic list child. See {@link Child}
   * @returns generic list builder based on child provided (clone).
   */child(child){return this.clone({child});}/** Get generic list child
   * @returns generic list child
   */getChild(){return this.spec.child;}/** Set generic list can handle intent
   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}
   * @returns generic list builder based on can handle intent provided.
   */canHandleIntent(canHandleIntent){return this.clone({canHandleIntent});}/** Get generic list can handle intent
   * @returns generic list can handle intent
   */getCanHandleIntent(){return this.spec.canHandleIntent;}/** Set generic list display options
   * @param enabled - allow / disallow for showing icons
   * @returns generic list builder based on display options (showIcons) provided.
   */showIcons(){let enabled=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;return this.clone({displayOptions:{...(this.spec.displayOptions||{}),showIcons:enabled}});}/** Get generic list display options
   * @returns generic list display options (specifically showIcons)
   */getShowIcons(){return this.spec.displayOptions?this.spec.displayOptions.showIcons:void 0;}/** Set generic list initial value templates
   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}
   * @returns generic list builder based on templates provided.
   */initialValueTemplates(templates){this.initialValueTemplatesSpecified=true;return this.clone({initialValueTemplates:Array.isArray(templates)?templates:[templates]});}/** Get generic list initial value templates
   * @returns generic list initial value templates
   */getInitialValueTemplates(){return this.spec.initialValueTemplates;}/** Serialize generic list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic list object based on path provided in options. See {@link GenericList}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const id=this.spec.id||"";const path=options.path;const defaultLayout=this.spec.defaultLayout;if(defaultLayout&&!layoutOptions.includes(defaultLayout)){throw new SerializeError("`layout` must be one of ".concat(layoutOptions.map(item=>'"'.concat(item,'"')).join(", ")),path,id||options.index,this.spec.title);}const initialValueTemplates=(this.spec.initialValueTemplates||[]).map((item,i)=>maybeSerializeInitialValueTemplateItem(item,i,path));return{id:validateId(id,options.path,id||options.index),title:this.spec.title,type:"genericList",defaultLayout,child:this.spec.child||noChildResolver,canHandleIntent:this.spec.canHandleIntent||shallowIntentChecker,displayOptions:this.spec.displayOptions,initialValueTemplates,menuItems:(this.spec.menuItems||[]).map((item,i)=>maybeSerializeMenuItem(item,i,path)),menuItemGroups:(this.spec.menuItemGroups||[]).map((item,i)=>maybeSerializeMenuItemGroup(item,i,path))};}}var __defProp$4=Object.defineProperty;var __defNormalProp$4=(obj,key,value)=>key in obj?__defProp$4(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$4=(obj,key,value)=>{__defNormalProp$4(obj,typeof key!=="symbol"?key+"":key,value);return value;};const validateFilter=(spec,options)=>{var _a;const filter=((_a=spec.options)==null?void 0:_a.filter.trim())||"";if(["*","{"].includes(filter[0])){throw new SerializeError("`filter` cannot start with `".concat(filter[0],"` - looks like you are providing a query, not a filter"),options.path,spec.id,spec.title).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER);}return filter;};const createDocumentChildResolverForItem=context=>(itemId,options)=>{var _a;const parentItem=options.parent;const template=((_a=options.params)==null?void 0:_a.template)?context.templates.find(tpl=>tpl.id===options.params.template):void 0;const type=template?template.schemaType:parentItem.schemaTypeName||resolveTypeForDocument(context.getClient,itemId);return Promise.resolve(type).then(schemaType=>schemaType?context.resolveDocumentNode({schemaType,documentId:itemId}):new DocumentBuilder(context).id("editor").documentId(itemId).schemaType(""));};class DocumentListBuilder extends GenericListBuilder{constructor(_context,spec){super();this._context=_context;/** Document list options. See {@link PartialDocumentList} */__publicField$4(this,"spec");this.spec=spec||{};this.initialValueTemplatesSpecified=Boolean(spec==null?void 0:spec.initialValueTemplates);}/** Set API version
   * @param apiVersion - API version
   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}
   */apiVersion(apiVersion){return this.clone({options:{...(this.spec.options||{filter:""}),apiVersion}});}/** Get API version
   * @returns API version
   */getApiVersion(){var _a;return(_a=this.spec.options)==null?void 0:_a.apiVersion;}/** Set Document list filter
   * @param filter - filter
   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}
   */filter(filter){return this.clone({options:{...(this.spec.options||{}),filter}});}/** Get Document list filter
   * @returns filter
   */getFilter(){var _a;return(_a=this.spec.options)==null?void 0:_a.filter;}/** Set Document list schema type name
   * @param type - schema type name.
   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}
   */schemaType(type){const schemaTypeName=typeof type==="string"?type:type.name;return this.clone({schemaTypeName});}/** Get Document list schema type name
   * @returns schema type name
   */getSchemaType(){return this.spec.schemaTypeName;}/** Set Document list options' parameters
   * @param params - parameters
   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}
   */params(params){return this.clone({options:{...(this.spec.options||{filter:""}),params}});}/** Get Document list options' parameters
   * @returns options
   */getParams(){var _a;return(_a=this.spec.options)==null?void 0:_a.params;}/** Set Document list default ordering
   * @param ordering - default sort ordering array. See {@link SortOrderingItem}
   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}
   */defaultOrdering(ordering){if(!Array.isArray(ordering)){throw new Error("`defaultOrdering` must be an array of order clauses");}return this.clone({options:{...(this.spec.options||{filter:""}),defaultOrdering:ordering}});}/** Get Document list default ordering
   * @returns default ordering. See {@link SortOrderingItem}
   */getDefaultOrdering(){var _a;return(_a=this.spec.options)==null?void 0:_a.defaultOrdering;}/** Serialize Document list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list object based on path provided in options. See {@link DocumentList}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};var _a;if(typeof this.spec.id!=="string"||!this.spec.id){throw new SerializeError("`id` is required for document lists",options.path,options.index,this.spec.title).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!this.spec.options||!this.spec.options.filter){throw new SerializeError("`filter` is required for document lists",options.path,this.spec.id,this.spec.title).withHelpUrl(HELP_URL.FILTER_REQUIRED);}const hasSimpleFilter=((_a=this.spec.options)==null?void 0:_a.filter)==="_type == $type";if(!hasSimpleFilter&&this.spec.options.filter&&!this.spec.options.apiVersion){console.warn("No apiVersion specified for document type list with custom filter: `".concat(this.spec.options.filter,"`. This will be required in the future. See %s for more info."),generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER));}return{...super.serialize(options),type:"documentList",schemaTypeName:this.spec.schemaTypeName,child:this.spec.child||createDocumentChildResolverForItem(this._context),options:{...this.spec.options,// @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4
apiVersion:this.spec.options.apiVersion||DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,filter:validateFilter(this.spec,options)}};}/** Clone Document list builder (allows for options overriding)
   * @param withSpec - override document list spec. See {@link PartialDocumentList}
   * @returns document list builder. See {@link DocumentListBuilder}
   */clone(withSpec){const builder=new DocumentListBuilder(this._context);builder.spec={...this.spec,...(withSpec||{})};if(!this.initialValueTemplatesSpecified){builder.spec.initialValueTemplates=inferInitialValueTemplates(this._context,builder.spec);}if(!builder.spec.schemaTypeName){builder.spec.schemaTypeName=inferTypeName(builder.spec);}return builder;}/** Get Document list spec
   * @returns document list spec. See {@link PartialDocumentList}
   */getSpec(){return this.spec;}}function inferInitialValueTemplates(context,spec){const{document}=context;const{schemaTypeName,options}=spec;const{filter,params}=options||{filter:"",params:{}};const typeNames=schemaTypeName?[schemaTypeName]:Array.from(new Set(getTypeNamesFromFilter(filter,params)));if(typeNames.length===0){return void 0;}return typeNames.flatMap(schemaType=>document.resolveNewDocumentOptions({type:"structure",schemaType})).map(option=>({...option,icon:ComposeIcon}));}function inferTypeName(spec){const{options}=spec;const{filter,params}=options||{filter:"",params:{}};const typeNames=getTypeNamesFromFilter(filter,params);return typeNames.length===1?typeNames[0]:void 0;}function getTypeNamesFromFilter(filter){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let typeNames=getTypeNamesFromEqualityFilter(filter,params);if(typeNames.length===0){typeNames=getTypeNamesFromInTypesFilter(filter,params);}return typeNames;}function getTypeNamesFromEqualityFilter(filter){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const pattern=/\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type/g;const matches=[];let match;while((match=pattern.exec(filter))!==null){matches.push(match[1]||match[2]);}return matches.map(candidate=>{const typeName=candidate[0]==="$"?params[candidate.slice(1)]:candidate;const normalized=(typeName||"").trim().replace(/^["']|["']$/g,"");return normalized;}).filter(Boolean);}function getTypeNamesFromInTypesFilter(filter){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const pattern=/\b_type\s+in\s+\[(.*?)\]/;const matches=filter.match(pattern);if(!matches){return[];}return matches[1].split(/,\s*/).map(match=>match.trim().replace(/^["']+|["']+$/g,"")).map(item=>item[0]==="$"?params[item.slice(1)]:item).filter(Boolean);}var __defProp$3=Object.defineProperty;var __defNormalProp$3=(obj,key,value)=>key in obj?__defProp$3(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$3=(obj,key,value)=>{__defNormalProp$3(obj,typeof key!=="symbol"?key+"":key,value);return value;};const getArgType=thing=>{if(thing instanceof ListBuilder){return"ListBuilder";}if(isPromise(thing)){return"Promise";}return Array.isArray(thing)?"array":typeof thing;};const isListItem=item=>{return item.type==="listItem";};const defaultCanHandleIntent=(intentName,params,context)=>{const pane=context.pane;const items=pane.items||[];return items.filter(isDocumentListItem).some(item=>item.schemaType.name===params.type&&item._id===params.id)||shallowIntentChecker(intentName,params,context);};const resolveChildForItem=(itemId,options)=>{const parentItem=options.parent;const items=parentItem.items.filter(isListItem);const target=(items.find(item=>item.id===itemId)||{child:void 0}).child;if(!target||typeof target!=="function"){return target;}return typeof target==="function"?target(itemId,options):target;};function maybeSerializeListItem(item,index,path){if(item instanceof ListItemBuilder){return item.serialize({path,index});}const listItem=item;if(listItem&&listItem.type==="divider"){return item;}if(!listItem||listItem.type!=="listItem"){const gotWhat=listItem&&listItem.type||getArgType(listItem);const helpText=gotWhat==="array"?" - did you forget to spread (...moreItems)?":"";throw new SerializeError('List items must be of type "listItem", got "'.concat(gotWhat,'"').concat(helpText),path,index).withHelpUrl(HELP_URL.INVALID_LIST_ITEM);}return item;}function isPromise(thing){return isRecord$1(thing)&&typeof thing.then==="function";}class ListBuilder extends GenericListBuilder{constructor(_context,spec){super();this._context=_context;/** buildable list option object. See {@link BuildableList} */__publicField$3(this,"spec");this.spec=spec?spec:{};this.initialValueTemplatesSpecified=Boolean(spec&&spec.initialValueTemplates);}/**
   * Set list builder based on items provided
   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}
   * @returns list builder based on items provided. See {@link ListBuilder}
   */items(items){return this.clone({items});}/** Get list builder items
   * @returns list items. See {@link BuildableList}
   */getItems(){return this.spec.items;}/** Serialize list builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns list based on path in options. See {@link List}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const id=this.spec.id;if(typeof id!=="string"||!id){throw new SerializeError("`id` is required for lists",options.path,options.index).withHelpUrl(HELP_URL.ID_REQUIRED);}const items=typeof this.spec.items==="undefined"?[]:this.spec.items;if(!Array.isArray(items)){throw new SerializeError("`items` must be an array of items",options.path,options.index).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY);}const path=(options.path||[]).concat(id);const serializedItems=items.map((item,index)=>maybeSerializeListItem(item,index,path));const dupes=serializedItems.filter((val,i)=>find(serializedItems,{id:val.id},i+1));if(dupes.length>0){const dupeIds=dupes.map(item=>item.id).slice(0,5);const dupeDesc=dupes.length>5?"".concat(dupeIds.join(", "),"..."):dupeIds.join(", ");throw new SerializeError("List items with same ID found (".concat(dupeDesc,")"),options.path,options.index).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE);}return{...super.serialize(options),type:"list",canHandleIntent:this.spec.canHandleIntent||defaultCanHandleIntent,child:this.spec.child||resolveChildForItem,items:serializedItems};}/**
   * Clone list builder and return new list builder based on context and spec provided
   * @param withSpec - list options. See {@link BuildableList}
   * @returns new list builder based on context and spec provided. See {@link ListBuilder}
   */clone(withSpec){const builder=new ListBuilder(this._context);builder.spec={...this.spec,...(withSpec||{})};return builder;}}var __defProp$2=Object.defineProperty;var __defNormalProp$2=(obj,key,value)=>key in obj?__defProp$2(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$2=(obj,key,value)=>{__defNormalProp$2(obj,typeof key!=="symbol"?key+"":key,value);return value;};class ListItemBuilder{constructor(_context,spec){this._context=_context;/** List item option object. See {@link PartialListItem} */__publicField$2(this,"spec");this.spec=spec?spec:{};}/**
   * Set list item ID
   * @returns list item builder based on ID provided. See {@link ListItemBuilder}
   */id(id){return this.clone({id});}/**
   * Get list item ID
   * @returns list item ID. See {@link PartialListItem}
   */getId(){return this.spec.id;}/**
   * Set list item title
   * @returns list item builder based on title provided. See {@link ListItemBuilder}
   */title(title){return this.clone({title,id:getStructureNodeId(title,this.spec.id)});}/**
   * Get list item title
   * @returns list item title. See {@link PartialListItem}
   */getTitle(){return this.spec.title;}/**
   * Set list item icon
   * @returns list item builder based on icon provided. See {@link ListItemBuilder}
   */icon(icon){return this.clone({icon});}/**
   * Set if list item should show icon
   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}
   */showIcon(){let enabled=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;return this.clone({displayOptions:{...(this.spec.displayOptions||{}),showIcon:enabled}});}/**
   * Check if list item should show icon
   * @returns true if it should show the icon, false if not, undefined if not set
   */getShowIcon(){return this.spec.displayOptions?this.spec.displayOptions.showIcon:void 0;}/**
   *Get list item icon
   * @returns list item icon. See {@link PartialListItem}
   */getIcon(){return this.spec.icon;}/**
   * Set list item child
   * @param child - list item child. See {@link UnserializedListItemChild}
   * @returns list item builder based on child provided. See {@link ListItemBuilder}
   */child(child){return this.clone({child});}/**
   * Get list item child
   * @returns list item child. See {@link PartialListItem}
   */getChild(){return this.spec.child;}/**
   * Set list item schema type
   * @param schemaType - list item schema type. See {@link SchemaType}
   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}
   */schemaType(schemaType){return this.clone({schemaType});}/**
   * Get list item schema type
   * @returns list item schema type. See {@link PartialListItem}
   */getSchemaType(){const schemaType=this.spec.schemaType;if(typeof schemaType==="string"){return this._context.schema.get(schemaType);}return this.spec.schemaType;}/** Serialize list item builder
   * @param options - serialization options. See {@link ListItemSerializeOptions}
   * @returns list item node based on path provided in options. See {@link ListItem}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const{id,title,child}=this.spec;if(typeof id!=="string"||!id){throw new SerializeError("`id` is required for list items",options.path,options.index).withHelpUrl(HELP_URL.ID_REQUIRED);}if(!options.titleIsOptional&&(typeof title!=="string"||!title)){throw new SerializeError("`title` is required for list items",options.path,id).withHelpUrl(HELP_URL.TITLE_REQUIRED);}let schemaType=this.spec.schemaType;if(typeof schemaType==="string"){const type=this._context.schema.get(schemaType);if(!type){throw new SerializeError('Could not find type "'.concat(schemaType,'" in schema'),options.path,id).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND);}schemaType=type;}const serializeOptions={path:options.path.concat(id),hint:"child"};let listChild=child instanceof ComponentBuilder||child instanceof DocumentListBuilder||child instanceof DocumentBuilder||child instanceof ListBuilder?child.serialize(serializeOptions):child;if(typeof listChild==="function"){const originalChild=listChild;listChild=(itemId,childOptions)=>{return originalChild(itemId,{...childOptions,serializeOptions});};}return{...this.spec,id:validateId(id,options.path,options.index),schemaType,child:listChild,title,type:"listItem"};}/** Clone list item builder
   * @param withSpec - partial list item options. See {@link PartialListItem}
   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}
   */clone(withSpec){const builder=new ListItemBuilder(this._context);builder.spec={...this.spec,...(withSpec||{})};return builder;}}var __defProp$1=Object.defineProperty;var __defNormalProp$1=(obj,key,value)=>key in obj?__defProp$1(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField$1=(obj,key,value)=>{__defNormalProp$1(obj,typeof key!=="symbol"?key+"":key,value);return value;};const createDefaultChildResolver=(context,spec)=>documentId=>{const schemaType=spec.schemaType&&(typeof spec.schemaType==="string"?spec.schemaType:spec.schemaType.name);return schemaType?context.resolveDocumentNode({schemaType,documentId}):new DocumentBuilder(context).id("documentEditor").documentId(documentId);};class DocumentListItemBuilder extends ListItemBuilder{constructor(_context,spec){super(_context,spec);this._context=_context;/** Document list options. See {@link PartialDocumentListItem} */__publicField$1(this,"spec");this.spec=spec?spec:{};}/**
   * Serialize document list item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list item object based on path provided in options. See {@link DocumentListItem}
   */serialize(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{path:[]};const spec=super.serialize({...options,titleIsOptional:true});if(!spec.schemaType){throw new SerializeError("`schemaType` is required for document list items",options.path,options.index).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED);}const child=spec.child||createDefaultChildResolver(this._context,spec);return{...spec,child,schemaType:spec.schemaType,_id:spec.id};}/** Clone Document list item builder (allows for options overriding)
   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}
   * @returns document list item builder. See {@link DocumentListItemBuilder}
   */clone(withSpec){const builder=new DocumentListItemBuilder(this._context);builder.spec={...this.spec,...(withSpec||{})};return builder;}}function isDocumentListItem(item){return isRecord$1(item)&&typeof item.schemaType!=="undefined"&&typeof item._id==="string";}var __defProp=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);return value;};class DocumentTypeListBuilder extends DocumentListBuilder{constructor(_context,spec){super(_context);this._context=_context;/** Document list options. See {@link PartialDocumentList} */__publicField(this,"spec");this.spec=spec?spec:{};}/**
   * Set Document type list child
   * @param child - Child component. See {@link Child}
   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}
   */child(child){return this.cloneWithoutDefaultIntentHandler({child});}/** Clone Document type list builder (allows for options overriding)
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder. See {@link DocumentTypeListBuilder}
   */clone(withSpec){const parent=super.clone(withSpec);const builder=new DocumentTypeListBuilder(this._context);builder.spec={...this.spec,...parent.getSpec(),...(withSpec||{})};return builder;}/** Clone Document type list builder (allows for options overriding) and remove default intent handler
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}
   */cloneWithoutDefaultIntentHandler(withSpec){const parent=super.clone(withSpec);const builder=new DocumentTypeListBuilder(this._context);const canHandleIntent=this.spec.canHandleIntent;const shouldOverride=canHandleIntent&&canHandleIntent.identity===DEFAULT_INTENT_HANDLER;const override=shouldOverride?{canHandleIntent:void 0}:{};builder.spec={...parent.getSpec(),...this.spec,...(withSpec||{}),...override};return builder;}}function shouldShowIcon(schemaType){const preview=schemaType.preview;return Boolean(preview&&(preview.prepare||preview.select&&preview.select.media));}const BUNDLED_DOC_TYPES=["sanity.imageAsset","sanity.fileAsset"];function isBundledDocType(typeName){return BUNDLED_DOC_TYPES.includes(typeName);}function isDocumentType(schemaType){var _a;return((_a=schemaType.type)==null?void 0:_a.name)==="document";}function isList(collection){return collection.type==="list";}function getDocumentTypes(_ref95){let{schema}=_ref95;return schema.getTypeNames().filter(n=>{const schemaType=schema.get(n);return schemaType&&isDocumentType(schemaType);}).filter(n=>!isBundledDocType(n));}function getDocumentTypeListItems(context){const types=getDocumentTypes(context);return types.map(typeName=>getDocumentTypeListItem(context,typeName));}function getDocumentTypeListItem(context,typeName){const{schema}=context;const type=schema.get(typeName);if(!type){throw new Error('Schema type with name "'.concat(typeName,'" not found'));}const title=type.title||startCase(typeName);return new ListItemBuilder(context).id(typeName).title(title).schemaType(type).child((id,childContext)=>{const parent=childContext.parent;const parentItem=isList(parent)?parent.items.find(item=>item.id===id):null;let list=getDocumentTypeList(context,typeName);if(parentItem&&parentItem.title){list=list.title(parentItem.title);}return list;});}function getDocumentTypeList(context,typeNameOrSpec){const{schema,resolveDocumentNode}=context;const schemaType=typeof typeNameOrSpec==="string"?typeNameOrSpec:typeNameOrSpec.schemaType;const typeName=typeof schemaType==="string"?schemaType:schemaType.name;const spec=typeof typeNameOrSpec==="string"?{schemaType}:typeNameOrSpec;const type=schema.get(typeName);if(!type){throw new Error('Schema type with name "'.concat(typeName,'" not found'));}const title=type.title||startCase(typeName);const showIcons=shouldShowIcon(type);return new DocumentTypeListBuilder(context).id(spec.id||typeName).title(spec.title||title).filter("_type == $type").params({type:typeName}).schemaType(type).showIcons(showIcons).defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by).menuItemGroups(spec.menuItemGroups||[{id:"sorting",title:"Sort"},{id:"layout",title:"Layout"},{id:"actions",title:"Actions"}]).child(spec.child||(documentId=>resolveDocumentNode({schemaType:typeName,documentId}))).canHandleIntent(spec.canHandleIntent||defaultIntentChecker).menuItems(spec.menuItems||[// Create new (from action button) will be added in serialization step of GenericList
// Sort by <Y>
...getOrderingMenuItemsForSchemaType(context,type),// Display as <Z>
new MenuItemBuilder(context).group("layout").title("Compact view").icon(StackCompactIcon).action("setLayout").params({layout:"default"}),new MenuItemBuilder(context).group("layout").title("Detailed view").icon(StackIcon).action("setLayout").params({layout:"detail"})// Create new (from menu) will be added in serialization step of GenericList
]);}function hasIcon(schemaType){if(!schemaType||typeof schemaType==="string"){return false;}return Boolean(schemaType.icon);}function getDefaultStructure(context){const items=getDocumentTypeListItems(context);return new ListBuilder(context).id("__root__").title("Content").items(items).showIcons(items.some(item=>hasIcon(item.getSchemaType())));}function createStructureBuilder(_ref96){let{defaultDocumentNode,source}=_ref96;const configContext=getConfigContextFromSource(source);const context={...source,getStructureBuilder:()=>structureBuilder,resolveDocumentNode:options=>{let builder=(defaultDocumentNode==null?void 0:defaultDocumentNode(structureBuilder,{...options,...configContext}))||new DocumentBuilder(context);if(!builder.getId()){builder=builder.id("documentEditor");}if(options.documentId){builder=builder.documentId(getPublishedId(options.documentId));}return builder.schemaType(options.schemaType);}};const structureBuilder={defaults:()=>getDefaultStructure(context),documentTypeList:function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return getDocumentTypeList(context,...args);},documentTypeListItem:function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return getDocumentTypeListItem(context,...args);},documentTypeListItems:function(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}return getDocumentTypeListItems(context,...args);},document:function(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}return new DocumentBuilder(context,...args);},documentWithInitialValueTemplate:function(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}return documentFromEditorWithInitialValue(context,...args);},defaultDocument:context.resolveDocumentNode,list:function(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}return new ListBuilder(context,...args);},listItem:function(){for(var _len7=arguments.length,args=new Array(_len7),_key7=0;_key7<_len7;_key7++){args[_key7]=arguments[_key7];}return new ListItemBuilder(context,...args);},menuItem:function(){for(var _len8=arguments.length,args=new Array(_len8),_key8=0;_key8<_len8;_key8++){args[_key8]=arguments[_key8];}return new MenuItemBuilder(context,...args);},menuItemGroup:function(){for(var _len9=arguments.length,args=new Array(_len9),_key9=0;_key9<_len9;_key9++){args[_key9]=arguments[_key9];}return new MenuItemGroupBuilder(context,...args);},menuItemsFromInitialValueTemplateItems:function(){for(var _len10=arguments.length,args=new Array(_len10),_key10=0;_key10<_len10;_key10++){args[_key10]=arguments[_key10];}return menuItemsFromInitialValueTemplateItems(context,...args);},documentList:function(){for(var _len11=arguments.length,args=new Array(_len11),_key11=0;_key11<_len11;_key11++){args[_key11]=arguments[_key11];}return new DocumentListBuilder(context,...args);},documentListItem:function(){for(var _len12=arguments.length,args=new Array(_len12),_key12=0;_key12<_len12;_key12++){args[_key12]=arguments[_key12];}return new DocumentListItemBuilder(context,...args);},orderingMenuItem:function(){for(var _len13=arguments.length,args=new Array(_len13),_key13=0;_key13<_len13;_key13++){args[_key13]=arguments[_key13];}return getOrderingMenuItem(context,...args);},orderingMenuItemsForType:function(){for(var _len14=arguments.length,args=new Array(_len14),_key14=0;_key14<_len14;_key14++){args[_key14]=arguments[_key14];}return getOrderingMenuItemsForSchemaType(context,...args);},editor:function(){for(var _len15=arguments.length,args=new Array(_len15),_key15=0;_key15<_len15;_key15++){args[_key15]=arguments[_key15];}return documentFromEditor(context,...args);},defaultInitialValueTemplateItems:function(){for(var _len16=arguments.length,args=new Array(_len16),_key16=0;_key16<_len16;_key16++){args[_key16]=arguments[_key16];}return defaultInitialValueTemplateItems(context,...args);},initialValueTemplateItem:(templateId,parameters)=>new InitialValueTemplateItemBuilder(context,{id:templateId,parameters,templateId}),component:spec=>{return isValidElementType(spec)?new ComponentBuilder().component(spec):new ComponentBuilder(spec);},divider:()=>({id:uniqueId("__divider__"),type:"divider"}),view:views,context};return structureBuilder;}function DeskToolProvider(_ref97){let{defaultDocumentNode,structure:resolveStructure,children}=_ref97;const[layoutCollapsed,setLayoutCollapsed]=useState(false);const source=useSource();const configContext=useConfigContextFromSource(source);const documentStore=useDocumentStore();const S=useMemo(()=>{return createStructureBuilder({defaultDocumentNode,source});},[defaultDocumentNode,source]);const rootPaneNode=useMemo(()=>{if(resolveStructure)return resolveStructure(S,{...configContext,documentStore});return S.defaults();},[S,resolveStructure,configContext,documentStore]);const features=useMemo(()=>({backButton:layoutCollapsed,resizablePanes:!layoutCollapsed,reviewChanges:!layoutCollapsed,splitPanes:!layoutCollapsed,splitViews:!layoutCollapsed}),[layoutCollapsed]);const deskTool=useMemo(()=>{return{features,layoutCollapsed,setLayoutCollapsed,rootPaneNode,structureContext:S.context};},[features,layoutCollapsed,rootPaneNode,S.context]);return/* @__PURE__ */jsx(DeskToolContext.Provider,{value:deskTool,children});}export{BackLink,ChildLink,ComponentBuilder,ComponentViewBuilder,ConfirmDeleteDialogContainer,DEFAULT_INTENT_HANDLER,DOCUMENT_INSPECTOR_MAX_WIDTH,DOCUMENT_INSPECTOR_MIN_WIDTH,DOCUMENT_PANEL_INITIAL_MIN_WIDTH,DOCUMENT_PANEL_MIN_WIDTH,DOCUMENT_PANEL_PORTAL_ELEMENT,Delay,DeskToolProvider,DocTitle,DocumentBuilder,DocumentInspectorHeader,DocumentListBuilder,DocumentListItemBuilder,DocumentPaneProvider,DocumentTypeListBuilder,FormViewBuilder,GenericListBuilder,GenericViewBuilder,HELP_URL,HistoryRestoreAction,InitialValueTemplateItemBuilder,LOADING_PANE,ListBuilder,ListItemBuilder,MenuItemBuilder,MenuItemGroupBuilder,PANE_COLLAPSED_WIDTH,PANE_DEFAULT_MIN_WIDTH,Pane,PaneContent,PaneContextMenuButton,PaneFooter,PaneHeader,PaneHeaderActionButton,PaneHeaderActions,PaneItemPreview,PaneLayoutContext,PaneRouterContext,ParameterizedLink,ReferenceChildLink,Resizable,Root$9 as Root,SerializeError,TimelineMenu,_DEBUG,component,createStructureBuilder,defaultInitialValueTemplateItems,defaultIntentChecker,deskTool,documentFromEditor,documentFromEditorWithInitialValue,form,getOrderingMenuItem,getOrderingMenuItemsForSchemaType,getTypeNamesFromFilter,isDocumentListItem,isMenuNodeButton,isNotMenuNodeButton,maybeSerializeInitialValueTemplateItem,maybeSerializeMenuItem,maybeSerializeMenuItemGroup,maybeSerializeView,menuItemsFromInitialValueTemplateItems,resolveMenuNodes,setActivePanes,shallowIntentChecker,useDeskTool,useDocumentPane,usePane,usePaneLayout,usePaneRouter};
//# sourceMappingURL=desk-08e4184f.js.map
