'use strict';

var jsxRuntime = require('react/jsx-runtime');
var ui = require('@sanity/ui');
var React = require('react');
var sanity = require('sanity');
var desk = require('./desk-f09bfc72.js');
var icons = require('@sanity/icons');
require('sanity/router');
require('@sanity/types');
require('lodash/omit.js');
require('@sanity/util/paths');
require('lodash/isNumber.js');
require('lodash/isString.js');
require('react-rx');
var styled = require('styled-components');
var PaneItem = require('./PaneItem-446430aa.js');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var styled__default = /*#__PURE__*/_interopDefaultCompat(styled);
const ListPaneHeader = _ref => {
  let {
    index,
    menuItems,
    menuItemGroups,
    title
  } = _ref;
  const {
    features
  } = desk.useDeskTool();
  const {
    collapsed,
    isLast
  } = desk.usePane();
  const tabIndex = isLast && !collapsed ? -1 : 0;
  return /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeader, {
    actions: /* @__PURE__ */jsxRuntime.jsx(desk.PaneHeaderActions, {
      menuItems,
      menuItemGroups
    }),
    backButton: features.backButton && index > 0 && /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
      as: desk.BackLink,
      "data-as": "a",
      icon: icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    tabIndex,
    title
  });
};
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a;
const Divider = styled__default.default.hr(_a || (_a = __template(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));
function ListPaneContent(props) {
  const {
    childItemId,
    items,
    isActive,
    layout,
    showIcons,
    title
  } = props;
  const {
    collapsed: layoutCollapsed
  } = desk.usePaneLayout();
  const getItemDisabled = React.useCallback(itemIndex => {
    var _a2;
    return ((_a2 = items == null ? void 0 : items.find((_, i) => i === itemIndex)) == null ? void 0 : _a2.type) === "divider";
  }, [items]);
  const shouldShowIconForItem = React.useCallback(item => {
    var _a2;
    const itemShowIcon = (_a2 = item.displayOptions) == null ? void 0 : _a2.showIcon;
    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }
    return showIcons !== false;
  }, [showIcons]);
  const renderItem = React.useCallback((item, ctx) => {
    const {
      virtualIndex: itemIndex
    } = ctx;
    if (item.type === "divider") {
      return (
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */
        jsxRuntime.jsx(ui.Box, {
          marginTop: 1,
          marginBottom: 2,
          children: /* @__PURE__ */jsxRuntime.jsx(Divider, {})
        }, "divider-".concat(itemIndex))
      );
    }
    const pressed = !isActive && childItemId === item.id;
    const selected = isActive && childItemId === item.id;
    const value = item._id && item.schemaType ? {
      _id: item._id,
      _type: item.schemaType.name,
      title: item.title
    } : void 0;
    return /* @__PURE__ */jsxRuntime.jsx(PaneItem.PaneItem, {
      icon: shouldShowIconForItem(item) ? item.icon : false,
      id: item.id,
      layout,
      marginBottom: 1,
      pressed,
      schemaType: item.schemaType,
      selected,
      title: item.title,
      value
    }, item.id);
  }, [childItemId, isActive, layout, shouldShowIconForItem]);
  return /* @__PURE__ */jsxRuntime.jsx(desk.PaneContent, {
    overflow: layoutCollapsed ? "hidden" : "auto",
    children: items && items.length > 0 && /* @__PURE__ */jsxRuntime.jsx(sanity.CommandList, {
      activeItemDataAttr: "data-hovered",
      ariaLabel: "List of ".concat(title),
      canReceiveFocus: true,
      focusRingOffset: -3,
      getItemDisabled,
      itemHeight: 51,
      items,
      onlyShowSelectionWhenActive: true,
      padding: 2,
      paddingBottom: 1,
      renderItem,
      wrapAround: false
    })
  });
}
function ListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups,
    title
  } = pane;
  const showIcons = (displayOptions == null ? void 0 : displayOptions.showIcons) !== false;
  return /* @__PURE__ */jsxRuntime.jsxs(desk.Pane, {
    currentMaxWidth: 350,
    "data-testid": "desk-tool-list-pane",
    "data-ui": "ListPane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [desk._DEBUG, /* @__PURE__ */jsxRuntime.jsx(ListPaneHeader, {
      index,
      menuItems,
      menuItemGroups,
      title
    }), /* @__PURE__ */jsxRuntime.jsx(ListPaneContent, {
      childItemId,
      isActive,
      items,
      layout: defaultLayout,
      showIcons,
      title
    }, paneKey)]
  });
}
exports.default = ListPane;
//# sourceMappingURL=index-958f29bb.js.map
