'use strict';

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@sanity/icons');
var types = require('@sanity/types');
var ui = require('@sanity/ui');
var React = require('react');
var sanity = require('sanity');
var desk = require('./desk-f09bfc72.js');
require('lodash/omit.js');
require('@sanity/util/paths');
require('sanity/router');
const getUnknownTypeFallback = (id, typeName) => ({
  title: /* @__PURE__ */jsxRuntime.jsxs("em", {
    children: ["No schema found for type ", /* @__PURE__ */jsxRuntime.jsx("code", {
      children: typeName
    })]
  }),
  subtitle: /* @__PURE__ */jsxRuntime.jsxs("em", {
    children: ["Document: ", /* @__PURE__ */jsxRuntime.jsx("code", {
      children: id
    })]
  }),
  media: () => /* @__PURE__ */jsxRuntime.jsx(icons.WarningOutlineIcon, {})
});
function MissingSchemaType(props) {
  const {
    layout,
    value
  } = props;
  return /* @__PURE__ */jsxRuntime.jsx(sanity.SanityDefaultPreview, {
    ...getUnknownTypeFallback(value._id, value._type),
    layout
  });
}
function getIconWithFallback(icon, schemaType, defaultIcon) {
  if (icon === false) {
    return false;
  }
  return icon || schemaType && schemaType.icon || defaultIcon || false;
}
function PaneItem(props) {
  const {
    icon,
    id,
    layout = "default",
    pressed,
    schemaType,
    selected,
    title,
    value,
    margin,
    marginBottom,
    marginTop
  } = props;
  const schema = sanity.useSchema();
  const documentPreviewStore = sanity.useDocumentPreviewStore();
  const {
    ChildLink
  } = desk.usePaneRouter();
  const documentPresence = sanity.useDocumentPresence(id);
  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name));
  const [clicked, setClicked] = React.useState(false);
  const preview = React.useMemo(() => {
    if (value && types.isSanityDocument(value)) {
      if (!schemaType || !hasSchemaType) {
        return /* @__PURE__ */jsxRuntime.jsx(MissingSchemaType, {
          value
        });
      }
      return /* @__PURE__ */jsxRuntime.jsx(desk.PaneItemPreview, {
        documentPreviewStore,
        icon: getIconWithFallback(icon, schemaType, icons.DocumentIcon),
        layout,
        schemaType,
        value,
        presence: documentPresence
      });
    }
    return /* @__PURE__ */jsxRuntime.jsx(sanity.SanityDefaultPreview, {
      status: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
        muted: true,
        children: /* @__PURE__ */jsxRuntime.jsx(icons.ChevronRightIcon, {})
      }),
      icon: getIconWithFallback(icon, schemaType, icons.FolderIcon),
      layout,
      title
    });
  }, [documentPreviewStore, hasSchemaType, icon, layout, schemaType, title, value, documentPresence]);
  const Link = React.useMemo(() => function LinkComponent(linkProps) {
    return /* @__PURE__ */jsxRuntime.jsx(ChildLink, {
      ...linkProps,
      childId: id
    });
  }, [ChildLink, id]);
  const handleClick = React.useCallback(e => {
    if (e.metaKey) {
      setClicked(false);
      return;
    }
    setClicked(true);
  }, []);
  React.useEffect(() => setClicked(false), [selected]);
  return /* @__PURE__ */jsxRuntime.jsx(sanity.PreviewCard, {
    __unstable_focusRing: true,
    as: Link,
    "data-as": "a",
    "data-ui": "PaneItem",
    margin,
    marginBottom,
    marginTop,
    onClick: handleClick,
    padding: 2,
    pressed,
    radius: 2,
    selected: selected || clicked,
    sizing: "border",
    tabIndex: -1,
    tone: "inherit",
    children: preview
  });
}
exports.PaneItem = PaneItem;
//# sourceMappingURL=PaneItem-446430aa.js.map
