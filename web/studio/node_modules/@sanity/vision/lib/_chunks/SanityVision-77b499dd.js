import { jsx, jsxs } from 'react/jsx-runtime';
import { useClient } from 'sanity';
import { Spinner, rem, useTheme, Code, Box, Stack, useClickOutside, Popover, Inline, Text, Badge, Card, Button, Flex, Label, Grid, Select, TextInput, Tooltip, Hotkeys, useToast } from '@sanity/ui';
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import SplitPane from '@rexxars/react-split-pane';
import { HelpCircleIcon, CopyIcon, ErrorOutlineIcon, StopIcon, PlayIcon } from '@sanity/icons';
import isHotkey from 'is-hotkey';
import CodeMirror from '@uiw/react-codemirror';
import { history, defaultKeymap, historyKeymap } from '@codemirror/commands';
import { highlightSelectionMatches } from '@codemirror/search';
import { javascriptLanguage } from '@codemirror/lang-javascript';
import { closeBrackets } from '@codemirror/autocomplete';
import { lineNumbers, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, drawSelection, keymap, EditorView } from '@codemirror/view';
import { indentOnInput, bracketMatching, syntaxHighlighting, defaultHighlightStyle, HighlightStyle } from '@codemirror/language';
import { hues } from '@sanity/color';
import { tags } from '@lezer/highlight';
import styled, { css } from 'styled-components';
import JSON5 from 'json5';
import { ResizeObserver } from '@juggle/resize-observer';
import debounce from 'lodash/debounce.js';
import HLRU from 'hashlru';
import JSONInspector from '@rexxars/react-json-inspector';
const API_VERSIONS = ["v1", "vX", "v2021-03-25", "v2021-10-21", "v2022-03-07"];
const [DEFAULT_API_VERSION] = API_VERSIONS.slice(-1);
function DelayedSpinner(props) {
  const [show, setShow] = useState(false);
  useEffect(() => {
    const timer = setTimeout(() => setShow(true), props.delay || 500);
    return () => clearTimeout(timer);
  }, [props.delay]);
  return show ? /* @__PURE__ */jsx(Spinner, {
    muted: true,
    size: 4
  }) : null;
}
const codemirrorExtensions = [[javascriptLanguage], lineNumbers(), highlightActiveLine(), highlightActiveLineGutter(), highlightSelectionMatches(), highlightSpecialChars(), indentOnInput(), bracketMatching(), closeBrackets(), history(), drawSelection(), syntaxHighlighting(defaultHighlightStyle, {
  fallback: true
}), keymap.of([defaultKeymap, historyKeymap].flat().filter(Boolean))];
function useCodemirrorTheme(theme) {
  const cmTheme = useMemo(() => createTheme(theme), [theme]);
  const cmHighlight = useMemo(() => syntaxHighlighting(createHighlight(theme)), [theme]);
  return [cmTheme, cmHighlight];
}
function createTheme(theme) {
  const {
    color,
    fonts
  } = theme.sanity;
  const card = color.card.enabled;
  const cursor = hues.blue[color.dark ? 400 : 500].hex;
  const selection = hues.gray[theme.sanity.color.dark ? 900 : 100].hex;
  return EditorView.theme({
    "&": {
      color: card.fg,
      backgroundColor: card.bg
    },
    ".cm-content": {
      caretColor: cursor
    },
    ".cm-editor": {
      fontFamily: fonts.code.family,
      fontSize: rem(fonts.code.sizes[1].fontSize),
      lineHeight: "inherit"
    },
    ".cm-cursor, .cm-dropCursor": {
      borderLeftColor: cursor
    },
    "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": {
      backgroundColor: selection
    },
    ".cm-panels": {
      backgroundColor: card.bg,
      color: card.fg
    },
    ".cm-panels.cm-panels-top": {
      borderBottom: "2px solid ".concat(card.border)
    },
    ".cm-panels.cm-panels-bottom": {
      borderTop: "2px solid ".concat(card.border)
    }
  }, {
    dark: color.dark
  });
}
function createHighlight(theme) {
  const c = theme.sanity.color.base;
  const s = theme.sanity.color.syntax;
  return HighlightStyle.define([{
    tag: tags.keyword,
    color: s.keyword
  }, {
    tag: [tags.propertyName, tags.name, tags.deleted, tags.character, tags.macroName],
    color: s.property
  }, {
    tag: [tags.function(tags.variableName), tags.labelName],
    color: s.function
  }, {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: s.variable
  }, {
    tag: [tags.definition(tags.name), tags.separator],
    color: s.constant
  }, {
    tag: [tags.typeName, tags.className, tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: s.number
  }, {
    tag: [tags.operator, tags.operatorKeyword, tags.url, tags.escape, tags.regexp, tags.link, tags.special(tags.string)],
    color: s.operator
  }, {
    tag: [tags.meta, tags.comment],
    color: s.comment
  }, {
    tag: tags.strong,
    fontWeight: "bold"
  }, {
    tag: tags.emphasis,
    fontStyle: "italic"
  }, {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  }, {
    tag: tags.heading,
    fontWeight: "bold",
    color: s.property
  }, {
    tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
    color: s.boolean
  }, {
    tag: [tags.processingInstruction, tags.string, tags.inserted],
    color: s.string
  }, {
    tag: tags.invalid,
    color: c.fg
  }]);
}
var __freeze$4 = Object.freeze;
var __defProp$5 = Object.defineProperty;
var __template$4 = (cooked, raw) => __freeze$4(__defProp$5(cooked, "raw", {
  value: __freeze$4(raw || cooked.slice())
}));
var _a$4;
const EditorRoot = styled.div(_a$4 || (_a$4 = __template$4(["\n  width: 100%;\n  box-sizing: border-box;\n  height: 100%;\n  overflow: hidden;\n  overflow: clip;\n  position: relative;\n  display: flex;\n\n  & .cm-theme {\n    width: 100%;\n  }\n\n  & .cm-editor {\n    height: 100%;\n\n    font-size: 16px;\n    line-height: 21px;\n  }\n\n  & .cm-line {\n    padding-left: ", ";\n  }\n\n  & .cm-content {\n    border-right-width: ", " !important;\n    padding-top: ", ";\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return rem(theme.sanity.space[3]);
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return rem(theme.sanity.space[4]);
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return rem(theme.sanity.space[5]);
});
function VisionCodeMirror(props) {
  const sanityTheme = useTheme();
  const theme = useCodemirrorTheme(sanityTheme);
  return /* @__PURE__ */jsx(EditorRoot, {
    children: /* @__PURE__ */jsx(CodeMirror, {
      basicSetup: false,
      theme,
      extensions: codemirrorExtensions,
      ...props
    })
  });
}
function isPlainObject(obj) {
  return !!obj && typeof obj === "object" && Object.prototype.toString.call(obj) === "[object Object]";
}
const hasLocalStorage = supportsLocalStorage();
function getLocalStorage(namespace) {
  const storageKey = "sanityVision:".concat(namespace);
  let loadedState = null;
  return {
    get,
    set,
    merge
  };
  function get(key, defaultVal) {
    const state = ensureState();
    return typeof state[key] === "undefined" ? defaultVal : state[key];
  }
  function set(key, value) {
    const state = ensureState();
    state[key] = value;
    localStorage.setItem(storageKey, JSON.stringify(loadedState));
    return value;
  }
  function merge(props) {
    const state = {
      ...ensureState(),
      ...props
    };
    localStorage.setItem(storageKey, JSON.stringify(state));
    return state;
  }
  function ensureState() {
    if (loadedState === null) {
      loadedState = loadState();
    }
    return loadedState;
  }
  function loadState() {
    if (!hasLocalStorage) {
      return {};
    }
    try {
      const stored = JSON.parse(localStorage.getItem(storageKey) || "{}");
      return isPlainObject(stored) ? stored : {};
    } catch (err) {
      return {};
    }
  }
}
function supportsLocalStorage() {
  const mod = "lsCheck";
  try {
    localStorage.setItem(mod, mod);
    localStorage.removeItem(mod);
    return true;
  } catch (err) {
    return false;
  }
}
function parseApiQueryString(qs) {
  const params = {};
  const options = {};
  for (const [key, value] of qs.entries()) {
    if (key[0] === "$") {
      params[key.slice(1)] = JSON.parse(value);
      continue;
    }
    if (key === "perspective") {
      options[key] = value;
      continue;
    }
  }
  return {
    query: qs.get("query") || "",
    params,
    options
  };
}
function validateApiVersion(apiVersion) {
  const parseableApiVersion = apiVersion.replace(/^v/, "").trim().toUpperCase();
  const isValidApiVersion = parseableApiVersion.length > 0 && (parseableApiVersion === "X" || /^\d{4}-\d{2}-\d{2}$/.test(parseableApiVersion) && !isNaN(Date.parse(parseableApiVersion)));
  return isValidApiVersion;
}
function prefixApiVersion(version) {
  if (version[0] !== "v" && version !== "other") {
    return "v".concat(version);
  }
  return version;
}
function tryParseParams(val) {
  try {
    const parsed = val ? JSON5.parse(val) : {};
    return typeof parsed === "object" && parsed && !Array.isArray(parsed) ? parsed : {};
  } catch (err) {
    err.message = "Parameters are not valid JSON:\n\n".concat(err.message.replace("JSON5:", ""));
    return err;
  }
}
function encodeQueryString(query) {
  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const searchParams = new URLSearchParams();
  searchParams.set("query", query);
  for (const [key, value] of Object.entries(params)) {
    searchParams.set("$".concat(key), JSON.stringify(value));
  }
  for (const [key, value] of Object.entries(options)) {
    if (value) searchParams.set(key, "".concat(value));
  }
  return "?".concat(searchParams);
}
const PERSPECTIVES = ["raw", "previewDrafts", "published"];
const DEFAULT_PERSPECTIVE = PERSPECTIVES[0];
function isPerspective(p) {
  return PERSPECTIVES.includes(p);
}
const RO = typeof document === "undefined" ? ResizeObserver : window.ResizeObserver;
const defaultValue = "{\n  \n}";
function ParamsEditor(props) {
  const {
    onChange
  } = props;
  const {
    raw: value,
    error,
    parsed,
    valid
  } = eventFromValue(props.value);
  const [isValid, setValid] = useState(valid);
  const [init, setInit] = useState(false);
  useEffect(() => {
    if (!init) {
      onChange({
        parsed,
        raw: value,
        valid: isValid,
        error
      });
      setInit(true);
    }
  }, [error, init, isValid, onChange, parsed, value]);
  const handleChangeRaw = useCallback(newValue => {
    const event = eventFromValue(newValue);
    setValid(event.valid);
    onChange(event);
  }, [onChange]);
  const handleChange = useMemo(() => debounce(handleChangeRaw, 333), [handleChangeRaw]);
  return /* @__PURE__ */jsx(VisionCodeMirror, {
    value: props.value || defaultValue,
    onChange: handleChange
  });
}
function eventFromValue(value) {
  const parsedParams = tryParseParams(value);
  const params = parsedParams instanceof Error ? {} : parsedParams;
  const validationError = parsedParams instanceof Error ? parsedParams.message : void 0;
  const isValid = !validationError;
  return {
    parsed: params,
    raw: value,
    valid: isValid,
    error: validationError
  };
}
var __freeze$3 = Object.freeze;
var __defProp$4 = Object.defineProperty;
var __template$3 = (cooked, raw) => __freeze$3(__defProp$4(cooked, "raw", {
  value: __freeze$3(raw || cooked.slice())
}));
var _a$3;
const ResultViewWrapper = styled.div(_ref4 => {
  let {
    theme
  } = _ref4;
  const {
    color,
    fonts,
    space
  } = theme.sanity;
  return css(_a$3 || (_a$3 = __template$3(["\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ", ";\n      font-size: ", "px;\n      line-height: ", "px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ", ";\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ", ";\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '\u25B8 ';\n      margin-left: calc(0px - ", ");\n      font-size: ", "px;\n      line-height: ", "px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '\u25BE ';\n      font-size: ", "px;\n      line-height: ", "px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ", ";\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ", ";\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ", ";\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ", ";\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ", ";\n      word-break: break-word;\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ", ";\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ", ";\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '\u2194';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  "])), fonts.code.family, fonts.code.sizes[2].fontSize, fonts.code.sizes[2].lineHeight, rem(space[4]), rem(space[0]), rem(space[4]), fonts.code.sizes[2].fontSize, fonts.code.sizes[2].lineHeight, fonts.code.sizes[2].fontSize, fonts.code.sizes[2].lineHeight, rem(space[4] / 2), color.syntax.property, color.syntax.constant, rem(space[2]), color.syntax.string, color.syntax.boolean, color.syntax.number);
});
const lru = HLRU(5e4);
function ResultView(props) {
  const {
    data
  } = props;
  if (isRecord(data) || Array.isArray(data)) {
    return /* @__PURE__ */jsx(ResultViewWrapper, {
      children: /* @__PURE__ */jsx(JSONInspector, {
        data,
        search: false,
        isExpanded,
        onClick: toggleExpanded
      })
    });
  }
  return /* @__PURE__ */jsx(Code, {
    language: "json",
    children: JSON.stringify(data)
  });
}
function isExpanded(keyPath, value) {
  const depthLimit = 4;
  const cached = lru.get(keyPath);
  if (typeof cached === "boolean") {
    return cached;
  }
  const segments = keyPath.split(".", depthLimit);
  if (segments.length === depthLimit) {
    return false;
  }
  if (Array.isArray(value)) {
    return true;
  }
  return isRecord(value) && !segments.some(key => isArrayKeyOverLimit(key));
}
function toggleExpanded(event) {
  const {
    path
  } = event;
  const current = lru.get(path);
  if (current === void 0) {
    return;
  }
  lru.set(path, !current);
}
function isRecord(value) {
  return value !== null && typeof value === "object" && !Array.isArray(value);
}
const numeric = /^\d+$/;
function isArrayKeyOverLimit(segment) {
  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  return numeric.test(segment) && parseInt(segment, 10) > limit;
}
var __freeze$2 = Object.freeze;
var __defProp$3 = Object.defineProperty;
var __template$2 = (cooked, raw) => __freeze$2(__defProp$3(cooked, "raw", {
  value: __freeze$2(raw || cooked.slice())
}));
var _a$2;
const ErrorCode = styled(Code)(_a$2 || (_a$2 = __template$2(["\n  color: ", ";\n"])), _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.sanity.color.muted.critical.enabled.fg;
});
function QueryErrorDetails(_ref6) {
  let {
    error
  } = _ref6;
  if (!("details" in error)) {
    return null;
  }
  const details = {
    ...error.details,
    ...mapToLegacyDetails(error.details)
  };
  if (!details.line) {
    return null;
  }
  return /* @__PURE__ */jsxs("div", {
    children: [/* @__PURE__ */jsx(ErrorCode, {
      size: 1,
      children: "".concat(details.line, "\n").concat(dashLine(details.column, details.columnEnd))
    }), /* @__PURE__ */jsx(Box, {
      marginTop: 4,
      children: /* @__PURE__ */jsx(ErrorCode, {
        size: 1,
        children: "Line:   ".concat(details.lineNumber, "\nColumn: ").concat(details.column)
      })
    })]
  });
}
function mapToLegacyDetails(details) {
  if (!details || typeof details.query !== "string" || typeof details.start !== "number") {
    return {};
  }
  const {
    query,
    start,
    end
  } = details;
  const lineStart = query.slice(0, start).lastIndexOf("\n") + 1;
  const lineNumber = (query.slice(0, lineStart).match(/\n/g) || []).length;
  const line = query.slice(lineStart, query.indexOf("\n", lineStart));
  const column = start - lineStart;
  const columnEnd = typeof end === "number" ? end - lineStart : void 0;
  return {
    line,
    lineNumber,
    column,
    columnEnd
  };
}
function dashLine(column, columnEnd) {
  const line = "-".repeat(column);
  const hats = "^".repeat(columnEnd ? columnEnd - column : 1);
  return "".concat(line).concat(hats);
}
function QueryErrorDialog(props) {
  return /* @__PURE__ */jsxs(Stack, {
    space: 5,
    marginTop: 2,
    children: [/* @__PURE__ */jsx(ErrorCode, {
      size: 1,
      children: props.error.message
    }), /* @__PURE__ */jsx(QueryErrorDetails, {
      error: props.error
    })]
  });
}
var __freeze$1 = Object.freeze;
var __defProp$2 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$2(cooked, "raw", {
  value: __freeze$1(raw || cooked.slice())
}));
var _a$1, _b$1;
const PerspectivePopoverContent = styled(Box)(_a$1 || (_a$1 = __template$1(["\n  /* This limits the width of the popover content */\n  max-width: 240px;\n"])));
const PerspectivePopoverLink = styled.a(_b$1 || (_b$1 = __template$1(["\n  cursor: pointer;\n  margin-right: auto;\n"])));
function PerspectivePopover() {
  const [open, setOpen] = useState(false);
  const [buttonEl, setButtonEl] = useState(null);
  const [popoverEl, setPopoverEl] = useState(null);
  const handleClick = useCallback(() => setOpen(o => !o), []);
  const handleClickOutside = useCallback(() => setOpen(false), []);
  useClickOutside(handleClickOutside, [buttonEl, popoverEl]);
  return /* @__PURE__ */jsx(Popover, {
    content: /* @__PURE__ */jsx(PerspectivePopoverContent, {
      children: /* @__PURE__ */jsxs(Stack, {
        space: 4,
        children: [/* @__PURE__ */jsxs(Inline, {
          space: 2,
          children: [/* @__PURE__ */jsx(Text, {
            weight: "medium",
            children: "Perspectives"
          }), /* @__PURE__ */jsx(Badge, {
            tone: "primary",
            children: "New"
          })]
        }), /* @__PURE__ */jsx(Card, {
          children: /* @__PURE__ */jsx(Text, {
            muted: true,
            children: 'Perspectives allow your query to run against different "views" of the content in your dataset'
          })
        }), /* @__PURE__ */jsx(Card, {
          children: /* @__PURE__ */jsx(Text, {
            children: /* @__PURE__ */jsx(PerspectivePopoverLink, {
              href: "https://sanity.io/docs/perspectives",
              target: "_blank",
              children: "Read docs \u2192"
            })
          })
        })]
      })
    }),
    placement: "bottom-start",
    portal: true,
    padding: 3,
    ref: setPopoverEl,
    open,
    children: /* @__PURE__ */jsx(Button, {
      icon: HelpCircleIcon,
      mode: "bleed",
      padding: 2,
      tone: "primary",
      fontSize: 1,
      ref: setButtonEl,
      onClick: handleClick,
      selected: open
    })
  });
}
var __freeze = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp$1(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;
const Root = styled(Flex)(_a || (_a = __template(["\n  .sidebarPanes .Pane {\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  & .Resizer {\n    background: var(--card-border-color);\n    opacity: 1;\n    z-index: 1;\n    box-sizing: border-box;\n    background-clip: padding-box;\n    border: solid transparent;\n  }\n\n  & .Resizer:hover {\n    border-color: var(--card-shadow-ambient-color);\n  }\n\n  & .Resizer.horizontal {\n    height: 11px;\n    margin: -5px 0;\n    border-width: 5px 0;\n    cursor: row-resize;\n    width: 100%;\n    z-index: 4;\n  }\n\n  & .Resizer.vertical {\n    width: 11px;\n    margin: 0 -5px;\n    border-width: 0 5px;\n    cursor: col-resize;\n    z-index: 2; /* To prevent the resizer from being hidden behind CodeMirror scroll area */\n  }\n\n  .Resizer.disabled {\n    cursor: not-allowed;\n  }\n\n  .Resizer.disabled:hover {\n    border-color: transparent;\n  }\n"])));
Root.displayName = "Root";
const Header = styled(Card)(_b || (_b = __template(["\n  border-bottom: 1px solid var(--card-border-color);\n"])));
const StyledLabel = styled(Label)(_c || (_c = __template(["\n  flex: 1;\n"])));
const SplitpaneContainer = styled(Box)(_d || (_d = __template(["\n  position: relative;\n"])));
const QueryCopyLink = styled.a(_e || (_e = __template(["\n  cursor: pointer;\n  margin-right: auto;\n"])));
const InputBackgroundContainer = styled(Box)(_f || (_f = __template(["\n  position: absolute;\n  top: 1rem;\n  left: 0;\n  padding: 0;\n  margin: 0;\n  z-index: 10;\n  right: 0;\n\n  ", " {\n    user-select: none;\n  }\n"])), StyledLabel);
const InputBackgroundContainerLeft = styled(InputBackgroundContainer)(_g || (_g = __template(["\n  // This is so its aligned with the gutters of CodeMirror\n  left: 33px;\n"])));
const InputContainer = styled(Card)(_h || (_h = __template(["\n  width: 100%;\n  height: 100%;\n  position: relative;\n  flex-direction: column;\n"])));
const ResultOuterContainer = styled(Flex)(_i || (_i = __template(["\n  height: 100%;\n"])));
const ResultInnerContainer = styled(Box)(_j || (_j = __template(["\n  position: relative;\n"])));
const ResultContainer = styled(Card)(_l || (_l = __template(["\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  max-width: 100%;\n\n  ", "\n"])), _ref7 => {
  let {
    $isInvalid
  } = _ref7;
  return $isInvalid && css(_k || (_k = __template(["\n      &:after {\n        background-color: var(--card-bg-color);\n        content: '';\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n      }\n    "])));
});
const Result = styled(Box)(_m || (_m = __template(["\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 20;\n"])));
const TimingsFooter = styled(Box)(_n || (_n = __template(["\n  border-top: 1px solid var(--card-border-color);\n"])));
const TimingsCard = styled(Card)(_o || (_o = __template(["\n  position: relative;\n"])));
styled(Box)(_p || (_p = __template(["\n  width: 100%;\n  height: 100%;\n"])));
const TimingsTextContainer = styled(Flex)(_q || (_q = __template(["\n  height: 100%;\n  min-height: ", ";\n"])), _ref8 => {
  let {
    theme
  } = _ref8;
  return rem(theme.sanity.space[3] * 2 + theme.sanity.fonts.text.sizes[2].lineHeight - theme.sanity.fonts.text.sizes[2].ascenderHeight - theme.sanity.fonts.text.sizes[2].descenderHeight);
});
const ControlsContainer = styled(Box)(_r || (_r = __template(["\n  border-top: 1px solid var(--card-border-color);\n"])));
const ButtonFullWidth = styled(Button)(_s || (_s = __template(["\n  width: 100%;\n"])));
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
  enumerable: true,
  configurable: true,
  writable: true,
  value
}) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
function nodeContains(node, other) {
  if (!node || !other) {
    return false;
  }
  return node === other || !!(node.compareDocumentPosition(other) & 16);
}
const sanityUrl = /\.(?:api|apicdn)\.sanity\.io\/(vX|v1|v\d{4}-\d\d-\d\d)\/.*?(?:query|listen)\/(.*?)\?(.*)/;
const isRunHotkey = event => isHotkey("ctrl+enter", event) || isHotkey("mod+enter", event);
function narrowBreakpoint() {
  return typeof window !== "undefined" && window.innerWidth > 600;
}
function calculatePaneSizeOptions(rootHeight) {
  return {
    defaultSize: rootHeight / (narrowBreakpoint() ? 2 : 1),
    size: rootHeight > 550 ? void 0 : rootHeight * 0.4,
    allowResize: rootHeight > 550,
    minSize: Math.min(170, Math.max(170, rootHeight / 2)),
    maxSize: rootHeight > 650 ? rootHeight * 0.7 : rootHeight * 0.6
  };
}
class VisionGui extends React.PureComponent {
  constructor(props) {
    super(props);
    __publicField(this, "_visionRoot");
    __publicField(this, "_queryEditorContainer");
    __publicField(this, "_paramsEditorContainer");
    __publicField(this, "_operationUrlElement");
    __publicField(this, "_customApiVersionElement");
    __publicField(this, "_resizeListener");
    __publicField(this, "_querySubscription");
    __publicField(this, "_listenSubscription");
    __publicField(this, "_client");
    __publicField(this, "_localStorage");
    const {
      client,
      datasets,
      config
    } = props;
    this._localStorage = getLocalStorage(client.config().projectId || "default");
    const lastQuery = this._localStorage.get("query", "");
    const lastParams = this._localStorage.get("params", "{\n  \n}");
    const defaultDataset = config.defaultDataset || client.config().dataset || datasets[0];
    const defaultApiVersion = prefixApiVersion("".concat(config.defaultApiVersion));
    const defaultPerspective = DEFAULT_PERSPECTIVE;
    let dataset = this._localStorage.get("dataset", defaultDataset);
    let apiVersion = this._localStorage.get("apiVersion", defaultApiVersion);
    const customApiVersion = API_VERSIONS.includes(apiVersion) ? false : apiVersion;
    let perspective = this._localStorage.get("perspective", defaultPerspective);
    if (!datasets.includes(dataset)) {
      dataset = datasets.includes(defaultDataset) ? defaultDataset : datasets[0];
    }
    if (!API_VERSIONS.includes(apiVersion)) {
      apiVersion = DEFAULT_API_VERSION;
    }
    if (!PERSPECTIVES.includes(perspective)) {
      perspective = DEFAULT_PERSPECTIVE;
    }
    this._visionRoot = React.createRef();
    this._operationUrlElement = React.createRef();
    this._queryEditorContainer = React.createRef();
    this._paramsEditorContainer = React.createRef();
    this._customApiVersionElement = React.createRef();
    this._client = props.client.withConfig({
      apiVersion: customApiVersion || apiVersion,
      dataset,
      perspective,
      allowReconfigure: true
    });
    const bodyHeight = typeof window !== "undefined" && typeof document !== "undefined" ? document.body.getBoundingClientRect().height - 60 : 0;
    const params = lastParams ? tryParseParams(lastParams) : void 0;
    this.state = {
      // Selected options
      dataset,
      apiVersion,
      customApiVersion,
      perspective,
      // Selected options validation state
      isValidApiVersion: customApiVersion ? validateApiVersion(customApiVersion) : false,
      // Inputs
      query: lastQuery,
      rawParams: lastParams,
      // Parsed input
      params,
      hasValidParams: !(params instanceof Error),
      // Query/listen results
      listenMutations: [],
      // Operation state
      queryInProgress: false,
      listenInProgress: false,
      // UI drawing state
      paneSizeOptions: calculatePaneSizeOptions(bodyHeight)
    };
    this.handleChangeDataset = this.handleChangeDataset.bind(this);
    this.handleChangeApiVersion = this.handleChangeApiVersion.bind(this);
    this.handleCustomApiVersionChange = this.handleCustomApiVersionChange.bind(this);
    this.handleChangePerspective = this.handleChangePerspective.bind(this);
    this.handleListenExecution = this.handleListenExecution.bind(this);
    this.handleListenerEvent = this.handleListenerEvent.bind(this);
    this.handleQueryExecution = this.handleQueryExecution.bind(this);
    this.handleQueryChange = this.handleQueryChange.bind(this);
    this.handleParamsChange = this.handleParamsChange.bind(this);
    this.handleCopyUrl = this.handleCopyUrl.bind(this);
    this.handlePaste = this.handlePaste.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleResize = this.handleResize.bind(this);
  }
  componentDidMount() {
    window.document.addEventListener("paste", this.handlePaste);
    window.document.addEventListener("keydown", this.handleKeyDown);
    this.handleResizeListen();
  }
  componentWillUnmount() {
    this.cancelQuery();
    this.cancelListener();
    this.cancelEventListener();
    this.cancelResizeListener();
  }
  handleResizeListen() {
    if (!this._visionRoot.current) {
      return;
    }
    this._resizeListener = new RO(this.handleResize);
    this._resizeListener.observe(this._visionRoot.current);
  }
  handleResize(entries) {
    const entry = entries == null ? void 0 : entries[0];
    this.setState(prevState => ({
      ...prevState,
      paneSizeOptions: calculatePaneSizeOptions(entry.contentRect.height)
    }));
  }
  cancelResizeListener() {
    if (this._resizeListener) {
      this._resizeListener.disconnect();
    }
  }
  handlePaste(evt) {
    if (!evt.clipboardData) {
      return;
    }
    const data = evt.clipboardData.getData("text/plain");
    const match = data.match(sanityUrl);
    if (!match) {
      return;
    }
    const [, usedApiVersion, usedDataset, urlQuery] = match;
    let parts;
    try {
      const qs = new URLSearchParams(urlQuery);
      parts = parseApiQueryString(qs);
    } catch (err) {
      console.warn("Error while trying to parse API URL: ", err.message);
      return;
    }
    let apiVersion;
    let customApiVersion;
    if (validateApiVersion(usedApiVersion)) {
      if (API_VERSIONS.includes(usedApiVersion)) {
        apiVersion = usedApiVersion;
        customApiVersion = false;
      } else {
        customApiVersion = usedApiVersion;
      }
    }
    const perspective = PERSPECTIVES.includes(parts.options.perspective) ? parts.options.perspective : void 0;
    evt.preventDefault();
    this.setState(prevState => ({
      dataset: this.props.datasets.includes(usedDataset) ? usedDataset : prevState.dataset,
      query: parts.query,
      params: parts.params,
      rawParams: JSON.stringify(parts.params, null, 2),
      apiVersion: typeof apiVersion === "undefined" ? prevState.apiVersion : apiVersion,
      customApiVersion: typeof customApiVersion === "undefined" ? prevState.customApiVersion : customApiVersion,
      perspective: typeof perspective === "undefined" ? prevState.perspective : perspective
    }), () => {
      this._localStorage.merge({
        query: this.state.query,
        params: this.state.params,
        dataset: this.state.dataset,
        apiVersion: customApiVersion || apiVersion,
        perspective: this.state.perspective
      });
      this._client.config({
        dataset: this.state.dataset,
        apiVersion: customApiVersion || apiVersion,
        perspective: this.state.perspective
      });
      this.handleQueryExecution();
      this.props.toast.push({
        closable: true,
        id: "vision-paste",
        status: "info",
        title: "Parsed URL to query"
      });
    });
  }
  cancelQuery() {
    if (!this._querySubscription) {
      return;
    }
    this._querySubscription.unsubscribe();
    this._querySubscription = void 0;
  }
  cancelListener() {
    if (!this._listenSubscription) {
      return;
    }
    this._listenSubscription.unsubscribe();
    this._listenSubscription = void 0;
  }
  cancelEventListener() {
    window.removeEventListener("keydown", this.handleKeyDown);
  }
  handleChangeDataset(evt) {
    const dataset = evt.target.value;
    this._localStorage.set("dataset", dataset);
    this.setState({
      dataset
    });
    this._client.config({
      dataset
    });
    this.handleQueryExecution();
  }
  handleChangeApiVersion(evt) {
    const apiVersion = evt.target.value;
    if (apiVersion === "other") {
      this.setState({
        customApiVersion: "v"
      }, () => {
        var _a;
        (_a = this._customApiVersionElement.current) == null ? void 0 : _a.focus();
      });
      return;
    }
    this.setState({
      apiVersion,
      customApiVersion: false
    }, () => {
      this._localStorage.set("apiVersion", this.state.apiVersion);
      this._client.config({
        apiVersion: this.state.apiVersion
      });
      this.handleQueryExecution();
    });
  }
  handleCustomApiVersionChange(evt) {
    const customApiVersion = evt.target.value || "";
    const isValidApiVersion = validateApiVersion(customApiVersion);
    this.setState(prevState => ({
      apiVersion: isValidApiVersion ? customApiVersion : prevState.apiVersion,
      customApiVersion: customApiVersion || "v",
      isValidApiVersion
    }), () => {
      if (!this.state.isValidApiVersion || typeof this.state.customApiVersion !== "string") {
        return;
      }
      this._localStorage.set("apiVersion", this.state.customApiVersion);
      this._client.config({
        apiVersion: this.state.customApiVersion
      });
    });
  }
  handleChangePerspective(evt) {
    const perspective = evt.target.value;
    if (!isPerspective(perspective)) {
      return;
    }
    this.setState({
      perspective
    }, () => {
      this._localStorage.set("perspective", this.state.perspective);
      this._client.config({
        perspective: this.state.perspective
      });
      this.handleQueryExecution();
    });
  }
  handleListenerEvent(evt) {
    if (evt.type !== "mutation") {
      this.props.toast.push({
        closable: true,
        id: "vision-listen",
        status: "success",
        title: "Listening for mutations\u2026"
      });
      return;
    }
    this.setState(_ref9 => {
      let {
        listenMutations
      } = _ref9;
      return {
        listenMutations: listenMutations.length === 50 ? [evt, ...listenMutations.slice(0, 49)] : [evt, ...listenMutations]
      };
    });
  }
  handleKeyDown(event) {
    const {
      hasValidParams
    } = this.state;
    const isWithinRoot = this._visionRoot.current && nodeContains(this._visionRoot.current, event.target);
    if (isRunHotkey(event) && isWithinRoot && hasValidParams) {
      this.handleQueryExecution();
      event.preventDefault();
      event.stopPropagation();
    }
  }
  ensureSelectedApiVersion() {
    const {
      apiVersion,
      customApiVersion
    } = this.state;
    const wantedApiVersion = customApiVersion || apiVersion;
    if (this._client.config().apiVersion !== wantedApiVersion) {
      this._client.config({
        apiVersion: wantedApiVersion
      });
    }
  }
  handleListenExecution() {
    const {
      query,
      params,
      rawParams,
      listenInProgress
    } = this.state;
    if (listenInProgress) {
      this.cancelListener();
      this.setState({
        listenInProgress: false
      });
      return;
    }
    this.ensureSelectedApiVersion();
    const paramsError = params instanceof Error ? params : void 0;
    const encodeParams = params instanceof Error ? {} : params || {};
    const url = this._client.getDataUrl("listen", encodeQueryString(query, encodeParams, {}));
    const shouldExecute = !paramsError && query.trim().length > 0;
    this._localStorage.set("query", query);
    this._localStorage.set("params", rawParams);
    this.cancelQuery();
    this.setState({
      url,
      listenMutations: [],
      queryInProgress: false,
      queryResult: void 0,
      listenInProgress: shouldExecute,
      error: paramsError,
      queryTime: void 0,
      e2eTime: void 0
    });
    if (!shouldExecute) {
      return;
    }
    this._listenSubscription = this._client.listen(query, params, {
      events: ["mutation", "welcome"]
    }).subscribe({
      next: this.handleListenerEvent,
      error: error => this.setState({
        error,
        query,
        listenInProgress: false
      })
    });
  }
  handleQueryExecution() {
    const {
      query,
      params,
      rawParams,
      queryInProgress
    } = this.state;
    if (queryInProgress) {
      this.cancelQuery();
      this.cancelListener();
      this.setState({
        queryInProgress: false
      });
      return true;
    }
    const paramsError = params instanceof Error && params;
    this._localStorage.set("query", query);
    this._localStorage.set("params", rawParams);
    this.cancelListener();
    this.setState({
      queryInProgress: !paramsError && Boolean(query),
      listenInProgress: false,
      listenMutations: [],
      error: paramsError || void 0,
      queryResult: void 0,
      queryTime: void 0,
      e2eTime: void 0
    });
    if (!query || paramsError) {
      return true;
    }
    this.ensureSelectedApiVersion();
    const urlQueryOpts = {};
    if (this.state.perspective !== "raw") {
      urlQueryOpts.perspective = this.state.perspective;
    }
    const url = this._client.getUrl(this._client.getDataUrl("query", encodeQueryString(query, params, urlQueryOpts)));
    this.setState({
      url
    });
    const queryStart = Date.now();
    this._querySubscription = this._client.observable.fetch(query, params, {
      filterResponse: false,
      tag: "vision"
    }).subscribe({
      next: res => this.setState({
        queryTime: res.ms,
        e2eTime: Date.now() - queryStart,
        queryResult: res.result,
        queryInProgress: false,
        error: void 0
      }),
      error: error => this.setState({
        error,
        query,
        queryInProgress: false
      })
    });
    return true;
  }
  handleQueryChange(query) {
    this.setState({
      query
    });
  }
  handleParamsChange(_ref10) {
    let {
      raw,
      parsed,
      valid,
      error
    } = _ref10;
    this.setState({
      rawParams: raw,
      params: parsed,
      hasValidParams: valid,
      paramsError: error
    }, () => this._localStorage.set("params", raw));
  }
  handleCopyUrl() {
    const el = this._operationUrlElement.current;
    if (!el) {
      return;
    }
    try {
      el.select();
      document.execCommand("copy");
      this.props.toast.push({
        closable: true,
        title: "Copied to clipboard",
        status: "info",
        id: "vision-copy"
      });
    } catch (err) {
      console.error("Unable to copy to clipboard :(");
    }
  }
  render() {
    const {
      datasets
    } = this.props;
    const {
      error,
      queryResult,
      url,
      queryInProgress,
      listenInProgress,
      paneSizeOptions,
      queryTime,
      e2eTime,
      listenMutations,
      apiVersion,
      dataset,
      customApiVersion,
      isValidApiVersion,
      hasValidParams,
      paramsError,
      perspective
    } = this.state;
    const hasResult = !error && !queryInProgress && typeof queryResult !== "undefined";
    return /* @__PURE__ */jsxs(Root, {
      direction: "column",
      height: "fill",
      ref: this._visionRoot,
      sizing: "border",
      overflow: "hidden",
      children: [/* @__PURE__ */jsx(Header, {
        paddingX: 3,
        paddingY: 2,
        children: /* @__PURE__ */jsxs(Grid, {
          columns: [1, 4, 8, 12],
          children: [/* @__PURE__ */jsx(Box, {
            padding: 1,
            column: 2,
            children: /* @__PURE__ */jsxs(Stack, {
              children: [/* @__PURE__ */jsx(Card, {
                paddingTop: 2,
                paddingBottom: 3,
                children: /* @__PURE__ */jsx(StyledLabel, {
                  children: "Dataset"
                })
              }), /* @__PURE__ */jsx(Select, {
                value: dataset,
                onChange: this.handleChangeDataset,
                children: datasets.map(ds => /* @__PURE__ */jsx("option", {
                  children: ds
                }, ds))
              })]
            })
          }), /* @__PURE__ */jsx(Box, {
            padding: 1,
            column: 2,
            children: /* @__PURE__ */jsxs(Stack, {
              children: [/* @__PURE__ */jsx(Card, {
                paddingTop: 2,
                paddingBottom: 3,
                children: /* @__PURE__ */jsx(StyledLabel, {
                  children: "API version"
                })
              }), /* @__PURE__ */jsxs(Select, {
                value: customApiVersion === false ? apiVersion : "other",
                onChange: this.handleChangeApiVersion,
                children: [API_VERSIONS.map(version => /* @__PURE__ */jsx("option", {
                  children: version
                }, version)), /* @__PURE__ */jsx("option", {
                  value: "other",
                  children: "Other"
                }, "other")]
              })]
            })
          }), customApiVersion !== false && /* @__PURE__ */jsx(Box, {
            padding: 1,
            column: 2,
            children: /* @__PURE__ */jsxs(Stack, {
              children: [/* @__PURE__ */jsx(Card, {
                paddingTop: 2,
                paddingBottom: 3,
                children: /* @__PURE__ */jsx(StyledLabel, {
                  textOverflow: "ellipsis",
                  children: "Custom API version"
                })
              }), /* @__PURE__ */jsx(TextInput, {
                ref: this._customApiVersionElement,
                value: customApiVersion,
                onChange: this.handleCustomApiVersionChange,
                customValidity: isValidApiVersion ? void 0 : "Invalid API version",
                maxLength: 11
              })]
            })
          }), /* @__PURE__ */jsx(Box, {
            padding: 1,
            column: 2,
            children: /* @__PURE__ */jsxs(Stack, {
              children: [/* @__PURE__ */jsx(Card, {
                paddingBottom: 1,
                children: /* @__PURE__ */jsxs(Inline, {
                  space: 1,
                  children: [/* @__PURE__ */jsx(Box, {
                    children: /* @__PURE__ */jsx(StyledLabel, {
                      children: "PERSPECTIVE"
                    })
                  }), /* @__PURE__ */jsx(Box, {
                    children: /* @__PURE__ */jsx(PerspectivePopover, {})
                  })]
                })
              }), /* @__PURE__ */jsx(Select, {
                value: perspective,
                onChange: this.handleChangePerspective,
                children: PERSPECTIVES.map(p => /* @__PURE__ */jsx("option", {
                  children: p
                }, p))
              })]
            })
          }), typeof url === "string" ? /* @__PURE__ */jsx(Box, {
            padding: 1,
            flex: 1,
            column: customApiVersion === false ? 6 : 4,
            children: /* @__PURE__ */jsxs(Stack, {
              children: [/* @__PURE__ */jsx(Card, {
                paddingTop: 2,
                paddingBottom: 3,
                children: /* @__PURE__ */jsxs(StyledLabel, {
                  children: ["Query URL\xA0", /* @__PURE__ */jsx(QueryCopyLink, {
                    onClick: this.handleCopyUrl,
                    children: "[copy]"
                  })]
                })
              }), /* @__PURE__ */jsxs(Flex, {
                flex: 1,
                gap: 1,
                children: [/* @__PURE__ */jsx(Box, {
                  flex: 1,
                  children: /* @__PURE__ */jsx(TextInput, {
                    readOnly: true,
                    type: "url",
                    ref: this._operationUrlElement,
                    value: url
                  })
                }), /* @__PURE__ */jsx(Tooltip, {
                  content: /* @__PURE__ */jsx(Box, {
                    padding: 2,
                    children: /* @__PURE__ */jsx(Text, {
                      children: "Copy to clipboard"
                    })
                  }),
                  children: /* @__PURE__ */jsx(Button, {
                    "aria-label": "Copy to clipboard",
                    type: "button",
                    mode: "ghost",
                    icon: CopyIcon,
                    onClick: this.handleCopyUrl
                  })
                })]
              })]
            })
          }) : /* @__PURE__ */jsx(Box, {
            flex: 1
          })]
        })
      }), /* @__PURE__ */jsx(SplitpaneContainer, {
        flex: "auto",
        children: /* @__PURE__ */jsxs(SplitPane, {
          split: narrowBreakpoint() ? "vertical" : "horizontal",
          minSize: 280,
          defaultSize: 400,
          maxSize: -400,
          children: [/* @__PURE__ */jsx(Box, {
            height: "stretch",
            flex: 1,
            children: /* @__PURE__ */jsxs(SplitPane, {
              className: "sidebarPanes",
              split: "horizontal",
              defaultSize: narrowBreakpoint() ? paneSizeOptions.defaultSize : paneSizeOptions.minSize,
              size: paneSizeOptions.size,
              allowResize: paneSizeOptions.allowResize,
              minSize: narrowBreakpoint() ? paneSizeOptions.minSize : 100,
              maxSize: paneSizeOptions.maxSize,
              primary: "first",
              children: [/* @__PURE__ */jsx(InputContainer, {
                display: "flex",
                ref: this._queryEditorContainer,
                children: /* @__PURE__ */jsxs(Box, {
                  flex: 1,
                  children: [/* @__PURE__ */jsx(InputBackgroundContainerLeft, {
                    children: /* @__PURE__ */jsx(Flex, {
                      children: /* @__PURE__ */jsx(StyledLabel, {
                        muted: true,
                        children: "Query"
                      })
                    })
                  }), /* @__PURE__ */jsx(VisionCodeMirror, {
                    value: this.state.query,
                    onChange: this.handleQueryChange
                  })]
                })
              }), /* @__PURE__ */jsxs(InputContainer, {
                display: "flex",
                ref: this._paramsEditorContainer,
                children: [/* @__PURE__ */jsxs(Card, {
                  flex: 1,
                  tone: hasValidParams ? "default" : "critical",
                  children: [/* @__PURE__ */jsx(InputBackgroundContainerLeft, {
                    children: /* @__PURE__ */jsxs(Flex, {
                      children: [/* @__PURE__ */jsx(StyledLabel, {
                        muted: true,
                        children: "Params"
                      }), paramsError && /* @__PURE__ */jsx(Tooltip, {
                        placement: "top-end",
                        portal: true,
                        content: /* @__PURE__ */jsx(Box, {
                          padding: 2,
                          children: /* @__PURE__ */jsx(Text, {
                            children: paramsError
                          })
                        }),
                        children: /* @__PURE__ */jsx(Box, {
                          padding: 1,
                          marginX: 2,
                          children: /* @__PURE__ */jsx(Text, {
                            children: /* @__PURE__ */jsx(ErrorOutlineIcon, {})
                          })
                        })
                      })]
                    })
                  }), /* @__PURE__ */jsx(ParamsEditor, {
                    value: this.state.rawParams,
                    onChange: this.handleParamsChange
                  })]
                }), /* @__PURE__ */jsx(ControlsContainer, {
                  children: /* @__PURE__ */jsx(Card, {
                    padding: 3,
                    paddingX: 3,
                    children: /* @__PURE__ */jsx(Tooltip, {
                      content: /* @__PURE__ */jsx(Card, {
                        padding: 2,
                        radius: 4,
                        children: /* @__PURE__ */jsx(Text, {
                          size: 1,
                          muted: true,
                          children: "Parameters are not valid JSON"
                        })
                      }),
                      placement: "top",
                      disabled: hasValidParams,
                      portal: true,
                      children: /* @__PURE__ */jsxs(Flex, {
                        justify: "space-evenly",
                        children: [/* @__PURE__ */jsx(Box, {
                          flex: 1,
                          children: /* @__PURE__ */jsx(Tooltip, {
                            content: /* @__PURE__ */jsx(Card, {
                              padding: 2,
                              radius: 4,
                              children: /* @__PURE__ */jsx(Hotkeys, {
                                keys: ["Ctrl", "Enter"]
                              })
                            }),
                            placement: "top",
                            portal: true,
                            children: /* @__PURE__ */jsx(ButtonFullWidth, {
                              onClick: this.handleQueryExecution,
                              type: "button",
                              icon: queryInProgress ? StopIcon : PlayIcon,
                              disabled: listenInProgress || !hasValidParams,
                              tone: queryInProgress ? "positive" : "primary",
                              text: queryInProgress ? "Cancel" : "Fetch"
                            })
                          })
                        }), /* @__PURE__ */jsx(Box, {
                          flex: 1,
                          marginLeft: 3,
                          children: /* @__PURE__ */jsx(ButtonFullWidth, {
                            onClick: this.handleListenExecution,
                            type: "button",
                            icon: listenInProgress ? StopIcon : PlayIcon,
                            text: listenInProgress ? "Stop" : "Listen",
                            mode: "ghost",
                            disabled: !hasValidParams,
                            tone: listenInProgress ? "positive" : "default"
                          })
                        })]
                      })
                    })
                  })
                })]
              })]
            })
          }), /* @__PURE__ */jsxs(ResultOuterContainer, {
            direction: "column",
            children: [/* @__PURE__ */jsx(ResultInnerContainer, {
              flex: 1,
              children: /* @__PURE__ */jsx(ResultContainer, {
                flex: 1,
                overflow: "hidden",
                tone: error ? "critical" : "default",
                $isInvalid: Boolean(error),
                children: /* @__PURE__ */jsxs(Result, {
                  overflow: "auto",
                  children: [/* @__PURE__ */jsx(InputBackgroundContainer, {
                    children: /* @__PURE__ */jsx(Box, {
                      marginLeft: 3,
                      children: /* @__PURE__ */jsx(StyledLabel, {
                        muted: true,
                        children: "Result"
                      })
                    })
                  }), /* @__PURE__ */jsxs(Box, {
                    padding: 3,
                    paddingTop: 5,
                    children: [(queryInProgress || listenInProgress && listenMutations.length === 0) && /* @__PURE__ */jsx(Box, {
                      marginTop: 3,
                      children: /* @__PURE__ */jsx(DelayedSpinner, {})
                    }), error && /* @__PURE__ */jsx(QueryErrorDialog, {
                      error
                    }), hasResult && /* @__PURE__ */jsx(ResultView, {
                      data: queryResult
                    }), listenInProgress && listenMutations.length > 0 && /* @__PURE__ */jsx(ResultView, {
                      data: listenMutations
                    })]
                  })]
                })
              })
            }), /* @__PURE__ */jsx(TimingsFooter, {
              children: /* @__PURE__ */jsx(TimingsCard, {
                paddingX: 4,
                paddingY: 3,
                sizing: "border",
                children: /* @__PURE__ */jsxs(TimingsTextContainer, {
                  align: "center",
                  children: [/* @__PURE__ */jsx(Box, {
                    children: /* @__PURE__ */jsxs(Text, {
                      muted: true,
                      children: ["Execution: ", typeof queryTime === "number" ? "".concat(queryTime, "ms") : "n/a"]
                    })
                  }), /* @__PURE__ */jsx(Box, {
                    marginLeft: 4,
                    children: /* @__PURE__ */jsxs(Text, {
                      muted: true,
                      children: ["End-to-end: ", typeof e2eTime === "number" ? "".concat(e2eTime, "ms") : "n/a"]
                    })
                  })]
                })
              })
            })]
          })]
        })
      })]
    });
  }
}
function useDatasets(client) {
  const projectId = client.config().projectId;
  const [datasets, setDatasets] = useState();
  useEffect(() => {
    const datasets$ = client.observable.datasets.list().subscribe({
      next: result => setDatasets(result.map(ds => ds.name)),
      error: err => setDatasets(err)
    });
    return () => datasets$.unsubscribe();
  }, [client, projectId]);
  return datasets || void 0;
}
function VisionContainer(props) {
  const toast = useToast();
  const loadedDatasets = useDatasets(props.client);
  if (!loadedDatasets) {
    return /* @__PURE__ */jsx(DelayedSpinner, {});
  }
  const datasets = loadedDatasets instanceof Error ?
  // On error, use the clients configured dataset
  [props.client.config().dataset || "production"] :
  // Otherwise use the loaded list, obviously
  loadedDatasets;
  return /* @__PURE__ */jsx(VisionGui, {
    ...props,
    datasets,
    toast
  });
}
function SanityVision(props) {
  const client = useClient({
    apiVersion: "1"
  });
  const config = {
    defaultApiVersion: DEFAULT_API_VERSION,
    ...props.tool.options
  };
  return /* @__PURE__ */jsx(VisionContainer, {
    client,
    config
  });
}
export { SanityVision as default };
//# sourceMappingURL=SanityVision-77b499dd.js.map
