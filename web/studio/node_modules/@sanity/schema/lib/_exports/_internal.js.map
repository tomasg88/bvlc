{"version":3,"file":"_internal.js","sources":["../../src/sanity/validation/createValidationResult.ts","../../src/sanity/groupProblems.ts","../../src/sanity/validation/utils/getDupes.ts","../../src/core/traverseSchema.ts","../../src/sanity/coreTypes.ts","../../src/sanity/traverseSchema.ts","../../src/sanity/validation/utils/isComponent.ts","../../src/sanity/validation/utils/validateComponent.ts","../../src/sanity/validation/types/object.ts","../../src/sanity/validation/types/document.ts","../../src/sanity/validation/types/reference.ts","../../src/sanity/validation/types/array.ts","../../src/sanity/validation/types/slug.ts","../../src/sanity/validation/types/file.ts","../../src/sanity/validation/types/image.ts","../../src/sanity/validation/utils/isJSONTypeOf.ts","../../src/sanity/validation/types/block.ts","../../src/sanity/validation/utils/validateNonObjectFieldsProp.ts","../../src/sanity/validation/utils/validateTypeName.ts","../../src/sanity/validation/types/deprecated.ts","../../src/sanity/validation/types/common.ts","../../src/sanity/validation/types/rootType.ts","../../src/sanity/validation/types/crossDatasetReference.ts","../../src/sanity/validateSchema.ts","../../src/legacy/actionUtils.ts"],"sourcesContent":["import type {SchemaValidationResult} from '../typedefs'\n\n// Temporary solution to ensure we have a central registry over used helpIds\nexport const HELP_IDS = {\n  TYPE_INVALID: 'schema-type-invalid',\n  TYPE_IS_ESM_MODULE: 'schema-type-is-esm-module',\n  TYPE_NAME_RESERVED: 'schema-type-name-reserved',\n  TYPE_MISSING_NAME: 'schema-type-missing-name-or-type',\n  TYPE_MISSING_TYPE: 'schema-type-missing-name-or-type',\n  TYPE_TITLE_RECOMMENDED: 'schema-type-title-is-recommended',\n  TYPE_TITLE_INVALID: 'schema-type-title-is-recommended',\n  OBJECT_FIELDS_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NOT_UNIQUE: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NAME_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_DEFINITION_INVALID_TYPE: 'schema-object-fields-invalid',\n  ARRAY_PREDEFINED_CHOICES_INVALID: 'schema-predefined-choices-invalid',\n  ARRAY_OF_ARRAY: 'schema-array-of-array',\n  ARRAY_OF_INVALID: 'schema-array-of-invalid',\n  ARRAY_OF_NOT_UNIQUE: 'schema-array-of-invalid',\n  ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT: 'schema-array-of-type-global-type-conflict',\n  ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT: 'schema-array-of-type-builtin-type-conflict',\n  REFERENCE_TO_INVALID: 'schema-reference-to-invalid',\n  REFERENCE_TO_NOT_UNIQUE: 'schema-reference-to-invalid',\n  REFERENCE_INVALID_OPTIONS: 'schema-reference-invalid-options',\n  REFERENCE_INVALID_OPTIONS_LOCATION: 'schema-reference-options-nesting',\n  REFERENCE_INVALID_FILTER_PARAMS_COMBINATION: 'schema-reference-filter-params-combination',\n  SLUG_SLUGIFY_FN_RENAMED: 'slug-slugifyfn-renamed',\n  ASSET_METADATA_FIELD_INVALID: 'asset-metadata-field-invalid',\n  CROSS_DATASET_REFERENCE_INVALID: 'cross-dataset-reference-invalid',\n  DEPRECATED_BLOCKEDITOR_KEY: 'schema-deprecated-blockeditor-key',\n  STANDALONE_BLOCK_TYPE: 'schema-standalone-block-type',\n}\n\nfunction createValidationResult(\n  severity: SchemaValidationResult['severity'],\n  message: string,\n  helpId: string | null,\n): SchemaValidationResult {\n  if (helpId && !Object.keys(HELP_IDS).some((id) => HELP_IDS[id] === helpId)) {\n    throw new Error(\n      `Used the unknown helpId \"${helpId}\", please add it to the array in createValidationResult.js`,\n    )\n  }\n  return {\n    severity,\n    message,\n    helpId,\n  }\n}\n\nexport const error = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('error', message, helpId)\n\nexport const warning = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('warning', message, helpId)\n\nexport const info = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('info', message, helpId)\n","import type {SchemaType, SchemaTypeDefinition} from '@sanity/types'\nimport {flatten, get} from 'lodash'\nimport {error} from './validation/createValidationResult'\nimport type {ProblemPath, ProblemPathPropertySegment, TypeWithProblems} from './typedefs'\n\n/**\n * @internal\n */\nexport function groupProblems(types: SchemaTypeDefinition[]): TypeWithProblems[] {\n  return flatten<TypeWithProblems>(types.map((type) => getTypeProblems(type))).filter(\n    (type) => type.problems.length > 0,\n  )\n}\n\nfunction createTypeWithMembersProblemsAccessor(\n  memberPropertyName: string,\n  getMembers = (type: SchemaType) => get(type, memberPropertyName),\n) {\n  return function getProblems(type, parentPath: ProblemPath): TypeWithProblems[] {\n    const currentPath: ProblemPath = [\n      ...parentPath,\n      {kind: 'type', type: type.type, name: type.name},\n    ]\n\n    const members = getMembers(type) || []\n\n    const memberProblems: TypeWithProblems[][] = Array.isArray(members)\n      ? members.map((memberType) => {\n          const propertySegment: ProblemPathPropertySegment = {\n            kind: 'property',\n            name: memberPropertyName,\n          }\n          const memberPath: ProblemPath = [...currentPath, propertySegment]\n          return getTypeProblems(memberType, memberPath)\n        })\n      : [\n          [\n            {\n              path: currentPath,\n              problems: [error(`Member declaration (${memberPropertyName}) is not an array`)],\n            },\n          ],\n        ]\n\n    return [\n      {\n        path: currentPath,\n        problems: type._problems || [],\n      },\n      ...flatten(memberProblems),\n    ]\n  }\n}\n\nconst arrify = (val) => (Array.isArray(val) ? val : (typeof val === 'undefined' && []) || [val])\n\nconst getObjectProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getImageProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getFileProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getArrayProblems = createTypeWithMembersProblemsAccessor('of')\nconst getReferenceProblems = createTypeWithMembersProblemsAccessor('to', (type) =>\n  'to' in type ? arrify(type.to) : [],\n)\nconst getBlockAnnotationProblems = createTypeWithMembersProblemsAccessor('marks.annotations')\nconst getBlockMemberProblems = createTypeWithMembersProblemsAccessor('of')\nconst getBlockProblems = (type, problems) => [\n  ...getBlockAnnotationProblems(type, problems),\n  ...getBlockMemberProblems(type, problems),\n]\n\nfunction getDefaultProblems(type, path = []): TypeWithProblems[] {\n  return [\n    {\n      path: [...path, {kind: 'type', type: type.type, name: type.name}],\n      problems: type._problems || [],\n    },\n  ]\n}\n\nfunction getTypeProblems(type: SchemaTypeDefinition, path = []): TypeWithProblems[] {\n  switch (type.type) {\n    case 'object': {\n      return getObjectProblems(type, path)\n    }\n    case 'document': {\n      return getObjectProblems(type, path)\n    }\n    case 'array': {\n      return getArrayProblems(type, path)\n    }\n    case 'reference': {\n      return getReferenceProblems(type, path)\n    }\n    case 'block': {\n      return getBlockProblems(type, path)\n    }\n    case 'image': {\n      return getImageProblems(type, path)\n    }\n    case 'file': {\n      return getFileProblems(type, path)\n    }\n    default: {\n      return getDefaultProblems(type, path)\n    }\n  }\n}\n","export function getDupes(array, selector = (v) => v) {\n  const dupes = array.reduce((acc, item) => {\n    const key = selector(item)\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(item)\n    return acc\n  }, {})\n\n  return Object.keys(dupes)\n    .map((key) => (dupes[key].length > 1 ? dupes[key] : null))\n    .filter(Boolean)\n}\n","import {flatten, uniq} from 'lodash'\nimport {getDupes} from '../sanity/validation/utils/getDupes'\n\ntype SchemaType = Record<string, any>\ntype SchemaTypeDef = Record<string, any>\n\ntype VisitContext = {\n  isRoot: boolean\n  isReserved: (typeName: string) => boolean\n  visit: Visitor\n  index: number\n  isDuplicate: (typeName: string) => boolean\n  getType: (typeName: string) => null | SchemaType\n  getTypeNames: () => Array<string>\n}\n\nexport type Visitor = (typeDef: SchemaTypeDef, arg1: VisitContext) => SchemaType\n\nconst NOOP_VISITOR: Visitor = (typeDef) => typeDef\n\nexport class UnknownType {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\nconst TYPE_TYPE = {name: 'type', type: null}\n\nconst FUTURE_RESERVED = ['any', 'time', 'date']\n\nexport function traverseSchema(\n  types: SchemaTypeDef[] = [],\n  coreTypes: SchemaTypeDef[] = [],\n  visitor: Visitor = NOOP_VISITOR,\n) {\n  const coreTypesRegistry = Object.create(null)\n  const registry = Object.create(null)\n\n  const coreTypeNames = coreTypes.map((typeDef) => typeDef.name)\n\n  const reservedTypeNames = FUTURE_RESERVED.concat(coreTypeNames)\n\n  const typeNames = types.map((typeDef) => typeDef && typeDef.name).filter(Boolean)\n\n  coreTypes.forEach((coreType) => {\n    coreTypesRegistry[coreType.name] = coreType\n  })\n\n  types.forEach((type, i) => {\n    // Allocate a placeholder for each type\n    registry[(type && type.name) || `__unnamed_${i}`] = {}\n  })\n\n  function getType(typeName) {\n    return typeName === 'type'\n      ? TYPE_TYPE\n      : coreTypesRegistry[typeName] || registry[typeName] || null\n  }\n\n  const duplicateNames = uniq(flatten(getDupes(typeNames)))\n\n  function isDuplicate(typeName) {\n    return duplicateNames.includes(typeName)\n  }\n  function getTypeNames() {\n    return typeNames.concat(coreTypeNames)\n  }\n  function isReserved(typeName) {\n    return typeName === 'type' || reservedTypeNames.includes(typeName)\n  }\n\n  const visitType = (isRoot) => (typeDef, index) => {\n    return visitor(typeDef, {\n      visit: visitType(false),\n      isRoot,\n      getType,\n      getTypeNames,\n      isReserved,\n      isDuplicate,\n      index,\n    })\n  }\n\n  coreTypes.forEach((coreTypeDef) => {\n    Object.assign(coreTypesRegistry[coreTypeDef.name], visitType(coreTypeDef))\n  })\n\n  types.forEach((typeDef, i) => {\n    Object.assign(\n      registry[(typeDef && typeDef.name) || `__unnamed_${i}`],\n      visitType(true)(typeDef, i),\n    )\n  })\n\n  return {\n    get(typeName: string) {\n      const res = registry[typeName] || coreTypesRegistry[typeName]\n      if (res) {\n        return res\n      }\n      throw new Error(`No such type: ${typeName}`)\n    },\n    has(typeName: string): boolean {\n      return typeName in registry || typeName in coreTypesRegistry\n    },\n    getTypeNames(): string[] {\n      return Object.keys(registry)\n    },\n    getTypes() {\n      return this.getTypeNames().map(this.get)\n    },\n    toJSON() {\n      return this.getTypes()\n    },\n  }\n}\n","const coreTypes = [\n  {name: 'array', jsonType: 'array', type: 'type'},\n  {name: 'block', jsonType: 'object', type: 'type'},\n  {name: 'boolean', jsonType: 'boolean', type: 'type'},\n  {name: 'datetime', jsonType: 'string', type: 'type'},\n  {name: 'date', jsonType: 'string', type: 'type'},\n  {name: 'document', jsonType: 'object', type: 'type'},\n  {name: 'email', jsonType: 'string', type: 'type'},\n  {name: 'file', jsonType: 'object', type: 'type'},\n  {name: 'geopoint', jsonType: 'object', type: 'type'},\n  {name: 'image', jsonType: 'object', type: 'type'},\n  {name: 'number', jsonType: 'number', type: 'type'},\n  {name: 'object', jsonType: 'object', type: 'type'},\n  {name: 'reference', jsonType: 'object', type: 'type'},\n  {name: 'crossDatasetReference', jsonType: 'object', type: 'type'},\n  {name: 'slug', jsonType: 'object', type: 'type'},\n  {name: 'span', jsonType: 'object', type: 'type'},\n  {name: 'string', jsonType: 'string', type: 'type'},\n  {name: 'telephone', jsonType: 'string', type: 'type'},\n  {name: 'text', jsonType: 'string', type: 'type'},\n  {name: 'url', jsonType: 'string', type: 'type'},\n] as const\n\nexport const coreTypeNames = coreTypes.map((t) => t.name)\nexport default coreTypes\n","import {traverseSchema, type Visitor} from '../core/traverseSchema'\nimport type {_FIXME_} from './typedefs'\nimport coreTypes from './coreTypes'\n\nexport function traverseSanitySchema(schemaTypes: _FIXME_[], visitor: Visitor) {\n  return traverseSchema(schemaTypes, coreTypes as _FIXME_, visitor)\n}\n","const REACT_SYM_RE = /^Symbol\\(react\\..+\\)$/\n\nexport function isComponentLike(value: any) {\n  const type = typeof value\n  // Note: we're not using `isValidElementType` from react-is here since it accepts too much, e.g. any strings.\n  return (\n    type === 'function' ||\n    (typeof value?.$$typeof === 'symbol' && REACT_SYM_RE.test(String(value?.$$typeof)))\n  )\n}\n","import {warning} from '../createValidationResult'\nimport inspect from '../../inspect'\nimport type {SchemaValidationResult} from '../../typedefs'\nimport {isComponentLike} from './isComponent'\n\nexport function validateComponent(typeDef: any): SchemaValidationResult[] {\n  const components = 'components' in typeDef ? typeDef.components : false\n  if (!components) {\n    return []\n  }\n\n  const warnings: SchemaValidationResult[] = []\n\n  if (components.input && !isComponentLike(components.input)) {\n    warnings.push(\n      warning(\n        `The \\`components.input\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.input,\n        )}). If you have imported a custom input component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.field && !isComponentLike(components.field)) {\n    warnings.push(\n      warning(\n        `The \\`components.field\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.field,\n        )}). If you have imported a custom field component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.item && !isComponentLike(components.item)) {\n    warnings.push(\n      warning(\n        `The \\`components.item\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.item,\n        )}). If you have imported a custom item component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.preview && !isComponentLike(components.preview)) {\n    warnings.push(\n      warning(\n        `The \\`components.preview\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.preview,\n        )}). If you have imported a custom preview component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  return warnings\n}\n","import {isPlainObject} from 'lodash'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport inspect from '../../inspect'\nimport {validateComponent} from '../utils/validateComponent'\n\nconst VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/\nconst CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/\ninterface Field {\n  name: string\n}\n\ninterface PreviewConfig {\n  select?: {\n    [key: string]: string\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  prepare?: Function\n}\n\nfunction validateFieldName(name): Array<any> {\n  if (typeof name !== 'string') {\n    return [\n      error(\n        `Field names must be strings. Saw \"${inspect(name)}\"`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n  if (name.startsWith('_')) {\n    return [\n      error(\n        `Invalid field name \"${name}\". Field names cannot start with underscores \"_\" as it's reserved for system fields.`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n\n  if (!VALID_FIELD_RE.test(name)) {\n    return [\n      error(\n        `Invalid field name: \"${name}\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ${String(\n          VALID_FIELD_RE,\n        )}).`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n  if (!CONVENTIONAL_FIELD_RE.test(name)) {\n    return [\n      warning(\n        'Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' +\n          ' It may be wise to keep special characters out of field names for easier access later on.',\n      ),\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n    ]\n  }\n  return []\n}\n\nexport function validateField(field, _visitorContext) {\n  if (!isPlainObject(field)) {\n    return [\n      error(\n        `Incorrect type for field definition - should be an object, saw ${inspect(field)}`,\n        HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE,\n      ),\n    ]\n  }\n\n  const problems = []\n  problems.push(\n    ...('name' in field\n      ? validateFieldName(field.name)\n      : [error('Missing field name', HELP_IDS.OBJECT_FIELD_NAME_INVALID)]),\n  )\n  problems.push(...validateComponent(field))\n  return problems\n}\n\nfunction getDuplicateFields(array: Array<Field>): Array<Array<Field>> {\n  const dupes: {[name: string]: Array<Field>} = {}\n  array.forEach((field) => {\n    if (!dupes[field.name]) {\n      dupes[field.name] = []\n    }\n    dupes[field.name].push(field)\n  })\n  return Object.keys(dupes)\n    .map((fieldName) => (dupes[fieldName].length > 1 ? dupes[fieldName] : null))\n    .filter(Boolean)\n}\n\nexport function validateFields(fields: any, options = {allowEmpty: false}) {\n  const problems = []\n  const fieldsIsArray = Array.isArray(fields)\n  if (!fieldsIsArray) {\n    return [\n      error(\n        `The \"fields\" property must be an array of fields. Instead saw \"${typeof fields}\"`,\n        HELP_IDS.OBJECT_FIELDS_INVALID,\n      ),\n    ]\n  }\n\n  const fieldsWithNames = fields.filter((field) => typeof field.name === 'string')\n\n  getDuplicateFields(fieldsWithNames).forEach((dupes) => {\n    problems.push(\n      error(\n        `Found ${dupes.length} fields with name \"${dupes[0].name}\" in object`,\n        HELP_IDS.OBJECT_FIELD_NOT_UNIQUE,\n      ),\n    )\n  })\n\n  if (fields.length === 0 && !options.allowEmpty) {\n    problems.push(error('Object should have at least one field', HELP_IDS.OBJECT_FIELDS_INVALID))\n  }\n\n  const standaloneBlockFields = fields\n    .filter((field) => field.type === 'block')\n    .map((field) => `\"${field.name}\"`)\n\n  if (standaloneBlockFields.length > 0) {\n    const fmtFields = standaloneBlockFields.join(', ')\n    problems.push(\n      error(\n        `Invalid standalone block field(s) ${fmtFields}. Block content must be defined as an array of blocks`,\n        HELP_IDS.STANDALONE_BLOCK_TYPE,\n      ),\n    )\n  }\n\n  return problems\n}\n\nexport function validatePreview(preview: PreviewConfig) {\n  if (!isPlainObject(preview)) {\n    return [error(`The \"preview\" property must be an object, instead saw \"${typeof preview}\"`)]\n  }\n\n  if (typeof preview.prepare !== 'undefined' && typeof preview.prepare !== 'function') {\n    return [\n      error(\n        `The \"preview.prepare\" property must be a function, instead saw \"${typeof preview.prepare}\"`,\n      ),\n    ]\n  }\n\n  if (!preview.select) {\n    return []\n  }\n\n  if (!isPlainObject(preview.select)) {\n    return [\n      error(\n        `The \"preview.select\" property must be an object, instead saw \"${typeof preview.prepare}\"`,\n      ),\n    ]\n  }\n\n  return Object.keys(preview.select).reduce((errs, key) => {\n    return typeof preview.select[key] === 'string'\n      ? errs\n      : errs.concat(\n          error(\n            `The key \"${key}\" of \"preview.select\" must be a string, instead saw \"${typeof preview\n              .select[key]}\"`,\n          ),\n        )\n  }, [])\n}\n\nexport default (typeDef, visitorContext) => {\n  let problems = validateFields(typeDef.fields)\n\n  let preview = typeDef.preview\n  if (preview) {\n    const previewErrors = validatePreview(typeDef.preview)\n    problems = problems.concat(previewErrors)\n    preview = previewErrors.some((err) => err.severity === 'error') ? {} : preview\n  }\n\n  if (\n    typeDef.type !== 'document' &&\n    typeDef.type !== 'object' &&\n    typeof typeDef.initialValue !== 'undefined'\n  ) {\n    problems.push(\n      error(`The \"initialValue\" property is currently only supported for document & object types.`),\n    )\n  }\n\n  return {\n    ...typeDef,\n    preview,\n    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {isPlainObject} from 'lodash'\nimport {error} from '../createValidationResult'\nimport object from './object'\n\nexport default (typeDefinition, visitorContext) => {\n  const typeDef = object(typeDefinition, visitorContext)\n  const {initialValue, initialValues} = typeDef\n\n  const hasInitialValue = typeof initialValue !== 'undefined'\n  if (hasInitialValue && !isPlainObject(initialValue) && typeof initialValue !== 'function') {\n    typeDef._problems.push(\n      error(`The \"initialValue\" property must be either a plain object or a function`),\n    )\n  }\n\n  if (typeof initialValues !== 'undefined') {\n    typeDef._problems.push(error(`Found property \"initialValues\" - did you mean \"initialValue\"?`))\n  }\n\n  return typeDef\n}\n","import {error, HELP_IDS} from '../createValidationResult'\nimport {flatten, isPlainObject} from 'lodash'\nimport {getDupes} from '../utils/getDupes'\nimport {SchemaValidationResult} from '../../typedefs'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.REFERENCE_TO_INVALID,\n          ),\n        )\n      : error(\n          'The reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.REFERENCE_TO_INVALID,\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The reference type should define at least one accepted type. Please check the \"to\" property.',\n        HELP_IDS.REFERENCE_TO_INVALID,\n      ),\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION,\n        ),\n      ),\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`),\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`)),\n    )\n  }\n\n  return problems\n}\n","import {flatten, partition} from 'lodash'\nimport humanizeList from 'humanize-list'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\nimport {coreTypeNames} from '../../coreTypes'\n\nfunction isPrimitiveTypeName(typeName) {\n  return typeName === 'string' || typeName === 'number' || typeName === 'boolean'\n}\n\nfunction isAssignable(typeName, type) {\n  return (typeof type.name === 'string' ? type.name : type.type) === typeName\n}\n\nfunction quote(n) {\n  return `\"${n}\"`\n}\n\nfunction pluralize(arr: unknown[], suf = 's') {\n  return arr.length === 1 ? '' : suf\n}\n\nfunction format(value: unknown) {\n  if (Array.isArray(value)) {\n    return `array with ${value.length} entries`\n  }\n  if (typeof value === 'object' && value !== null) {\n    return `object with keys ${humanizeList(Object.keys(value).map(quote))}`\n  }\n  return quote(value)\n}\n\nexport default (typeDef, visitorContext) => {\n  // name should already have been marked\n  const ofIsArray = Array.isArray(typeDef.of)\n\n  if (ofIsArray) {\n    const invalid = typeDef.of.reduce((errs, def, idx) => {\n      if (typeof def.name === 'string') {\n        // If an array member has been given a \"local\" type name, we want to trigger an error if the given member type name\n        // is one of the builtin types\n        //\n        // The following examples should be an error (where book is an existing root level type and reference is a built-in type):\n        //  - (…) of: [{type: 'book', name: 'image'}]\n        //  - (…) of: [{type: 'book', name: 'object'}]\n        //  - (…) of: [{type: 'object', name: 'reference'}]\n        // The following examples are valid (where \"address\" is not defined as a global object type)\n        //  - (…) of: [{type: 'object', name: 'address'}]\n        // The following examples are redundant, but should be allowed (at least for now)\n        //  - (…) of: [{type: 'object', name: 'object'}]\n        //  - (…) of: [{type: 'image', name: 'image'}]\n\n        if (\n          // specifying the same name as the type is redundant, but should not be a hard error at this point\n          // Consider showing a warning for this and deprecate this ability eventually\n          def.name !== def.type &&\n          coreTypeNames.includes(def.name)\n        ) {\n          return errs.concat(\n            error(\n              `Found array member declaration with the same type name as a built-in type (\"${def.name}\"). Array members can not be given the same name as a built-in type.`,\n              HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT,\n            ),\n          )\n        }\n      }\n\n      if (def.type === 'object' && def.name && visitorContext.getType(def.name)) {\n        return errs.concat(\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${def.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT,\n          ),\n        )\n      }\n      if (def.type === 'array') {\n        return errs.concat(\n          error(\n            `Found array member declaration of type \"array\" - multidimensional arrays are not currently supported by Sanity`,\n            HELP_IDS.ARRAY_OF_ARRAY,\n          ),\n        )\n      }\n\n      if (def) {\n        return errs\n      }\n\n      const err = `Found ${def === null ? 'null' : typeof def}, expected member declaration`\n      return errs.concat(\n        error(\n          `Found invalid type member declaration in array at index ${idx}: ${err}`,\n          HELP_IDS.ARRAY_OF_INVALID,\n        ),\n      )\n    }, [])\n\n    if (invalid.length > 0) {\n      return {\n        ...typeDef,\n        of: [],\n        _problems: invalid,\n      }\n    }\n  }\n\n  const problems = flatten([\n    ofIsArray\n      ? getDupes(typeDef.of, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in array. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.ARRAY_OF_NOT_UNIQUE,\n          ),\n        )\n      : error(\n          'The array type is missing or having an invalid value for the required \"of\" property',\n          HELP_IDS.ARRAY_OF_INVALID,\n        ),\n  ])\n  const of = ofIsArray ? typeDef.of : []\n\n  // Don't allow object types without a name in block arrays\n  const hasObjectTypesWithoutName = of.some(\n    (type) => type.type === 'object' && typeof type.name === 'undefined',\n  )\n  const hasBlockType = of.some((ofType) => ofType.type === 'block')\n  if (hasBlockType && hasObjectTypesWithoutName) {\n    problems.push(\n      error(\n        \"The array type's 'of' property can't have an object type without a 'name' property as member, when the 'block' type is also a member of that array.\",\n        HELP_IDS.ARRAY_OF_INVALID,\n      ),\n    )\n  }\n\n  const [primitiveTypes, objectTypes] = partition(\n    of,\n    (ofType) =>\n      isPrimitiveTypeName(ofType.type) ||\n      isPrimitiveTypeName(visitorContext.getType(ofType.type)?.jsonType),\n  )\n\n  const isMixedArray = primitiveTypes.length > 0 && objectTypes.length > 0\n\n  if (isMixedArray) {\n    const primitiveTypeNames = primitiveTypes.map((t) => t.type)\n    const objectTypeNames = objectTypes.map((t) => t.type)\n    problems.push(\n      error(\n        `The array type's 'of' property can't have both object types and primitive types (found primitive type ${pluralize(\n          primitiveTypeNames,\n        )} ${humanizeList(primitiveTypeNames.map(quote))} and object type${pluralize(\n          objectTypeNames,\n        )} ${humanizeList(objectTypeNames.map(quote))})`,\n        HELP_IDS.ARRAY_OF_INVALID,\n      ),\n    )\n  }\n\n  const list = typeDef?.options?.list\n  if (!isMixedArray && Array.isArray(list)) {\n    const isArrayOfPrimitives = primitiveTypes.length > 0\n    if (isArrayOfPrimitives) {\n      list.forEach((option) => {\n        const value = option?.value ?? option\n        const isDeclared = primitiveTypes.some((primitiveType) => {\n          return typeof value === visitorContext.getType(primitiveType.type).jsonType\n        })\n        if (!isDeclared) {\n          const formattedTypeList = humanizeList(\n            primitiveTypes.map((t) => t.name || t.type),\n            {conjunction: 'or'},\n          )\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                value,\n              )}. Must be either a value of type ${formattedTypeList}, or an object with {title: string, value: ${formattedTypeList}}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID,\n            ),\n          )\n        }\n      })\n    } else {\n      list.forEach((option) => {\n        const optionTypeName = option._type || 'object'\n        const isDeclared = objectTypes.some((validObjectType) =>\n          isAssignable(optionTypeName, validObjectType),\n        )\n        if (!isDeclared) {\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                option,\n              )}. Must be an object with \"_type\" set to ${humanizeList(\n                objectTypes\n                  .map((t) => t.name || t.type)\n                  .map((t) => (t === 'object' ? 'undefined' : quote(t))),\n                {conjunction: 'or'},\n              )}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID,\n            ),\n          )\n        }\n      })\n    }\n  }\n\n  if (typeDef?.options?.list && typeDef?.options?.layout === 'tags') {\n    problems.push(\n      warning(\n        'Found array member declaration with both tags layout and a list of predefined values. If you want to display a list of predefined values, remove the tags layout from `options`.',\n      ),\n    )\n  }\n\n  return {\n    ...typeDef,\n    of: of.map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n","import {warning, HELP_IDS} from '../createValidationResult'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n\n  if (typeDef.options && typeDef.options.slugifyFn) {\n    problems.push(\n      warning(\n        'Heads up! The \"slugifyFn\" option has been renamed to \"slugify\".',\n        HELP_IDS.SLUG_SLUGIFY_FN_RENAMED,\n      ),\n    )\n\n    typeDef.options.slugify = typeDef.options.slugifyFn\n  }\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n","import {error, HELP_IDS} from '../createValidationResult'\nimport {validateFields, validateField} from './object'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  const invalidFieldNames = Array.isArray(fields)\n    ? fields?.filter((field) => field.name === 'asset')\n    : []\n\n  if (\n    typeDef.options &&\n    typeof typeDef.options.metadata !== 'undefined' &&\n    !Array.isArray(typeDef.options.metadata)\n  ) {\n    problems.push(\n      error(\n        `Invalid type for file \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID,\n      ),\n    )\n  } else if (invalidFieldNames.length > 0) {\n    problems.push(error('The name `asset` is not a valid field name for type `file`.'))\n  }\n\n  return {\n    ...typeDef,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {error, warning, HELP_IDS} from '../createValidationResult'\nimport {validateFields, validateField} from './object'\n\nconst autoMeta = ['dimensions', 'hasAlpha', 'isOpaque']\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  let options = typeDef.options\n  const metadata = options?.metadata\n  const superfluousMeta = Array.isArray(metadata)\n    ? metadata.filter((meta) => autoMeta.includes(meta))\n    : []\n\n  const invalidFieldNames = ['asset', 'hotspot', 'crop']\n\n  const fieldsWithInvalidName = Array.isArray(fields)\n    ? fields?.filter((field) => invalidFieldNames.includes(field.name))\n    : []\n\n  if (typeof metadata !== 'undefined' && !Array.isArray(metadata)) {\n    problems.push(\n      error(\n        `Invalid type for image \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID,\n      ),\n    )\n  } else if (superfluousMeta.length > 0) {\n    problems.push(\n      warning(\n        `Image \\`metadata\\` field contains superfluous properties (they are always included): ${superfluousMeta.join(\n          ', ',\n        )}`,\n      ),\n    )\n    options = {...options, metadata: metadata.filter((meta) => !autoMeta.includes(meta))}\n  } else if (fieldsWithInvalidName.length > 0) {\n    problems.push(\n      error(\n        `The names \\`${invalidFieldNames.join(\n          '`, `',\n        )}\\` are invalid field names for type \\`image\\`.`,\n      ),\n    )\n  }\n\n  return {\n    ...typeDef,\n    options,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","export function isJSONTypeOf(type, jsonType, visitorContext) {\n  if ('jsonType' in type) {\n    return type.jsonType === jsonType\n  }\n  const parentType = visitorContext.getType(type.type)\n  if (!parentType) {\n    throw new Error(`Could not resolve jsonType of ${type.name}. No parent type found`)\n  }\n  return isJSONTypeOf(parentType, jsonType, visitorContext)\n}\n","import {omit, isPlainObject} from 'lodash'\nimport humanizeList from 'humanize-list'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {isJSONTypeOf} from '../utils/isJSONTypeOf'\nimport {coreTypeNames} from '../../coreTypes'\n\nconst getTypeOf = (thing) => (Array.isArray(thing) ? 'array' : typeof thing)\nconst quote = (str) => `\"${str}\"`\nconst allowedKeys = [\n  'components',\n  'lists',\n  'marks',\n  'name',\n  'of',\n  'options',\n  'styles',\n  'title',\n  'type',\n  'validation',\n]\nconst allowedMarkKeys = ['decorators', 'annotations']\nconst allowedStyleKeys = ['blockEditor', 'title', 'value', 'component']\nconst allowedDecoratorKeys = ['blockEditor', 'title', 'value', 'icon', 'component']\nconst allowedListKeys = ['title', 'value', 'icon', 'component']\nconst supportedBuiltInObjectTypes = ['file', 'image', 'object', 'reference']\n\nexport default function validateBlockType(typeDef, visitorContext) {\n  const problems = []\n  let styles = typeDef.styles\n  let lists = typeDef.lists\n  let marks = typeDef.marks\n  let members = typeDef.of\n\n  const disallowedKeys = Object.keys(typeDef).filter(\n    (key) => !allowedKeys.includes(key) && !key.startsWith('_'),\n  )\n\n  if (disallowedKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedKeys.map(quote),\n        )}`,\n      ),\n    )\n  }\n\n  if (marks) {\n    marks = validateMarks(typeDef.marks, visitorContext, problems)\n  }\n\n  if (styles) {\n    styles = validateStyles(styles, visitorContext, problems)\n  }\n\n  if (lists) {\n    lists = validateLists(lists, visitorContext, problems)\n  }\n\n  if (members) {\n    members = validateMembers(members, visitorContext, problems)\n  }\n  return {\n    ...omit(typeDef, disallowedKeys),\n    marks,\n    styles,\n    name: typeDef.name || typeDef.type,\n    of: members,\n    _problems: problems,\n  }\n}\n\nfunction validateMarks(marks, visitorContext, problems) {\n  let decorators = marks.decorators\n  let annotations = marks.annotations\n\n  if (!isPlainObject(marks)) {\n    problems.push(error(`\"marks\" declaration should be an object, got ${getTypeOf(marks)}`))\n    return problems\n  }\n\n  const disallowedMarkKeys = Object.keys(marks).filter(\n    (key) => !allowedMarkKeys.includes(key) && !key.startsWith('_'),\n  )\n\n  if (disallowedMarkKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedMarkKeys.map(quote),\n        )}`,\n      ),\n    )\n  }\n\n  if (decorators && !Array.isArray(decorators)) {\n    problems.push(\n      error(`\"marks.decorators\" declaration should be an array, got ${getTypeOf(decorators)}`),\n    )\n  } else if (decorators) {\n    decorators\n      .filter((dec) => !!dec.blockEditor)\n      .forEach((dec) => {\n        dec.icon = dec.blockEditor.icon\n        dec.component = dec.blockEditor.render\n      })\n    decorators = validateDecorators(decorators, visitorContext, problems)\n  }\n\n  if (annotations && !Array.isArray(annotations)) {\n    problems.push(\n      error(`\"marks.annotations\" declaration should be an array, got ${getTypeOf(annotations)}`),\n    )\n  } else if (annotations) {\n    annotations = validateAnnotations(annotations, visitorContext, problems)\n  }\n\n  return {...marks, decorators, annotations}\n}\n\nfunction validateLists(lists, visitorContext, problems) {\n  if (!Array.isArray(lists)) {\n    problems.push(error(`\"lists\" declaration should be an array, got ${getTypeOf(lists)}`))\n    return problems\n  }\n\n  lists.forEach((list, index) => {\n    if (!isPlainObject(list)) {\n      problems.push(error(`List must be an object, got ${getTypeOf(list)}`))\n      return\n    }\n\n    const name = list.value || `#${index}`\n    const disallowedKeys = Object.keys(list).filter(\n      (key) => !allowedListKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for list ${name}: ${humanizeList(disallowedKeys.map(quote))}`,\n        ),\n      )\n    }\n\n    if (!list.value) {\n      problems.push(error(`List #${index} is missing required \"value\" property`))\n    } else if (typeof list.value !== 'string') {\n      problems.push(\n        error(\n          `List type #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            list.value,\n          )}`,\n        ),\n      )\n    } else if (!list.title) {\n      problems.push(warning(`List type ${name} is missing recommended \"title\" property`))\n    }\n  })\n  return lists\n}\n\nfunction validateStyles(styles, visitorContext, problems) {\n  if (!Array.isArray(styles)) {\n    problems.push(error(`\"styles\" declaration should be an array, got ${getTypeOf(styles)}`))\n    return problems\n  }\n\n  styles.forEach((style, index) => {\n    if (!isPlainObject(style)) {\n      problems.push(error(`Style must be an object, got ${getTypeOf(style)}`))\n      return\n    }\n\n    const name = style.value || `#${index}`\n    const disallowedKeys = Object.keys(style).filter(\n      (key) => !allowedStyleKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for style ${name}: ${humanizeList(disallowedKeys.map(quote))}`,\n        ),\n      )\n    }\n\n    if (!style.value) {\n      problems.push(error(`Style #${index} is missing required \"value\" property`))\n    } else if (typeof style.value !== 'string') {\n      problems.push(\n        error(\n          `Style #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            style.value,\n          )}`,\n        ),\n      )\n    } else if (!style.title) {\n      problems.push(warning(`Style ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof style.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Style has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      style.component = style.component || style.blockEditor.render\n    }\n  })\n  return styles\n}\n\nfunction validateDecorators(decorators, visitorContext, problems) {\n  decorators.forEach((decorator, index) => {\n    if (!isPlainObject(decorator)) {\n      problems.push(error(`Annotation must be an object, got ${getTypeOf(decorator)}`))\n      return\n    }\n\n    const name = decorator.value || `#${index}`\n    const disallowedKeys = Object.keys(decorator).filter(\n      (key) => !allowedDecoratorKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for decorator ${name}: ${humanizeList(\n            disallowedKeys.map(quote),\n          )}`,\n        ),\n      )\n    }\n\n    if (!decorator.value) {\n      problems.push(error(`Decorator #${index} is missing required \"value\" property`))\n    } else if (typeof decorator.value !== 'string') {\n      problems.push(\n        error(\n          `Decorator #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            decorator.value,\n          )}`,\n        ),\n      )\n    } else if (!decorator.title) {\n      problems.push(warning(`Decorator ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof decorator.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Decorator \"${name}\" has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      decorator.icon = decorator.icon || decorator.blockEditor.icon\n      decorator.component = decorator.component || decorator.blockEditor.render\n    }\n  })\n  return decorators\n}\n\nfunction validateAnnotations(annotations, visitorContext, problems) {\n  return annotations.map((annotation) => {\n    if (!isPlainObject(annotation)) {\n      return {\n        ...annotation,\n        _problems: [error(`Annotation must be an object, got ${getTypeOf(annotation)}`)],\n      }\n    }\n\n    const {_problems} = visitorContext.visit(annotation, visitorContext)\n    const targetType = annotation.type && visitorContext.getType(annotation.type)\n    if (targetType && !isJSONTypeOf(targetType, 'object', visitorContext)) {\n      _problems.push(\n        error(\n          `Annotation cannot have type \"${annotation.type}\" - annotation types must inherit from object`,\n        ),\n      )\n    }\n\n    if (typeof annotation.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Annotation has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      annotation.icon = annotation.icon || annotation.blockEditor.icon\n      if (annotation.blockEditor?.render && !annotation.components?.annotation) {\n        annotation.components = annotation.components || {}\n        annotation.components.annotation =\n          annotation.components.annotation || annotation.blockEditor.render\n      }\n    }\n\n    return {...annotation, _problems}\n  })\n}\n\nfunction validateMembers(members, visitorContext, problems) {\n  if (!Array.isArray(members)) {\n    problems.push(error(`\"of\" declaration should be an array, got ${getTypeOf(members)}`))\n    return undefined\n  }\n\n  return members.map((member) => {\n    const {_problems} = visitorContext.visit(member, visitorContext)\n    if (member.type === 'object' && member.name && visitorContext.getType(member.name)) {\n      return {\n        ...member,\n        _problems: [\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${member.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT,\n          ),\n        ],\n      }\n    }\n\n    // Test that each member is of a support object-like type\n    let type = member\n    while (type && !type.jsonType) {\n      type = visitorContext.getType(type.type)\n    }\n    const nonObjectCoreTypes = coreTypeNames.filter((n) => !supportedBuiltInObjectTypes.includes(n))\n    if (\n      // Must be object-like type (to validate hoisted types)\n      (type && type.jsonType !== 'object') ||\n      // Can't be a core type, or core object type that isn't supported (like 'span')\n      nonObjectCoreTypes.some((coreName) => coreName === member.type)\n    ) {\n      return {\n        ...member,\n        _problems: [\n          error(\n            `Block member types must be a supported object-like type. The following built-in types are supported: '${supportedBuiltInObjectTypes.join(\n              \"', '\",\n            )}'. You can also use shorthands for previously defined object types like {type: 'myObjectType'}`,\n            HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT,\n          ),\n        ],\n      }\n    }\n    return {...member, _problems}\n  })\n}\n","import type {SchemaType} from '@sanity/types'\nimport type {SchemaValidationResult} from '../../typedefs'\nimport {error} from '../createValidationResult'\n\nexport function validateNonObjectFieldsProp(\n  typeDef: SchemaType,\n  visitorContext,\n): SchemaValidationResult[] {\n  if (!('fields' in typeDef)) {\n    return []\n  }\n\n  let type = typeDef\n  while (type && !type.jsonType) {\n    type = visitorContext.getType(type.type)\n  }\n\n  if (type && type.jsonType !== 'object') {\n    return [error(`Type has propery \"fields\", but is not an object/document type.`)]\n  }\n\n  return []\n}\n","import leven from 'leven'\nimport humanize from 'humanize-list'\nimport {error, HELP_IDS} from '../createValidationResult'\n\nconst quote = (str) => `\"${str}\"`\n\nexport function validateTypeName(typeName: string, visitorContext) {\n  const possibleTypeNames = visitorContext.getTypeNames()\n\n  if (!typeName) {\n    return [\n      error(\n        `Type is missing a type. Valid types are: ${humanize(possibleTypeNames)}`,\n        HELP_IDS.TYPE_MISSING_TYPE,\n      ),\n    ]\n  }\n\n  if (typeof typeName !== 'string') {\n    return [\n      error(\n        `Type has an invalid \"type\"-property - should be a string. Valid types are: ${humanize(\n          possibleTypeNames,\n        )}`,\n        HELP_IDS.TYPE_MISSING_TYPE,\n      ),\n    ]\n  }\n\n  const isValid = possibleTypeNames.includes(typeName)\n\n  if (!isValid) {\n    const suggestions = possibleTypeNames\n      .map((possibleTypeName) => {\n        return [leven(typeName, possibleTypeName), possibleTypeName]\n      })\n      .filter(([distance]) => distance < 3)\n      .map(([_, name]) => name)\n\n    const suggestion =\n      suggestions.length > 0\n        ? ` Did you mean ${humanize(suggestions.map(quote), {conjunction: 'or'})}?`\n        : ''\n\n    return [\n      error(\n        `Unknown type: ${typeName}.${suggestion}\\n\\nValid types are: ${humanize(\n          possibleTypeNames,\n        )}`,\n      ),\n    ]\n  }\n  return []\n}\n","import {SchemaValidationResult} from '../../typedefs'\nimport {warning} from '../createValidationResult'\n\nexport function validateDeprecatedProperties(type): SchemaValidationResult[] {\n  const warnings = []\n\n  if (type?.inputComponent) {\n    warnings.push(\n      warning(`The \"inputComponent\" property is deprecated. Use \"components.input\" instead.`),\n    )\n  }\n\n  if (type?.preview?.component) {\n    warnings.push(\n      warning(`The \"preview.component\" property is deprecated. Use \"components.preview\" instead.`),\n    )\n  }\n\n  if (type?.diffComponent) {\n    warnings.push(\n      warning(`The \"diffComponent\" property is deprecated. Use \"components.diff\" instead.`),\n    )\n  }\n\n  if (type?.options?.editModal) {\n    warnings.push(\n      warning(`The \"options.editModal\" property is deprecated. Use \"options.modal\" instead.`),\n    )\n  }\n\n  if (type?.options?.isHighlighted) {\n    warnings.push(\n      warning(\n        `The \"options.isHighlighted\" property is deprecated. You can put fields behind a collapsed fieldset if you want to hide them from plain sight.`,\n      ),\n    )\n  }\n\n  return warnings\n}\n","import {validateNonObjectFieldsProp} from '../utils/validateNonObjectFieldsProp'\nimport {validateTypeName} from '../utils/validateTypeName'\nimport {validateDeprecatedProperties} from './deprecated'\n\nexport default (typeDef, visitorContext) => {\n  return {\n    ...typeDef,\n    _problems: [\n      ...validateTypeName(typeDef.type, visitorContext),\n      ...validateNonObjectFieldsProp(typeDef, visitorContext),\n      ...validateDeprecatedProperties(typeDef),\n    ].filter(Boolean),\n  }\n}\n","import {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateComponent} from '../utils/validateComponent'\n\nexport default (typeDef, visitorContext) => {\n  const hasName = Boolean(typeDef.name)\n  if (!hasName && Object.keys(typeDef).length === 1) {\n    // Short-circuit on obviously invalid types (only key is _problems)\n    return {\n      ...typeDef,\n      _problems: [\n        error(\n          'Invalid/undefined type declaration, check declaration or the import/export of the schema type.',\n          HELP_IDS.TYPE_INVALID,\n        ),\n      ],\n    }\n  }\n\n  const problems = []\n  if (looksLikeEsmModule(typeDef)) {\n    problems.push(\n      error(\n        'Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property',\n        HELP_IDS.TYPE_IS_ESM_MODULE,\n      ),\n    )\n  } else if (!hasName) {\n    problems.push(error('Missing type name', HELP_IDS.TYPE_MISSING_NAME))\n  } else if (visitorContext.isReserved(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: \"${typeDef.name}\" is a reserved name.`,\n        HELP_IDS.TYPE_NAME_RESERVED,\n      ),\n    )\n  }\n\n  if (visitorContext.isDuplicate(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: A type with name \"${typeDef.name}\" is already defined in the schema.`,\n      ),\n    )\n  }\n\n  problems.push(...validateComponent(typeDef))\n\n  if ('title' in typeDef && typeof typeDef.title !== 'string') {\n    problems.push(warning('Type title is not a string.', HELP_IDS.TYPE_TITLE_INVALID))\n  }\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction looksLikeEsmModule(typeDef) {\n  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title)\n}\n","import {flatten, isPlainObject} from 'lodash'\nimport {error, HELP_IDS} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\nimport {SchemaValidationResult} from '../../typedefs'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nconst VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/\nexport function isValidDatasetName(name: string): string | true {\n  const isValid = name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name)\n  return (\n    isValid ||\n    `The provided dataset \"${name}\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore`\n  )\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n          ),\n        )\n      : error(\n          'The cross dataset reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The cross dataset reference type should define at least one referenced type. Please check the \"to\" property.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  normalizedTo.forEach((crossDatasetTypeDef, index) => {\n    if (!crossDatasetTypeDef.type) {\n      problems.push(\n        error(\n          `The referenced type at index ${index} must be named. Specify the name of the type you want to create references to.`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n      )\n    }\n\n    if (!isPlainObject(crossDatasetTypeDef.preview)) {\n      problems.push(\n        error(\n          `Missing required preview config for the referenced type \"${\n            crossDatasetTypeDef.type || '<unknown type>'\n          }\"`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n      )\n    }\n  })\n\n  if (typeof typeDef.dataset === 'string') {\n    const datasetValidation = isValidDatasetName(typeDef.dataset)\n    if (datasetValidation !== true) {\n      problems.push(error(datasetValidation, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID))\n    }\n  } else {\n    problems.push(\n      error(\n        'A cross dataset reference must specify a `dataset`',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  if (typeDef.studioUrl && typeof typeDef.studioUrl !== 'function') {\n    problems.push(\n      error(\n        'The \"studioUrl\" property on a cross dataset reference must be a function taking \"{id, type}\" as argument and returning a studio url.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION,\n        ),\n      ),\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`),\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`)),\n    )\n  }\n\n  return problems\n}\n","import {traverseSanitySchema} from './traverseSchema'\nimport object from './validation/types/object'\nimport documentVisitor from './validation/types/document'\nimport reference from './validation/types/reference'\nimport array from './validation/types/array'\nimport slug from './validation/types/slug'\nimport file from './validation/types/file'\nimport image from './validation/types/image'\nimport block from './validation/types/block'\nimport common from './validation/types/common'\nimport rootType from './validation/types/rootType'\nimport crossDatasetReference from './validation/types/crossDatasetReference'\nimport {_FIXME_} from './typedefs'\n\nconst typeVisitors = {\n  array,\n  object,\n  slug,\n  file,\n  image,\n  block,\n  document: documentVisitor,\n  reference: reference,\n  crossDatasetReference: crossDatasetReference,\n}\n\nconst getNoopVisitor = (visitorContext) => (schemaDef) => ({\n  name: `<unnamed_type_@_index_${visitorContext.index}>`,\n  ...schemaDef,\n  _problems: [],\n})\n\nfunction combine(...visitors) {\n  return (schemaType, visitorContext) => {\n    return visitors.reduce(\n      (result, visitor) => {\n        const res = visitor(result, visitorContext)\n        return {\n          ...res,\n          _problems: result._problems.concat(res._problems),\n        }\n      },\n      {_problems: [], ...schemaType},\n    )\n  }\n}\n\n/**\n * @internal\n */\nexport function validateSchema(schemaTypes: _FIXME_) {\n  return traverseSanitySchema(schemaTypes, (schemaDef, visitorContext) => {\n    const typeVisitor =\n      (schemaDef && schemaDef.type && typeVisitors[schemaDef.type]) ||\n      getNoopVisitor(visitorContext)\n\n    if (visitorContext.isRoot) {\n      return combine(rootType, common, typeVisitor)(schemaDef, visitorContext)\n    }\n\n    return combine(common, typeVisitor)(schemaDef, visitorContext)\n  })\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SchemaType} from '@sanity/types'\nimport {difference} from 'lodash'\n\nconst ACTIONS_FLAG = '__experimental_actions'\n\nconst DEFAULT_ACTIONS = ['create', 'update', 'delete', 'publish']\nconst VALID_ACTIONS = DEFAULT_ACTIONS\n\n// todo: enable this when officially deprecating experimental actions\nconst DEPRECATE_EXPERIMENTAL_ACTIONS = false\n\nconst hasWarned = {}\nconst readActions = (schemaType: SchemaType): string[] => {\n  if (DEPRECATE_EXPERIMENTAL_ACTIONS && !(schemaType.name in hasWarned)) {\n    console.warn(`Heads up! Experimental actions is now deprecated and replaced by Document Actions. Read more about how to migrate on ${generateHelpUrl(\n      'experimental-actions-replaced-by-document-actions',\n    )}\".\n`)\n    hasWarned[schemaType.name] = true\n  }\n\n  return ACTIONS_FLAG in schemaType ? (schemaType[ACTIONS_FLAG] as string[]) : DEFAULT_ACTIONS\n}\n\nconst validateActions = (typeName: string, actions: string[]) => {\n  if (!Array.isArray(actions)) {\n    throw new Error(\n      `The value of <type>.${ACTIONS_FLAG} should be an array with any of the actions ${VALID_ACTIONS.join(\n        ', ',\n      )}`,\n    )\n  }\n\n  const invalid = difference(actions, VALID_ACTIONS)\n\n  if (invalid.length > 0) {\n    throw new Error(\n      `Invalid action${\n        invalid.length > 1 ? 's' : ''\n      } configured for schema type \"${typeName}\": ${invalid.join(\n        ', ',\n      )}. Valid actions are: ${VALID_ACTIONS.join(', ')}`,\n    )\n  }\n\n  return actions\n}\n\nexport const resolveEnabledActions = (schemaType: SchemaType): string[] =>\n  validateActions(schemaType.name, readActions(schemaType))\n\nexport const isActionEnabled = (schemaType: SchemaType, action: string): boolean =>\n  resolveEnabledActions(schemaType).includes(action)\n"],"names":["HELP_IDS","TYPE_INVALID","TYPE_IS_ESM_MODULE","TYPE_NAME_RESERVED","TYPE_MISSING_NAME","TYPE_MISSING_TYPE","TYPE_TITLE_RECOMMENDED","TYPE_TITLE_INVALID","OBJECT_FIELDS_INVALID","OBJECT_FIELD_NOT_UNIQUE","OBJECT_FIELD_NAME_INVALID","OBJECT_FIELD_DEFINITION_INVALID_TYPE","ARRAY_PREDEFINED_CHOICES_INVALID","ARRAY_OF_ARRAY","ARRAY_OF_INVALID","ARRAY_OF_NOT_UNIQUE","ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT","ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT","REFERENCE_TO_INVALID","REFERENCE_TO_NOT_UNIQUE","REFERENCE_INVALID_OPTIONS","REFERENCE_INVALID_OPTIONS_LOCATION","REFERENCE_INVALID_FILTER_PARAMS_COMBINATION","SLUG_SLUGIFY_FN_RENAMED","ASSET_METADATA_FIELD_INVALID","CROSS_DATASET_REFERENCE_INVALID","DEPRECATED_BLOCKEDITOR_KEY","STANDALONE_BLOCK_TYPE","createValidationResult","severity","message","helpId","Object","keys","some","id","Error","concat","error","warning","groupProblems","types","flatten","default","map","type","getTypeProblems","filter","problems","length","createTypeWithMembersProblemsAccessor","memberPropertyName","getMembers","arguments","undefined","get","getProblems","parentPath","currentPath","kind","name","members","memberProblems","Array","isArray","memberType","propertySegment","memberPath","path","_problems","arrify","val","getObjectProblems","getImageProblems","getFileProblems","getArrayProblems","getReferenceProblems","to","getBlockAnnotationProblems","getBlockMemberProblems","getBlockProblems","getDefaultProblems","getDupes","array","selector","v","dupes","reduce","acc","item","key","push","Boolean","NOOP_VISITOR","typeDef","TYPE_TYPE","FUTURE_RESERVED","traverseSchema","coreTypes","visitor","coreTypesRegistry","create","registry","coreTypeNames","reservedTypeNames","typeNames","forEach","coreType","i","getType","typeName","duplicateNames","uniq","isDuplicate","includes","getTypeNames","isReserved","visitType","isRoot","index","visit","coreTypeDef","assign","res","has","getTypes","toJSON","jsonType","t","traverseSanitySchema","schemaTypes","REACT_SYM_RE","isComponentLike","value","$$typeof","test","String","validateComponent","components","warnings","input","inspect","field","preview","VALID_FIELD_RE","CONVENTIONAL_FIELD_RE","validateFieldName","startsWith","validateField","_visitorContext","isPlainObject","getDuplicateFields","fieldName","validateFields","fields","options","allowEmpty","fieldsIsArray","fieldsWithNames","standaloneBlockFields","fmtFields","join","validatePreview","prepare","select","errs","object","visitorContext","previewErrors","err","initialValue","fieldTypeDef","fieldType","documentVisitor","typeDefinition","initialValues","hasInitialValue","normalizeToProp","reference","isValidTo","normalizedTo","getOptionErrors","filterParams","isPrimitiveTypeName","isAssignable","quote","n","pluralize","arr","suf","format","_a","_b","_c","ofIsArray","of","invalid","def","idx","hasObjectTypesWithoutName","hasBlockType","ofType","primitiveTypes","objectTypes","partition","isMixedArray","primitiveTypeNames","objectTypeNames","humanizeList","list","isArrayOfPrimitives","option","isDeclared","primitiveType","formattedTypeList","conjunction","optionTypeName","_type","validObjectType","layout","slug","slugifyFn","slugify","file","invalidFieldNames","metadata","autoMeta","image","superfluousMeta","meta","fieldsWithInvalidName","isJSONTypeOf","parentType","getTypeOf","thing","str","allowedKeys","allowedMarkKeys","allowedStyleKeys","allowedDecoratorKeys","allowedListKeys","supportedBuiltInObjectTypes","validateBlockType","styles","lists","marks","disallowedKeys","validateMarks","validateStyles","validateLists","validateMembers","omit","decorators","annotations","disallowedMarkKeys","dec","blockEditor","icon","component","render","validateDecorators","validateAnnotations","title","style","decorator","annotation","targetType","member","nonObjectCoreTypes","coreName","validateNonObjectFieldsProp","validateTypeName","possibleTypeNames","humanize","isValid","suggestions","possibleTypeName","leven","_ref","distance","_ref2","_","suggestion","validateDeprecatedProperties","inputComponent","diffComponent","editModal","isHighlighted","common","rootType","hasName","looksLikeEsmModule","VALID_DATASET","isValidDatasetName","toLowerCase","crossDatasetReference","crossDatasetTypeDef","dataset","datasetValidation","studioUrl","typeVisitors","block","document","getNoopVisitor","schemaDef","combine","_len","visitors","_key","schemaType","result","validateSchema","typeVisitor","ACTIONS_FLAG","DEFAULT_ACTIONS","VALID_ACTIONS","readActions","validateActions","actions","difference","resolveEnabledActions","isActionEnabled","action"],"mappings":"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"}