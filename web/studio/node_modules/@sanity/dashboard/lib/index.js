'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var ui = require('@sanity/ui');
var styled = require('styled-components');
var sanity = require('sanity');
var rxjs = require('rxjs');
var operators = require('rxjs/operators');
var icons = require('@sanity/icons');
var imageUrlBuilder = require('@sanity/image-url');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var styled__default = /*#__PURE__*/_interopDefaultCompat(styled);
var imageUrlBuilder__default = /*#__PURE__*/_interopDefaultCompat(imageUrlBuilder);
var __freeze$3 = Object.freeze;
var __defProp$3 = Object.defineProperty;
var __template$3 = (cooked, raw) => __freeze$3(__defProp$3(cooked, "raw", {
  value: __freeze$3(raw || cooked.slice())
}));
var _a$3, _b$2, _c$2, _d$2;
const Root$2 = styled__default.default(ui.Card)(_a$3 || (_a$3 = __template$3(["\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  height: 100%;\n  box-sizing: border-box;\n  position: relative;\n"])));
const Header = styled__default.default(ui.Card)(_b$2 || (_b$2 = __template$3(["\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n"])));
const Footer = styled__default.default(ui.Card)(_c$2 || (_c$2 = __template$3(["\n  position: sticky;\n  overflow: hidden;\n  bottom: 0;\n  z-index: 2;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n  margin-top: auto;\n"])));
const Content = styled__default.default(ui.Box)(_d$2 || (_d$2 = __template$3(["\n  position: relative;\n  z-index: 1;\n  height: stretch;\n  min-height: 21.5em;\n\n  @media (min-width: ", "px) {\n    overflow-y: auto;\n    outline: none;\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return theme.sanity.media[0];
});
const DashboardWidgetContainer = react.forwardRef(function DashboardWidgetContainer2(props, ref) {
  const {
    header,
    children,
    footer
  } = props;
  return /* @__PURE__ */jsxRuntime.jsxs(Root$2, {
    radius: 3,
    display: "flex",
    ref,
    children: [header && /* @__PURE__ */jsxRuntime.jsx(Header, {
      borderBottom: true,
      paddingX: 3,
      paddingY: 4,
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Heading, {
        size: 1,
        textOverflow: "ellipsis",
        children: header
      })
    }), children && /* @__PURE__ */jsxRuntime.jsx(Content, {
      children
    }), footer && /* @__PURE__ */jsxRuntime.jsx(Footer, {
      borderTop: true,
      children: footer
    })]
  });
});
function useVersionedClient() {
  return sanity.useClient({
    apiVersion: "1"
  });
}
const DashboardContext = react.createContext({
  widgets: []
});
function useDashboardConfig() {
  return react.useContext(DashboardContext);
}
function WidgetContainer(props) {
  const config = useDashboardConfig();
  const layout = react.useMemo(() => ({
    ...(props.layout || {}),
    ...(config.layout || {})
  }), [props.layout, config.layout]);
  return /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
    shadow: 1,
    "data-width": layout.width,
    "data-height": layout.height,
    children: react.createElement(props.component, {})
  });
}
function isUrl(url) {
  return url && /^https?:\/\//.test("".concat(url));
}
function getGraphQlUrl(projectId, dataset) {
  return "https://".concat(projectId, ".api.sanity.io/v1/graphql/").concat(dataset, "/default");
}
function getGroqUrl(projectId, dataset) {
  return "https://".concat(projectId, ".api.sanity.io/v1/groq/").concat(dataset);
}
function getManageUrl(projectId) {
  return "https://manage.sanity.io/projects/".concat(projectId);
}
const NO_EXPERIMENTAL = [];
const NO_DATA = [];
function ProjectInfo(props) {
  const {
    __experimental_before = NO_EXPERIMENTAL,
    data = NO_DATA
  } = props;
  const [studioHost, setStudioHost] = react.useState();
  const [graphqlApi, setGraphQlApi] = react.useState();
  const versionedClient = useVersionedClient();
  const {
    projectId = "unknown",
    dataset = "unknown"
  } = versionedClient.config();
  react.useEffect(() => {
    const subscriptions = [];
    subscriptions.push(versionedClient.observable.request({
      uri: "/projects/".concat(projectId)
    }).subscribe({
      next: result => {
        const {
          studioHost: host
        } = result;
        setStudioHost(host ? "https://".concat(host, ".sanity.studio") : void 0);
      },
      error: error => {
        console.error("Error while looking for studioHost", error);
        setStudioHost({
          error: "Something went wrong while looking up studioHost. See console."
        });
      }
    }));
    subscriptions.push(versionedClient.observable.request({
      method: "HEAD",
      uri: "/graphql/".concat(dataset, "/default")
    }).subscribe({
      next: () => setGraphQlApi(getGraphQlUrl(projectId, dataset)),
      error: error => {
        if (error.statusCode === 404) {
          setGraphQlApi(void 0);
        } else {
          console.error("Error while looking for graphqlApi", error);
          setGraphQlApi({
            error: "Something went wrong while looking up graphqlApi. See console."
          });
        }
      }
    }));
    return () => {
      subscriptions.forEach(s => s.unsubscribe());
    };
  }, [dataset, projectId, versionedClient, setGraphQlApi, setStudioHost]);
  const assembleTableRows = react.useMemo(() => {
    var _a;
    let result = [{
      title: "Sanity project",
      rows: [{
        title: "Project ID",
        value: projectId
      }, {
        title: "Dataset",
        value: dataset
      }]
    }];
    const apps = [studioHost ? {
      title: "Studio",
      value: studioHost
    } : null, ...data.filter(item => item.category === "apps")].filter(a => !!a);
    if (apps.length > 0) {
      result = result.concat([{
        title: "Apps",
        rows: apps
      }]);
    }
    result = result.concat([{
      title: "APIs",
      rows: [{
        title: "GROQ",
        value: getGroqUrl(projectId, dataset)
      }, {
        title: "GraphQL",
        value: (_a = typeof graphqlApi === "object" ? "Error" : graphqlApi) != null ? _a : "Not deployed"
      }]
    }], data.filter(item => item.category === "apis"));
    const otherStuff = {};
    data.forEach(item => {
      if (item.category && item.category !== "apps" && item.category !== "apis") {
        if (!otherStuff[item.category]) {
          otherStuff[item.category] = [];
        }
        otherStuff[item.category].push(item);
      }
    });
    Object.keys(otherStuff).forEach(category => {
      result.push({
        title: category,
        rows: otherStuff[category]
      });
    });
    return result;
  }, [graphqlApi, studioHost, projectId, dataset, data]);
  return /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [__experimental_before.map((widgetConfig, idx) => /* @__PURE__ */jsxRuntime.jsx(WidgetContainer, {
      ...widgetConfig
    }, idx)), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      height: "fill",
      marginTop: (__experimental_before == null ? void 0 : __experimental_before.length) > 0 ? 4 : 0,
      children: /* @__PURE__ */jsxRuntime.jsx(DashboardWidgetContainer, {
        footer: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
          style: {
            width: "100%"
          },
          paddingX: 2,
          paddingY: 4,
          mode: "bleed",
          tone: "primary",
          text: "Manage project",
          as: "a",
          href: getManageUrl(projectId)
        }),
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
          paddingY: 4,
          radius: 2,
          role: "table",
          "aria-label": "Project info",
          "aria-describedby": "project_info_table",
          children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
            space: 4,
            children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              paddingX: 3,
              as: "header",
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Heading, {
                size: 1,
                as: "h2",
                id: "project_info_table",
                children: "Project info"
              })
            }), assembleTableRows.map(item => {
              if (!item || !item.rows) {
                return null;
              }
              return /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
                space: 3,
                children: [/* @__PURE__ */jsxRuntime.jsx(ui.Card, {
                  borderBottom: true,
                  padding: 3,
                  children: /* @__PURE__ */jsxRuntime.jsx(ui.Label, {
                    size: 0,
                    muted: true,
                    role: "columnheader",
                    children: item.title
                  })
                }), /* @__PURE__ */jsxRuntime.jsx(ui.Stack, {
                  space: 4,
                  paddingX: 3,
                  role: "rowgroup",
                  children: item.rows.map(row => {
                    var _a;
                    return /* @__PURE__ */jsxRuntime.jsxs(ui.Grid, {
                      columns: 2,
                      role: "row",
                      children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                        weight: "medium",
                        role: "rowheader",
                        children: row.title
                      }), typeof row.value === "object" && /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                        size: 1,
                        children: (_a = row.value) == null ? void 0 : _a.error
                      }), typeof row.value === "string" && /* @__PURE__ */jsxRuntime.jsx(jsxRuntime.Fragment, {
                        children: isUrl(row.value) ? /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                          size: 1,
                          role: "cell",
                          style: {
                            wordBreak: "break-word"
                          },
                          children: /* @__PURE__ */jsxRuntime.jsx("a", {
                            href: row.value,
                            children: row.value
                          })
                        }) : /* @__PURE__ */jsxRuntime.jsx(ui.Code, {
                          size: 1,
                          role: "cell",
                          style: {
                            wordBreak: "break-word"
                          },
                          children: row.value
                        })
                      })]
                    }, row.title);
                  })
                })]
              }, item.title);
            })]
          })
        })
      })
    })]
  });
}
function projectInfoWidget(config) {
  var _a;
  return {
    name: "project-info",
    component: ProjectInfo,
    layout: (_a = config == null ? void 0 : config.layout) != null ? _a : {
      width: "medium"
    }
  };
}
var __freeze$2 = Object.freeze;
var __defProp$2 = Object.defineProperty;
var __template$2 = (cooked, raw) => __freeze$2(__defProp$2(cooked, "raw", {
  value: __freeze$2(raw || cooked.slice())
}));
var _a$2;
const AvatarWrapper = styled__default.default(ui.Card)(_a$2 || (_a$2 = __template$2(["\n  box-sizing: border-box;\n  border-radius: 50%;\n  border-color: transparent;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    width: 100%;\n    height: auto;\n  }\n"])));
function getInviteUrl(projectId) {
  return "https://manage.sanity.io/projects/".concat(projectId, "/team/invite");
}
function ProjectUsers() {
  const [project, setProject] = react.useState();
  const [users, setUsers] = react.useState();
  const [error, setError] = react.useState();
  const userStore = sanity.useUserStore();
  const versionedClient = useVersionedClient();
  const fetchData = react.useCallback(() => {
    const {
      projectId
    } = versionedClient.config();
    const subscription = versionedClient.observable.request({
      uri: "/projects/".concat(projectId)
    }).pipe(operators.switchMap(_project => rxjs.from(userStore.getUsers(_project.members.map(mem => mem.id))).pipe(operators.map(_users => ({
      project: _project,
      users: _users
    }))))).subscribe({
      next: _ref2 => {
        let {
          users: _users,
          project: _project
        } = _ref2;
        setProject(_project);
        setUsers((Array.isArray(_users) ? _users : [_users]).sort((userA, userB) => sortUsersByRobotStatus(userA, userB, _project)));
      },
      error: e => setError(e)
    });
    return () => subscription.unsubscribe();
  }, [userStore, versionedClient]);
  react.useEffect(() => fetchData(), [fetchData]);
  const handleRetryFetch = react.useCallback(() => fetchData(), [fetchData]);
  const isLoading = !users || !project;
  if (error) {
    return /* @__PURE__ */jsxRuntime.jsx(DashboardWidgetContainer, {
      header: "Project users",
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        padding: 4,
        children: /* @__PURE__ */jsxRuntime.jsxs(ui.Text, {
          children: ["Something went wrong while fetching data. You could", " ", /* @__PURE__ */jsxRuntime.jsx("a", {
            onClick: handleRetryFetch,
            title: "Retry users fetch",
            style: {
              cursor: "pointer"
            },
            children: "retry"
          }), "..?"]
        })
      })
    });
  }
  return /* @__PURE__ */jsxRuntime.jsxs(DashboardWidgetContainer, {
    header: "Project users",
    footer: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
      style: {
        width: "100%"
      },
      paddingX: 2,
      paddingY: 4,
      mode: "bleed",
      tone: "primary",
      text: "Invite members",
      as: "a",
      loading: isLoading,
      href: isLoading ? void 0 : getInviteUrl(project.id)
    }),
    children: [isLoading && /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      paddingY: 5,
      paddingX: 2,
      children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
        space: 4,
        children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
          align: "center",
          muted: true,
          size: 1,
          children: /* @__PURE__ */jsxRuntime.jsx(ui.Spinner, {})
        }), /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
          align: "center",
          size: 1,
          muted: true,
          children: "Loading items..."
        })]
      })
    }), !isLoading && /* @__PURE__ */jsxRuntime.jsx(ui.Stack, {
      space: 3,
      padding: 3,
      children: users == null ? void 0 : users.map(user => {
        const membership = project.members.find(member => member.id === user.id);
        const media = (membership == null ? void 0 : membership.isRobot) ? /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
          size: 3,
          children: /* @__PURE__ */jsxRuntime.jsx(icons.RobotIcon, {})
        }) : /* @__PURE__ */jsxRuntime.jsx(AvatarWrapper, {
          tone: "transparent",
          children: (user == null ? void 0 : user.imageUrl) && /* @__PURE__ */jsxRuntime.jsx("img", {
            src: user.imageUrl,
            alt: user == null ? void 0 : user.displayName
          })
        });
        return /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
          children: /* @__PURE__ */jsxRuntime.jsx(sanity.DefaultPreview, {
            title: user.displayName,
            subtitle: membership == null ? void 0 : membership.role,
            media
          })
        }, user.id);
      })
    })]
  });
}
function sortUsersByRobotStatus(userA, userB, project) {
  const {
    members
  } = project;
  const membershipA = members.find(member => member.id === (userA == null ? void 0 : userA.id));
  const membershipB = members.find(member => member.id === (userB == null ? void 0 : userB.id));
  if (membershipA == null ? void 0 : membershipA.isRobot) {
    return 1;
  }
  if (membershipB == null ? void 0 : membershipB.isRobot) {
    return -1;
  }
  return 0;
}
function projectUsersWidget(config) {
  return {
    name: "project-info",
    component: ProjectUsers,
    layout: config == null ? void 0 : config.layout
  };
}
var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", {
  value: __freeze$1(raw || cooked.slice())
}));
var _a$1, _b$1, _c$1, _d$1;
const PlayIconBox = styled__default.default(ui.Box)(_a$1 || (_a$1 = __template$1(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 2.75em;\n    height: 2.75em;\n    border-radius: 50%;\n    background: ", ";\n    opacity: 0.75;\n  }\n"])), _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.sanity.color.card.enabled.bg;
});
const Root$1 = styled__default.default(ui.Flex)(_b$1 || (_b$1 = __template$1(["\n  &:hover {\n    ", " {\n      &:before {\n        opacity: 1;\n      }\n    }\n  }\n"])), PlayIconBox);
const PosterCard = styled__default.default(ui.Card)(_c$1 || (_c$1 = __template$1(["\n  width: 100%;\n  padding-bottom: calc(9 / 16 * 100%);\n  position: relative;\n"])));
const Poster = styled__default.default.img(_d$1 || (_d$1 = __template$1(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n  display: block;\n\n  &:not([src]) {\n    display: none;\n  }\n"])));
function Tutorial(props) {
  const {
    title,
    posterURL,
    showPlayIcon,
    href,
    presenterName,
    presenterSubtitle
  } = props;
  return /* @__PURE__ */jsxRuntime.jsx(Root$1, {
    flex: 1,
    children: /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
      sizing: "border",
      flex: 1,
      padding: 2,
      radius: 2,
      as: "a",
      href,
      target: "_blank",
      rel: "noopener noreferrer",
      style: {
        position: "relative"
      },
      children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
        direction: "column",
        style: {
          height: "100%"
        },
        children: [posterURL && /* @__PURE__ */jsxRuntime.jsxs(PosterCard, {
          marginBottom: 1,
          children: [/* @__PURE__ */jsxRuntime.jsx(Poster, {
            src: posterURL
          }), showPlayIcon && /* @__PURE__ */jsxRuntime.jsx(PlayIconBox, {
            display: "flex",
            children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
              align: "center",
              children: /* @__PURE__ */jsxRuntime.jsx(icons.PlayIcon, {})
            })
          })]
        }), /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
          direction: "column",
          justify: "space-between",
          paddingY: 2,
          flex: 1,
          children: [/* @__PURE__ */jsxRuntime.jsx(ui.Heading, {
            as: "h3",
            size: 1,
            children: title
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
            marginTop: 4,
            children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
              space: 2,
              flex: 1,
              children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                size: 1,
                children: presenterName
              }), /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                size: 0,
                style: {
                  opacity: 0.7
                },
                children: presenterSubtitle
              })]
            })
          })]
        })]
      })
    })
  });
}
const tutorialsProjectConfig = {
  projectId: "3do82whm",
  dataset: "next"
};
function useDataAdapter() {
  const versionedClient = useVersionedClient();
  return react.useMemo(() => ({
    getFeed: templateRepoId => {
      const uri = templateRepoId ? "/addons/dashboard?templateRepoId=".concat(templateRepoId) : "/addons/dashboard";
      return versionedClient.observable.request({
        uri,
        withCredentials: false
      });
    },
    urlBuilder: imageUrlBuilder__default.default(tutorialsProjectConfig)
  }), [versionedClient]);
}
function createUrl(slug, type) {
  if (type === "tutorial") {
    return "https://www.sanity.io/docs/tutorials/".concat(slug.current);
  } else if (type === "guide") {
    return "https://www.sanity.io/docs/guides/".concat(slug.current);
  }
  return false;
}
function SanityTutorials(props) {
  const {
    templateRepoId
  } = props;
  const [feedItems, setFeedItems] = react.useState([]);
  const {
    getFeed,
    urlBuilder
  } = useDataAdapter();
  react.useEffect(() => {
    const subscription = getFeed(templateRepoId).subscribe(response => {
      setFeedItems(response.items);
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [setFeedItems, getFeed, templateRepoId]);
  const title = "Learn about Sanity";
  return /* @__PURE__ */jsxRuntime.jsx(DashboardWidgetContainer, {
    header: title,
    children: /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
      as: "ul",
      overflow: "auto",
      align: "stretch",
      paddingY: 2,
      children: feedItems == null ? void 0 : feedItems.map((feedItem, index) => {
        var _a;
        if (!feedItem.title || !feedItem.guideOrTutorial && !feedItem.externalLink) {
          return null;
        }
        const presenter = feedItem.presenter || ((_a = feedItem.guideOrTutorial) == null ? void 0 : _a.presenter) || {};
        const subtitle = feedItem.category;
        const {
          guideOrTutorial = {}
        } = feedItem;
        const href = (guideOrTutorial.slug ? createUrl(guideOrTutorial.slug, guideOrTutorial._type) : feedItem.externalLink) || feedItem.externalLink;
        return /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
          as: "li",
          paddingRight: index < (feedItems == null ? void 0 : feedItems.length) - 1 ? 1 : 3,
          paddingLeft: index === 0 ? 3 : 0,
          align: "stretch",
          style: {
            minWidth: 272,
            width: "30%"
          },
          children: /* @__PURE__ */jsxRuntime.jsx(Tutorial, {
            title: feedItem.title,
            href: href != null ? href : "",
            presenterName: presenter.name,
            presenterSubtitle: subtitle,
            showPlayIcon: feedItem.hasVideo,
            posterURL: feedItem.poster ? urlBuilder.image(feedItem.poster).height(360).url() : void 0
          })
        }, feedItem._id);
      })
    })
  });
}
function sanityTutorialsWidget(config) {
  var _a;
  return {
    name: "sanity-tutorials",
    component: SanityTutorials,
    layout: (_a = config == null ? void 0 : config.layout) != null ? _a : {
      width: "full"
    }
  };
}
function DashboardLayout(props) {
  return /* @__PURE__ */jsxRuntime.jsx(ui.Container, {
    width: 4,
    padding: 4,
    sizing: "border",
    style: {
      height: "100%",
      overflowY: "auto"
    },
    children: props.children
  });
}
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
const media = {
  small: function () {
    return styled.css(_a || (_a = __template(["\n      @media (min-width: ", "px) {\n        ", "\n      }\n    "])), _ref4 => {
      let {
        theme
      } = _ref4;
      return theme.sanity.media[0];
    }, styled.css(...arguments));
  },
  medium: function () {
    return styled.css(_b || (_b = __template(["\n      @media (min-width: ", "px) {\n        ", "\n      }\n    "])), _ref5 => {
      let {
        theme
      } = _ref5;
      return theme.sanity.media[2];
    }, styled.css(...arguments));
  }
};
const Root = styled__default.default(ui.Grid)(_k || (_k = __template(["\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n\n  & > div {\n    overflow: hidden;\n  }\n\n  & > div[data-width='medium'] {\n    ", "\n  }\n\n  & > div[data-width='large'] {\n    ", "\n\n    ", "\n  }\n\n  & > div[data-width='full'] {\n    ", "\n  }\n\n  & > div[data-height='medium'] {\n    ", "\n  }\n\n  & > div[data-height='large'] {\n    ", "\n\n    ", "\n  }\n\n  & > div[data-height='full'] {\n    ", "\n  }\n"])), media.small(_c || (_c = __template(["\n      grid-column: span 2;\n    "]))), media.small(_d || (_d = __template(["\n      grid-column: span 2;\n    "]))), media.medium(_e || (_e = __template(["\n      grid-column: span 3;\n    "]))), media.small(_f || (_f = __template(["\n      grid-column: 1 / -1;\n    "]))), media.small(_g || (_g = __template(["\n      grid-row: span 2;\n    "]))), media.small(_h || (_h = __template(["\n      grid-row: span 2;\n    "]))), media.medium(_i || (_i = __template(["\n      grid-row: span 3;\n    "]))), media.medium(_j || (_j = __template(["\n      grid-row: 1 / -1;\n    "]))));
const NO_WIDGETS = [];
const NO_LAYOUT = {};
function WidgetGroup(props) {
  const {
    config: {
      layout = NO_LAYOUT,
      widgets = NO_WIDGETS
    }
  } = props;
  return /* @__PURE__ */jsxRuntime.jsxs(Root, {
    autoFlow: "row dense",
    "data-width": layout.width || "auto",
    "data-height": layout.height || "auto",
    gap: 4,
    children: [widgets.length ? null : /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
      padding: 4,
      shadow: 1,
      tone: "primary",
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
        align: "center",
        children: "Add some widgets to populate this space."
      })
    }), widgets.map((widgetConfig, index) => {
      if (widgetConfig.type === "__experimental_group") {
        return /* @__PURE__ */jsxRuntime.jsx(WidgetGroup, {
          config: widgetConfig
        }, index);
      }
      if (widgetConfig.component) {
        return /* @__PURE__ */jsxRuntime.jsx(WidgetContainer, {
          ...widgetConfig
        }, index);
      }
      return /* @__PURE__ */jsxRuntime.jsxs(ui.Box, {
        children: [widgetConfig.name, " is missing widget component"]
      }, index);
    })]
  });
}
function Dashboard(_ref6) {
  let {
    config
  } = _ref6;
  if (!config) {
    return null;
  }
  return /* @__PURE__ */jsxRuntime.jsx(DashboardContext.Provider, {
    value: config,
    children: /* @__PURE__ */jsxRuntime.jsx(DashboardLayout, {
      children: /* @__PURE__ */jsxRuntime.jsx(WidgetGroup, {
        config
      })
    })
  });
}
const strokeStyle = {
  stroke: "currentColor",
  strokeWidth: 1.2
};
const DashboardIcon = () => /* @__PURE__ */jsxRuntime.jsxs("svg", {
  "data-sanity-icon": true,
  viewBox: "0 0 25 25",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  preserveAspectRatio: "xMidYMid",
  width: "1em",
  height: "1em",
  children: [/* @__PURE__ */jsxRuntime.jsx("path", {
    d: "M19.5 19.5H5.5V5.5H19.5V19.5Z",
    style: strokeStyle
  }), /* @__PURE__ */jsxRuntime.jsx("path", {
    d: "M5.5 12.5H19.5",
    style: strokeStyle
  }), /* @__PURE__ */jsxRuntime.jsx("path", {
    d: "M14.5 19.5V12.5M10.5 12.5V5.5",
    style: strokeStyle
  })]
});
const dashboardTool = sanity.definePlugin(function () {
  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _a, _b, _c, _d, _e;
  const pluginConfig = {
    layout: (_a = config.defaultLayout) != null ? _a : {},
    widgets: (_b = config.widgets) != null ? _b : []
  };
  const title = (_c = config.title) != null ? _c : "Dashboard";
  const name = (_d = config.name) != null ? _d : "dashboard";
  const icon = (_e = config.icon) != null ? _e : DashboardIcon;
  return {
    name: "dashboard",
    tools: (prev, context) => {
      return [...prev, {
        title,
        name,
        icon,
        component: () => /* @__PURE__ */jsxRuntime.jsx(Dashboard, {
          config: pluginConfig
        })
      }];
    }
  };
});
exports.DashboardWidgetContainer = DashboardWidgetContainer;
exports.dashboardTool = dashboardTool;
exports.projectInfoWidget = projectInfoWidget;
exports.projectUsersWidget = projectUsersWidget;
exports.sanityTutorialsWidget = sanityTutorialsWidget;
//# sourceMappingURL=index.js.map
