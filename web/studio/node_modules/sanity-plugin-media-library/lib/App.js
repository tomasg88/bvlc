"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
var acceptedFileTypes_1 = require("./shared/acceptedFileTypes");
var AssetModal_1 = require("./components/AssetModal");
var config_1 = require("./config");
var DeleteModal_1 = require("./components/DeleteModal");
var ErrorNotifications_1 = require("./components/ErrorNotifications");
var MediaLibrary_1 = require("./components/MediaLibrary");
var Sidebar_1 = require("./components/Sidebar");
var UploadDropArea_1 = require("./components/UploadDropArea");
var client_1 = __importDefault(require("part:@sanity/base/client"));
var react_1 = __importStar(require("react"));
var styled_components_1 = __importDefault(require("styled-components"));
var StyledContainer = styled_components_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  background-color: ", ";\n  color: ", ";\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: border-box;\n  }\n"], ["\n  background-color: ", ";\n  color: ", ";\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: border-box;\n  }\n"])), function (_a) {
    var theme = _a.theme;
    return theme.appBackgroundColor;
}, function (_a) {
    var theme = _a.theme;
    return theme.appTextColor;
});
var StyledSidebarGridContainer = styled_components_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  display: flex;\n  height: 100%;\n"], ["\n  display: flex;\n  height: 100%;\n"])));
var App = function (_a) {
    var onClose = _a.onClose, onSelect = _a.onSelect, selectedAssets = _a.selectedAssets, tool = _a.tool;
    var _b = react_1.useState([]), activeExtensions = _b[0], setActiveExtensions = _b[1];
    var _c = react_1.useState([]), activeTags = _c[0], setActiveTags = _c[1];
    var _d = react_1.useState([]), assets = _d[0], setAssets = _d[1];
    var _e = react_1.useState(null), assetsToDelete = _e[0], setAssetsToDelete = _e[1];
    var _f = react_1.useState(null), assetToEdit = _f[0], setAssetToEdit = _f[1];
    var _g = react_1.useState([]), errors = _g[0], setErrors = _g[1];
    var _h = react_1.useState(assets), filteredAssets = _h[0], setFilteredAssets = _h[1];
    var _j = react_1.useState(false), isDraggingMediaItem = _j[0], setIsDraggingMediaItem = _j[1];
    var _k = react_1.useState(true), loading = _k[0], setLoading = _k[1];
    var _l = react_1.useState([]), localSelectedAssets = _l[0], setLocalSelectedAssets = _l[1];
    var _m = react_1.useState(''), searchQuery = _m[0], setSearchQuery = _m[1];
    var _o = react_1.useState('date'), sort = _o[0], setSort = _o[1];
    var types = tool ? '"sanity.imageAsset", "sanity.fileAsset"' : '"sanity.imageAsset"';
    var includedFields = __spreadArrays([
        '_createdAt',
        '_id',
        '_type',
        'alt',
        'extension',
        'metadata',
        'originalFilename',
        'title',
        'size',
        'tags',
        'url',
        '"usedBy": *[references(^._id)] { _id, _type }'
    ], config_1.customFields.map(function (_a) {
        var name = _a.name;
        return name;
    }));
    var query = "*[_type in [" + types + "]] { " + includedFields.join(',') + " }";
    react_1.useEffect(function () {
        var newFilteredAssets = __spreadArrays(assets);
        if (searchQuery && searchQuery !== '') {
            newFilteredAssets = newFilteredAssets.filter(function (_a) {
                var _b = _a.alt, alt = _b === void 0 ? '' : _b, _c = _a.originalFilename, originalFilename = _c === void 0 ? '' : _c, _d = _a.title, title = _d === void 0 ? '' : _d, _e = _a.tags, tags = _e === void 0 ? [] : _e;
                return [originalFilename, title, alt, tags.join('')].some(function (value) { return value.toUpperCase().indexOf(searchQuery.toUpperCase()) > -1; });
            });
        }
        if (activeExtensions.length > 0) {
            newFilteredAssets = newFilteredAssets.filter(function (_a) {
                var extension = _a.extension;
                return activeExtensions.indexOf(extension) > -1;
            });
        }
        if (activeTags.length > 0) {
            newFilteredAssets = newFilteredAssets.filter(function (_a) {
                var tags = _a.tags, usedBy = _a.usedBy;
                return (tags === null || tags === void 0 ? void 0 : tags.some(function (tag) { return activeTags.indexOf(tag) > -1; })) ||
                    (activeTags.indexOf('used') > -1 && usedBy.length) ||
                    (activeTags.indexOf('unused') > -1 && !usedBy.length);
            });
        }
        if (sort === 'date') {
            newFilteredAssets.sort(function (a, b) { return (a._createdAt > b._createdAt ? -1 : 1); });
        }
        if (sort === 'az') {
            newFilteredAssets.sort(function (a, b) { return (a.title || a.originalFilename).localeCompare(b.title || b.originalFilename); });
        }
        if (sort === 'za') {
            newFilteredAssets.sort(function (a, b) { return (b.title || b.originalFilename).localeCompare(a.title || a.originalFilename); });
        }
        setFilteredAssets(newFilteredAssets);
        // Update selected assets so it does not include assets that are no longer visible
        var newAssetIds = newFilteredAssets.map(function (_a) {
            var _id = _a._id;
            return _id;
        });
        var newAssetsToSelect = localSelectedAssets.filter(function (_a) {
            var _id = _a._id;
            return newAssetIds.indexOf(_id) > -1;
        });
        setLocalSelectedAssets(newAssetsToSelect);
    }, [assets, activeExtensions, activeTags, sort, searchQuery]);
    react_1.useEffect(function () {
        if (assets.length === 0 || localSelectedAssets.length > 0 || (selectedAssets === null || selectedAssets === void 0 ? void 0 : selectedAssets.length) === 0) {
            return;
        }
        var selectedAssetsIds = (selectedAssets || []).map(function (_a) {
            var _id = _a._id;
            return _id;
        });
        var assetsToSelect = __spreadArrays(assets).filter(function (_a) {
            var _id = _a._id;
            return selectedAssetsIds.indexOf(_id) > -1;
        });
        setLocalSelectedAssets(assetsToSelect);
    }, [assets, selectedAssets]);
    react_1.useEffect(subscribeToAssetChanges, []);
    react_1.useEffect(function () {
        fetchAssets();
    }, []);
    function fetchAssets() {
        return __awaiter(this, void 0, void 0, function () {
            var newAssets, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        setLoading(true);
                        return [4 /*yield*/, client_1.default.fetch(query, {})];
                    case 1:
                        newAssets = _a.sent();
                        setAssets(newAssets);
                        return [3 /*break*/, 4];
                    case 2:
                        e_1 = _a.sent();
                        handleError(e_1);
                        return [3 /*break*/, 4];
                    case 3:
                        setLoading(false);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    function subscribeToAssetChanges() {
        var subscription = client_1.default
            .listen(query)
            .subscribe(function (_a) {
            var documentId = _a.documentId, result = _a.result, transition = _a.transition;
            if (transition === 'disappear') {
                return setAssets(function (assets) { return __spreadArrays(assets).filter(function (_a) {
                    var _id = _a._id;
                    return _id !== documentId;
                }); });
            }
            if (transition === 'update') {
                return setAssets(function (assets) { return __spreadArrays(assets).map(function (asset) { return (asset._id === documentId ? result : asset); }); });
            }
            if (transition === 'appear') {
                return setAssets(function (assets) { return __spreadArrays(assets, [result]); });
            }
        });
        return function () { return subscription.unsubscribe(); };
    }
    function onUpload(files) {
        return __awaiter(this, void 0, void 0, function () {
            var filesWithAllowedFileType_1, notAllowedFiles, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        setLoading(true);
                        filesWithAllowedFileType_1 = Array.from(files).filter(function (_a) {
                            var type = _a.type;
                            return acceptedFileTypes_1.acceptedFileTypes.some(function (fileType) { return new RegExp(fileType, 'gi').test(type); });
                        });
                        notAllowedFiles = Array.from(files).filter(function (file) { return filesWithAllowedFileType_1.indexOf(file) === -1; });
                        notAllowedFiles.forEach(function (_a) {
                            var name = _a.name;
                            handleError("File '" + name + "' will not be uploaded because its filetype is not supported.");
                        });
                        return [4 /*yield*/, Promise.all(filesWithAllowedFileType_1.map(function (file) {
                                return client_1.default.assets.upload(file.type.indexOf('image') > -1 ? 'image' : 'file', file);
                            }))];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        e_2 = _a.sent();
                        handleError(e_2);
                        return [3 /*break*/, 4];
                    case 3:
                        setLoading(false);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    function handleSelect(selectedAssets) {
        if (onSelect && selectedAssets.length > 0) {
            var assetsWithDocumentIds = selectedAssets.map(function (_a) {
                var _id = _a._id;
                return ({ kind: 'assetDocumentId', value: _id });
            });
            onSelect(assetsWithDocumentIds);
        }
    }
    function handleError(error) {
        console.error(error);
        setErrors(__spreadArrays(errors, [error.toString()]));
    }
    function onRemoveError(error) {
        var index = errors.indexOf(error);
        var newErrors = __spreadArrays(errors);
        newErrors.splice(index, 1);
        setErrors(newErrors);
    }
    var onExtensionClick = function (value) { return onFilterClick(value, activeExtensions, setActiveExtensions); };
    var onTagClick = function (value) { return onFilterClick(value, activeTags, setActiveTags); };
    function onClearFilters() {
        setActiveExtensions([]);
        setActiveTags([]);
    }
    function onTagDrop(tag) {
        return __awaiter(this, void 0, void 0, function () {
            var idsAndTags, idsWithNewTags, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        if (loading || localSelectedAssets.length === 0) {
                            return [2 /*return*/];
                        }
                        setLoading(true);
                        idsAndTags = localSelectedAssets.map(function (_a) {
                            var _id = _a._id, tags = _a.tags;
                            return ({ _id: _id, tags: tags });
                        });
                        idsWithNewTags = idsAndTags.map(function (_a) {
                            var _id = _a._id, tags = _a.tags;
                            return ({
                                _id: _id,
                                tags: (tags === null || tags === void 0 ? void 0 : tags.includes(tag)) ? tags : __spreadArrays((tags || []), [tag]),
                            });
                        });
                        return [4 /*yield*/, Promise.all(idsWithNewTags.map(function (_a) {
                                var _id = _a._id, tags = _a.tags;
                                return client_1.default.patch(_id).set({ tags: tags }).commit();
                            }))];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        e_3 = _a.sent();
                        handleError(e_3);
                        return [3 /*break*/, 4];
                    case 3:
                        setLoading(false);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    var extensions = getUniqueFiltersWithActive(assets, activeExtensions, function (acc, _a) {
        var extension = _a.extension;
        return __spreadArrays(acc, [extension]);
    });
    var tags = __spreadArrays([
        { isActive: activeTags.indexOf('used') > -1, value: 'used' },
        { isActive: activeTags.indexOf('unused') > -1, value: 'unused' }
    ], getUniqueFiltersWithActive(assets, activeTags, function (acc, _a) {
        var tags = _a.tags;
        return (tags ? __spreadArrays(acc, tags) : acc);
    }));
    return (react_1.default.createElement(StyledContainer, null,
        react_1.default.createElement(UploadDropArea_1.UploadDropArea, { disabled: isDraggingMediaItem, loading: loading, onUpload: onUpload },
            react_1.default.createElement(StyledSidebarGridContainer, null,
                react_1.default.createElement(Sidebar_1.Sidebar, { extensions: extensions, loading: loading, onClearFilters: onClearFilters, onExtensionClick: onExtensionClick, onTagClick: onTagClick, onTagDrop: onTagDrop, onUpload: onUpload, tags: tags }),
                react_1.default.createElement(MediaLibrary_1.MediaLibrary, { assets: filteredAssets, handleSelect: handleSelect, isAssetSource: !tool, loading: loading, onClose: onClose, onDelete: setAssetsToDelete, onEdit: setAssetToEdit, onSortChange: setSort, searchQuery: searchQuery, selectedAssets: localSelectedAssets, setIsDraggingMediaItem: setIsDraggingMediaItem, setSearchQuery: setSearchQuery, setSelectedAssets: setLocalSelectedAssets })),
            assetToEdit && (react_1.default.createElement(AssetModal_1.AssetModal, { asset: assetToEdit, handleError: handleError, loading: loading, onClose: function () { return setAssetToEdit(null); }, onSaveComplete: function () {
                    setAssetToEdit(null);
                }, setLoading: setLoading })),
            assetsToDelete && (react_1.default.createElement(DeleteModal_1.DeleteModal, { assets: assetsToDelete, handleError: handleError, loading: loading, onClose: function () { return setAssetsToDelete(null); }, onDeleteComplete: function () {
                    setAssetsToDelete(null);
                }, setLoading: setLoading })),
            errors && react_1.default.createElement(ErrorNotifications_1.ErrorNotifications, { errors: errors, removeError: onRemoveError }))));
};
exports.App = App;
function getUniqueFiltersWithActive(array, activeArray, reduceFn) {
    return Array.from(new Set(array.reduce(reduceFn, [])))
        .filter(Boolean)
        .sort()
        .map(function (value) { return ({ isActive: activeArray.indexOf(value) > -1, value: value }); });
}
function onFilterClick(value, stateValue, setStateValue) {
    var index = stateValue.indexOf(value);
    if (index === -1) {
        return setStateValue(__spreadArrays(stateValue, [value]));
    }
    var newValues = __spreadArrays(stateValue);
    newValues.splice(index, 1);
    setStateValue(newValues);
}
var templateObject_1, templateObject_2;
