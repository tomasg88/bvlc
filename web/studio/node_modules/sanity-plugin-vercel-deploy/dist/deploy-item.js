"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _axios = _interopRequireDefault(require("axios"));

var _reactPolling = _interopRequireDefault(require("react-polling"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _ui = require("@sanity/ui");

var _deployItem = _interopRequireDefault(require("./deploy-item.css"));

var deployItem = function deployItem(_ref) {
  var name = _ref.name,
      url = _ref.url,
      id = _ref.id,
      vercelProject = _ref.vercelProject,
      vercelToken = _ref.vercelToken,
      vercelTeam = _ref.vercelTeam,
      toggleSnackbar = _ref.toggleSnackbar;

  var _useState = (0, _react.useState)(vercelToken && vercelProject),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isUpdating = _useState2[0],
      setUpdating = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      isDeploying = _useState4[0],
      setDeploying = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      status = _useState6[0],
      setStatus = _useState6[1];

  var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      errorMsg = _useState8[0],
      setErrorMsg = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
      project = _useState10[0],
      setProject = _useState10[1];

  var statusRef = (0, _react.useRef)();
  statusRef.current = false;
  (0, _react.useEffect)(function () {
    var isSubscribed = true;

    if (vercelToken && vercelProject) {
      // get project ID from project name
      getProject(vercelProject).then(function (res) {
        if (res.data.id) {
          setProject(res.data.id);
        }
      })["catch"](function (err) {
        var _err$response, _err$response$data, _err$response$data$er;

        console.log(err);
        var errorMessage = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er = _err$response$data.error) === null || _err$response$data$er === void 0 ? void 0 : _err$response$data$er.message;
        setStatus('ERROR');
        statusRef.current = 'ERROR';

        if (errorMessage) {
          setErrorMsg(errorMessage);
        }

        setUpdating(false);
      }); // get latest project deployment

      if (project) {
        getLatestDeployment().then(function (res) {
          if (isSubscribed) {
            var deployment = res.data.deployments[0];
            setUpdating(false);
            setStatus(deployment.state);

            if (status !== 'READY' || status !== 'ERROR') {
              setDeploying(true);
            }
          }
        });
      }
    }

    return function () {
      return isSubscribed = false;
    };
  }, [project]);
  (0, _react.useEffect)(function () {
    var isSubscribed = true;

    if ((status === 'READY' || status === 'ERROR') && isSubscribed && vercelToken && vercelProject) {
      setDeploying(false);
    }

    return function () {
      return isSubscribed = false;
    };
  }, [status]);

  var getLatestDeployment = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var options;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = {
                method: 'GET',
                headers: {
                  'content-type': 'application/json',
                  Authorization: "Bearer ".concat(vercelToken)
                },
                url: "https://api.vercel.com/v5/now/deployments?projectId=".concat(project, "&limit=1").concat(vercelTeam !== null && vercelTeam !== void 0 && vercelTeam.id ? "&teamId=".concat(vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.id) : '')
              };
              return _context.abrupt("return", (0, _axios["default"])(options));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function getLatestDeployment() {
      return _ref2.apply(this, arguments);
    };
  }();

  var getProject = function getProject(id) {
    var options = {
      method: 'GET',
      headers: {
        'content-type': 'application/json',
        Authorization: "Bearer ".concat(vercelToken)
      },
      url: "https://api.vercel.com/v1/projects/".concat(id).concat(vercelTeam !== null && vercelTeam !== void 0 && vercelTeam.id ? "?teamId=".concat(vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.id) : '')
    };
    return (0, _axios["default"])(options);
  };

  var onDeploy = function onDeploy(name, url) {
    setDeploying(true);
    setStatus('INITIATED');
    toggleSnackbar(false);
    global.fetch(url, {
      method: 'POST'
    }).then(function (res) {
      toggleSnackbar(true, 'success', 'Success!', "Triggered Deployment: ".concat(name));
    })["catch"](function (err) {
      setDeploying(false);
      toggleSnackbar(true, 'error', 'Deploy Failed', "".concat(err));
      console.log(err);
    });
  };

  var onRemove = function onRemove(name, id) {
    setUpdating(true);

    _client["default"]["delete"](id).then(function (res) {
      setUpdating(false);
      toggleSnackbar(true, 'success', 'Success!', "Deleted Deployment: ".concat(name));
    });
  };

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: _deployItem["default"].hook
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: _deployItem["default"].hookDetails
  }, /*#__PURE__*/_react["default"].createElement("h4", {
    className: _deployItem["default"].hookTitle
  }, "".concat(name, " "), /*#__PURE__*/_react["default"].createElement(_ui.Badge, null, vercelProject), (vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.id) && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, ' ', /*#__PURE__*/_react["default"].createElement(_ui.Badge, {
    tone: "primary"
  }, vercelTeam === null || vercelTeam === void 0 ? void 0 : vercelTeam.name))), /*#__PURE__*/_react["default"].createElement("p", {
    className: _deployItem["default"].hookURL
  }, url)), /*#__PURE__*/_react["default"].createElement("div", {
    className: _deployItem["default"].hookActions
  }, vercelToken && vercelProject && /*#__PURE__*/_react["default"].createElement("div", {
    className: _deployItem["default"].hookStatus
  }, isDeploying ? /*#__PURE__*/_react["default"].createElement(_reactPolling["default"], {
    url: "custom",
    method: "GET",
    interval: 3000,
    retryCount: 5,
    onSuccess: function onSuccess(res) {
      var deployment = res.data.deployments[0]; // catch if initial deployment hasn't updated yet

      if (statusRef.current === false && deployment.state === 'READY') {
        return true;
      }

      setStatus(deployment.state);
      statusRef.current = deployment.state;
      return true;
    },
    onFailure: function onFailure(err) {
      return console.log(err);
    },
    promise: getLatestDeployment,
    render: function render(_ref3) {
      var isPolling = _ref3.isPolling;

      if (isPolling) {
        return /*#__PURE__*/_react["default"].createElement("div", null, status ? /*#__PURE__*/_react["default"].createElement("span", {
          className: _deployItem["default"].hookStatusIndicator,
          "data-indicator": status
        }, titleCase(status)) : /*#__PURE__*/_react["default"].createElement("span", {
          className: _deployItem["default"].hookStatusIndicator,
          "data-indicator": "LOADING"
        }, "Loading"));
      } else {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: _deployItem["default"].hookStatusIndicator,
          "data-indicator": "INACTIVE"
        }, "Status Inactive");
      }
    }
  }) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, status ? /*#__PURE__*/_react["default"].createElement("span", {
    className: _deployItem["default"].hookStatusIndicator,
    "data-indicator": status
  }, errorMsg ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, titleCase(status), /*#__PURE__*/_react["default"].createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react["default"].createElement(_ui.Box, {
      padding: 2
    }, /*#__PURE__*/_react["default"].createElement(_ui.Text, {
      muted: true,
      size: 1
    }, /*#__PURE__*/_react["default"].createElement("span", {
      style: {
        display: 'inline-block',
        textAlign: 'center'
      }
    }, errorMsg))),
    placement: "top"
  }, /*#__PURE__*/_react["default"].createElement("span", {
    className: _deployItem["default"].hookStatusError
  }, /*#__PURE__*/_react["default"].createElement(_ui.Badge, {
    mode: "outline",
    tone: "critical"
  }, "?")))) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, titleCase(status))) : /*#__PURE__*/_react["default"].createElement("span", {
    className: _deployItem["default"].hookStatusIndicator,
    "data-indicator": "LOADING"
  }, "Loading"))), /*#__PURE__*/_react["default"].createElement(_ui.Grid, {
    columns: [2],
    gap: [2]
  }, /*#__PURE__*/_react["default"].createElement(_ui.Button, {
    type: "button",
    tone: "positive",
    disabled: isDeploying || isUpdating,
    loading: isDeploying,
    onClick: function onClick() {
      return onDeploy(name, url);
    },
    text: "Deploy"
  }), ' ', /*#__PURE__*/_react["default"].createElement(_ui.Button, {
    type: "button",
    tone: "critical",
    disabled: isDeploying || isUpdating,
    onClick: function onClick() {
      return onRemove(name, id);
    },
    text: "Remove"
  })))));
};

var titleCase = function titleCase(str) {
  return str.toLowerCase().split(' ').map(function (word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
  }).join(' ');
};

var _default = deployItem;
exports["default"] = _default;