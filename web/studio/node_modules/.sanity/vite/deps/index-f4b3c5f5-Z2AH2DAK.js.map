{
  "version": 3,
  "sources": ["../../../sanity/src/desk/panes/list/ListPaneHeader.tsx", "../../../sanity/src/desk/panes/list/ListPaneContent.tsx", "../../../sanity/src/desk/panes/list/ListPane.tsx"],
  "sourcesContent": ["import {ArrowLeftIcon} from '@sanity/icons'\nimport {Button} from '@sanity/ui'\nimport React from 'react'\nimport {BackLink, PaneHeader, PaneHeaderActions, usePane} from '../../components'\nimport {PaneMenuItem, PaneMenuItemGroup} from '../../types'\nimport {useDeskTool} from '../../useDeskTool'\n\ninterface ListPaneHeaderProps {\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport const ListPaneHeader = ({index, menuItems, menuItemGroups, title}: ListPaneHeaderProps) => {\n  const {features} = useDeskTool()\n  const {collapsed, isLast} = usePane()\n  // Prevent focus if this is the last (non-collapsed) pane.\n  const tabIndex = isLast && !collapsed ? -1 : 0\n\n  return (\n    <PaneHeader\n      actions={<PaneHeaderActions menuItems={menuItems} menuItemGroups={menuItemGroups} />}\n      backButton={\n        features.backButton &&\n        index > 0 && <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" />\n      }\n      tabIndex={tabIndex}\n      title={title}\n    />\n  )\n}\n", "import React, {useCallback} from 'react'\nimport {Box} from '@sanity/ui'\nimport styled from 'styled-components'\nimport {PaneContent, PaneItem, usePaneLayout} from '../../components'\nimport {PaneListItem, PaneListItemDivider} from '../../types'\nimport {CommandList, CommandListItemContext, GeneralPreviewLayoutKey} from 'sanity'\n\ninterface ListPaneContentProps {\n  childItemId?: string\n  isActive?: boolean\n  items: (PaneListItem<unknown> | PaneListItemDivider)[] | undefined\n  layout?: GeneralPreviewLayoutKey\n  showIcons: boolean\n  title: string\n}\n\nconst Divider = styled.hr`\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n`\n\n/**\n * @internal\n */\nexport function ListPaneContent(props: ListPaneContentProps) {\n  const {childItemId, items, isActive, layout, showIcons, title} = props\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const getItemDisabled = useCallback(\n    (itemIndex: number) => {\n      return items?.find((_, i) => i === itemIndex)?.type === 'divider'\n    },\n    [items],\n  )\n\n  const shouldShowIconForItem = useCallback(\n    (item: PaneListItem): boolean => {\n      const itemShowIcon = item.displayOptions?.showIcon\n\n      // Specific true/false on item should have precedence over list setting\n      if (typeof itemShowIcon !== 'undefined') {\n        return itemShowIcon !== false // Boolean(item.icon)\n      }\n\n      // If no item setting is defined, defer to the pane settings\n      return showIcons !== false // Boolean(item.icon)\n    },\n    [showIcons],\n  )\n\n  const renderItem = useCallback(\n    (item: PaneListItem<unknown> | PaneListItemDivider, ctx: CommandListItemContext) => {\n      const {virtualIndex: itemIndex} = ctx\n\n      if (item.type === 'divider') {\n        return (\n          // eslint-disable-next-line react/no-array-index-key\n          <Box key={`divider-${itemIndex}`} marginTop={1} marginBottom={2}>\n            <Divider />\n          </Box>\n        )\n      }\n\n      const pressed = !isActive && childItemId === item.id\n      const selected = isActive && childItemId === item.id\n      // If this is a document list item, pass on the ID and type,\n      // otherwise leave it undefined to use the passed title and gang\n      const value =\n        item._id && item.schemaType\n          ? {_id: item._id, _type: item.schemaType.name, title: item.title}\n          : undefined\n\n      return (\n        <PaneItem\n          icon={shouldShowIconForItem(item) ? item.icon : false}\n          id={item.id}\n          key={item.id}\n          layout={layout}\n          marginBottom={1}\n          pressed={pressed}\n          schemaType={item.schemaType}\n          selected={selected}\n          title={item.title}\n          value={value}\n        />\n      )\n    },\n    [childItemId, isActive, layout, shouldShowIconForItem],\n  )\n\n  return (\n    <PaneContent overflow={layoutCollapsed ? 'hidden' : 'auto'}>\n      {items && items.length > 0 && (\n        <CommandList\n          activeItemDataAttr=\"data-hovered\"\n          ariaLabel={`List of ${title}`}\n          canReceiveFocus\n          focusRingOffset={-3}\n          getItemDisabled={getItemDisabled}\n          itemHeight={51}\n          items={items}\n          onlyShowSelectionWhenActive\n          padding={2}\n          paddingBottom={1}\n          renderItem={renderItem}\n          wrapAround={false}\n        />\n      )}\n    </PaneContent>\n  )\n}\n", "import React from 'react'\nimport {Card, Code} from '@sanity/ui'\nimport {Pane} from '../../components'\nimport {BaseDeskToolPaneProps} from '../types'\nimport {_DEBUG} from '../../constants'\nimport {ListPaneHeader} from './ListPaneHeader'\nimport {ListPaneContent} from './ListPaneContent'\n\ntype ListPaneProps = BaseDeskToolPaneProps<'list'>\n\n/**\n * @internal\n */\nexport function ListPane(props: ListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n\n  const {defaultLayout, displayOptions, items, menuItems, menuItemGroups, title} = pane\n  const showIcons = displayOptions?.showIcons !== false\n\n  return (\n    <Pane\n      currentMaxWidth={350}\n      data-testid=\"desk-tool-list-pane\"\n      data-ui=\"ListPane\"\n      id={paneKey}\n      maxWidth={640}\n      minWidth={320}\n      selected={isSelected}\n    >\n      {_DEBUG && (\n        <Card padding={4} tone=\"transparent\">\n          <Code>{pane.source || '(none)'}</Code>\n        </Card>\n      )}\n\n      <ListPaneHeader\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <ListPaneContent\n        childItemId={childItemId}\n        isActive={isActive}\n        items={items}\n        layout={defaultLayout}\n        key={paneKey}\n        showIcons={showIcons}\n        title={title}\n      />\n    </Pane>\n  )\n}\n"],
  "mappings": "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",
  "names": ["ListPaneHeader", "_ref", "index", "menuItems", "menuItemGroups", "title", "features", "useDeskTool", "collapsed", "isLast", "usePane", "tabIndex", "jsx", "PaneHeader", "actions", "PaneHeaderActions", "backButton", "Button", "as", "BackLink", "icon", "ArrowLeftIcon", "mode", "_a", "Divider", "styled", "hr", "__template", "ListPaneContent", "props", "childItemId", "items", "isActive", "layout", "showIcons", "layoutCollapsed", "usePaneLayout", "getItemDisabled", "useCallback", "itemIndex", "find", "_", "i", "type", "shouldShowIconForItem", "item", "itemShowIcon", "displayOptions", "showIcon", "renderItem", "ctx", "virtualIndex", "Box", "marginTop", "marginBottom", "children", "concat", "pressed", "id", "selected", "value", "_id", "schemaType", "_type", "name", "PaneItem", "PaneContent", "overflow", "length", "CommandList", "activeItemDataAttr", "ariaLabel", "canReceiveFocus", "focusRingOffset", "itemHeight", "onlyShowSelectionWhenActive", "padding", "paddingBottom", "wrapAround", "ListPane", "isSelected", "pane", "paneKey", "defaultLayout", "jsxs", "Pane", "currentMaxWidth", "maxWidth", "minWidth", "_DEBUG"]
}
