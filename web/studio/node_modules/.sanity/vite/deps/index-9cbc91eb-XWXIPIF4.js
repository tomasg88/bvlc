import {
  BackLink,
  Pane,
  PaneHeader,
  PaneHeaderActions,
  require_isNumber,
  useDeskTool,
  usePane
} from "./chunk-Y3U5344O.js";
import {
  ArrowLeftIcon,
  Box,
  Button,
  require_isString,
  require_omit,
  require_react_is,
  styled_components_browser_esm_default
} from "./chunk-O6KNGBUF.js";
import {
  require_jsx_runtime
} from "./chunk-W7O3NKM5.js";
import "./chunk-ZQMTLKGR.js";
import {
  require_react
} from "./chunk-Z7L3MLVS.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/sanity/lib/_chunks/index-9cbc91eb.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var import_react_is = __toESM(require_react_is());
var import_omit = __toESM(require_omit());
var import_isNumber = __toESM(require_isNumber());
var import_isString = __toESM(require_isString());
function UserComponentPaneHeader(props) {
  const {
    actionHandlers,
    index,
    menuItems,
    menuItemGroups,
    title
  } = props;
  const {
    features
  } = useDeskTool();
  if (!(menuItems == null ? void 0 : menuItems.length) && !title) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(PaneHeader, {
    actions: (0, import_jsx_runtime.jsx)(PaneHeaderActions, {
      menuItems,
      menuItemGroups,
      actionHandlers
    }),
    backButton: features.backButton && index > 0 && (0, import_jsx_runtime.jsx)(Button, {
      as: BackLink,
      "data-as": "a",
      icon: ArrowLeftIcon,
      mode: "bleed"
    }),
    title
  });
}
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a;
var Root = styled_components_browser_esm_default(Box)(_a || (_a = __template(["\n  position: relative;\n"])));
function UserComponentPaneContent(props) {
  const {
    children
  } = props;
  const {
    collapsed
  } = usePane();
  return (0, import_jsx_runtime.jsx)(Root, {
    hidden: collapsed,
    height: "fill",
    overflow: "auto",
    children
  });
}
function UserComponentPane(props) {
  const {
    index,
    pane,
    paneKey,
    ...restProps
  } = props;
  const {
    child,
    component,
    menuItems,
    menuItemGroups,
    title = "",
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    type: _unused,
    ...restPane
  } = pane;
  const [ref, setRef] = (0, import_react.useState)(null);
  return (0, import_jsx_runtime.jsxs)(Pane, {
    id: paneKey,
    minWidth: 320,
    selected: restProps.isSelected,
    children: [(0, import_jsx_runtime.jsx)(UserComponentPaneHeader, {
      actionHandlers: ref == null ? void 0 : ref.actionHandlers,
      index,
      menuItems,
      menuItemGroups,
      title
    }), (0, import_jsx_runtime.jsxs)(UserComponentPaneContent, {
      children: [(0, import_react_is.isValidElementType)(component) && (0, import_react.createElement)(component, {
        ...restProps,
        ...restPane,
        // NOTE: here we're utilizing the function form of refs so setting
        // the ref causes a re-render for `UserComponentPaneHeader`
        ...{
          ref: setRef
        },
        child,
        // @todo: Fix typings
        paneKey
      }), (0, import_react.isValidElement)(component) && component]
    })]
  });
}
export {
  UserComponentPane as default
};
//# sourceMappingURL=index-9cbc91eb-XWXIPIF4.js.map
