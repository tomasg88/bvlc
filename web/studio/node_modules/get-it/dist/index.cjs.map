{"version":3,"file":"index.cjs","sources":["../src/util/middlewareReducer.ts","../src/util/pubsub.ts","../src/createRequester.ts","../src/util/lowerCaseHeaders.ts","../src/request/node/proxy.ts","../src/request/node/simpleConcat.ts","../src/request/node/timedOut.ts","../src/request/node/tunnel.ts","../src/request/node-request.ts","../src/index.ts"],"sourcesContent":["import type {ApplyMiddleware, MiddlewareReducer} from '../types'\n\nexport const middlewareReducer = (middleware: MiddlewareReducer) =>\n  function applyMiddleware(hook, defaultValue, ...args) {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      // @ts-expect-error -- find a better way to deal with argument tuples\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  } as ApplyMiddleware\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nimport type {PubSub, Subscriber} from '../types'\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {\n  HttpContext,\n  HttpRequest,\n  HttpRequestOngoing,\n  Middleware,\n  MiddlewareChannels,\n  MiddlewareHooks,\n  MiddlewareReducer,\n  MiddlewareResponse,\n  Middlewares,\n  Requester,\n  RequestOptions,\n} from './types'\nimport {middlewareReducer} from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = [\n  'request',\n  'response',\n  'progress',\n  'error',\n  'abort',\n] satisfies (keyof MiddlewareChannels)[]\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n] satisfies (keyof MiddlewareHooks)[]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: Middlewares = []\n  const middleware: MiddlewareReducer = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    } as any,\n  )\n\n  function request(opts: RequestOptions | string) {\n    const onResponse = (reqErr: Error | null, res: MiddlewareResponse, ctx: HttpContext) => {\n      let error = reqErr\n      let response: MiddlewareResponse | null = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err: any) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n\n    const channels: MiddlewareChannels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub() as MiddlewareChannels[typeof name]\n      return target\n    }, {} as any)\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts as RequestOptions)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: HttpRequestOngoing | undefined\n    const unsubscribe = channels.request.subscribe((ctx) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res!, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.',\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event',\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key] as any)\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = () => createRequester(loadedMiddleware, httpRequest)\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","export function lowerCaseHeaders(headers: any) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {} as any)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Apache License 2.0\n */\n\nimport url from 'url'\n\nfunction formatHostname(hostname: string) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zoneStr: string) {\n  const zone = zoneStr.trim().toLowerCase()\n\n  const zoneParts = zone.split(':', 2)\n  const zoneHost = formatHostname(zoneParts[0])\n  const zonePort = zoneParts[1]\n  const hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri: any, noProxy: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  const hostname = formatHostname(uri.hostname)\n  const noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some((noProxyZone: any) => {\n    const isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    const hostnameMatched =\n      isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromUri(uri: any) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  const noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment, else default to null\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return (\n      process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy ||\n      null\n    )\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n  return null\n}\n\nfunction getHostFromUri(uri: any) {\n  let host = uri.host\n\n  // Drop :port suffix from Host header if known protocol.\n  if (uri.port) {\n    if (\n      (uri.port === '80' && uri.protocol === 'http:') ||\n      (uri.port === '443' && uri.protocol === 'https:')\n    ) {\n      host = uri.hostname\n    }\n  }\n\n  return host\n}\n\nfunction getHostHeaderWithPort(uri: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  return `${uri.hostname}:${port}`\n}\n\nexport function rewriteUriForProxy(reqOpts: any, uri: any, proxy: any) {\n  const headers = reqOpts.headers || {}\n  const options = Object.assign({}, reqOpts, {headers})\n  headers.host = headers.host || getHostHeaderWithPort(uri)\n  options.protocol = proxy.protocol || options.protocol\n  options.hostname = proxy.host.replace(/:\\d+/, '')\n  options.port = proxy.port\n  options.host = getHostFromUri(Object.assign({}, uri, proxy))\n  options.href = `${options.protocol}//${options.host}${options.path}`\n  options.path = url.format(uri)\n  return options\n}\n\nexport function getProxyOptions(options: any) {\n  let proxy\n  // eslint-disable-next-line no-prototype-builtins\n  if (options.hasOwnProperty('proxy')) {\n    proxy = options.proxy\n  } else {\n    const uri = url.parse(options.url)\n    proxy = getProxyFromUri(uri)\n  }\n\n  return typeof proxy === 'string' ? url.parse(proxy) : proxy\n}\n","/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexport function concat(stream: any, cb: any) {\n  const chunks: any = []\n  stream.on('data', function (chunk: any) {\n    chunks.push(chunk)\n  })\n  stream.once('end', function () {\n    if (cb) cb(null, Buffer.concat(chunks))\n    cb = null\n  })\n  stream.once('error', function (err: any) {\n    if (cb) cb(err)\n    cb = null\n  })\n}\n","// Copied from `@sanity/timed-out`\n\nexport function timedOut(req: any, time: any) {\n  if (req.timeoutTimer) {\n    return req\n  }\n\n  const delays = isNaN(time) ? time : {socket: time, connect: time}\n  const hostHeader = req.getHeader('host')\n  const host = hostHeader ? ' to ' + hostHeader : ''\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      req.abort()\n      const e: any = new Error('Connection timed out on request' + host)\n      e.code = 'ETIMEDOUT'\n      req.emit('error', e)\n    }, delays.connect)\n  }\n\n  // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n  req.on('socket', function assign(socket: any) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!(socket.connecting || socket._connecting)) {\n      connect()\n      return\n    }\n\n    socket.once('connect', connect)\n  })\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer)\n      req.timeoutTimer = null\n    }\n  }\n\n  function connect() {\n    clear()\n\n    if (delays.socket !== undefined) {\n      // Abort the request if there is no activity on the socket for more\n      // than `delays.socket` milliseconds.\n      req.setTimeout(delays.socket, function socketTimeoutHandler() {\n        req.abort()\n        const e: any = new Error('Socket timed out on request' + host)\n        e.code = 'ESOCKETTIMEDOUT'\n        req.emit('error', e)\n      })\n    }\n  }\n\n  return req.on('error', clear)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nimport * as tunnel from 'tunnel-agent'\nimport url from 'url'\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href',\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via',\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexport function shouldEnable(options: any) {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexport function applyAgent(opts: any = {}, proxy: any) {\n  const options = Object.assign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map((header) => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map((header) => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {} as any)\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options: any, proxy: any) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options: any) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {} as any)\n}\n\ntype UriProtocol = `http` | `https`\ntype ProxyProtocol = `Http` | `Https`\nfunction constructTunnelFnName(uri: any, proxy: any): `${UriProtocol}Over${ProxyProtocol}` {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return `${uriProtocol}Over${proxyProtocol}`\n}\n\nfunction constructProxyHost(uri: any) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers: any, whiteList: any): any {\n  return Object.keys(headers)\n    .filter((header) => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set: any, header: any) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options: any, proxy: any, proxyHeaders: any) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders,\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol,\n  }\n}\n","import decompressResponse from 'decompress-response'\nimport follow, {type FollowResponse, type RedirectableRequest} from 'follow-redirects'\nimport http from 'http'\nimport https from 'https'\nimport toStream from 'into-stream'\nimport isStream from 'is-stream'\nimport progressStream from 'progress-stream'\nimport qs from 'querystring'\nimport url from 'url'\n\nimport type {\n  FinalizeNodeOptionsPayload,\n  HttpRequest,\n  MiddlewareResponse,\n  RequestAdapter,\n} from '../types'\nimport {lowerCaseHeaders} from '../util/lowerCaseHeaders'\nimport {getProxyOptions, rewriteUriForProxy} from './node/proxy'\nimport {concat} from './node/simpleConcat'\nimport {timedOut} from './node/timedOut'\nimport * as tunneling from './node/tunnel'\n\n/** @public */\nexport const adapter: RequestAdapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (\n  res: any,\n  reqUrl: string,\n  method: string,\n  body: any,\n): MiddlewareResponse => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nexport const httpRequester: HttpRequest = (context, cb) => {\n  const {options} = context\n  const uri = Object.assign({}, url.parse(options.url))\n\n  if (typeof fetch === 'function' && options.fetch) {\n    const controller = new AbortController()\n    const reqOpts = context.applyMiddleware('finalizeOptions', {\n      ...uri,\n      method: options.method,\n      headers: {\n        ...(typeof options.fetch === 'object' && options.fetch.headers\n          ? lowerCaseHeaders(options.fetch.headers)\n          : {}),\n        ...lowerCaseHeaders(options.headers),\n      },\n      maxRedirects: options.maxRedirects,\n    }) as FinalizeNodeOptionsPayload\n    const fetchOpts = {\n      credentials: options.withCredentials ? 'include' : 'omit',\n      ...(typeof options.fetch === 'object' ? options.fetch : {}),\n      method: reqOpts.method,\n      headers: reqOpts.headers,\n      body: options.body,\n      signal: controller.signal,\n    } satisfies RequestInit\n\n    // Allow middleware to inject a response, for instance in the case of caching or mocking\n    const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n      adapter,\n      context,\n    })\n\n    // If middleware injected a response, treat it as we normally would and return it\n    // Do note that the injected response has to be reduced to a cross-environment friendly response\n    if (injectedResponse) {\n      const cbTimer = setTimeout(cb, 0, null, injectedResponse)\n      const cancel = () => clearTimeout(cbTimer)\n      return {abort: cancel}\n    }\n\n    const request = fetch(options.url, fetchOpts)\n\n    // Let middleware know we're about to do a request\n    context.applyMiddleware('onRequest', {options, adapter, request, context})\n\n    request\n      .then(async (res) => {\n        const body = options.rawBody ? res.body : await res.text()\n\n        const headers = {} as Record<string, string>\n        res.headers.forEach((value, key) => {\n          headers[key] = value\n        })\n\n        cb(null, {\n          body,\n          url: res.url,\n          method: options.method!,\n          headers,\n          statusCode: res.status,\n          statusMessage: res.statusText,\n        })\n      })\n      .catch((err) => {\n        if (err.name == 'AbortError') return\n        cb(err)\n      })\n\n    return {abort: () => controller.abort()}\n  }\n\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader: any = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err: Error | null, res?: MiddlewareResponse) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts: any = Object.assign({}, uri, {\n    method: options.method,\n    headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects,\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map((item: any) => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`,\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] = 'br, gzip, deflate'\n  }\n\n  const finalOptions = context.applyMiddleware(\n    'finalizeOptions',\n    reqOpts,\n  ) as FinalizeNodeOptionsPayload\n  const request = transport.request(finalOptions, (response) => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context,\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = 'responseUrl' in response ? response.responseUrl : options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err: any, data: any) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options: any) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(\n  reqOpts: any,\n  proxy: any,\n  tunnel: any,\n): {\n  request: (\n    options: any,\n    callback: (response: http.IncomingMessage | (http.IncomingMessage & FollowResponse)) => void,\n  ) => http.ClientRequest | RedirectableRequest<http.ClientRequest, http.IncomingMessage>\n} {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n\n// function isFile(val: any): val is File {\n//   return typeof val === 'object' && val?.[Symbol.toStringTag] === 'File'\n// }\n\n// function isBlob(val: any): val is Blob {\n//   return typeof val === 'object' && val?.[Symbol.toStringTag] === 'Blob'\n// }\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/node-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester,\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'node'\n\n/** @public */\nexport {adapter} from './request/node-request'\n"],"names":["middlewareReducer","middleware","applyMiddleware","hook","defaultValue","bailEarly","value","_len","arguments","length","args","Array","_key","i","handler","createPubSub","subscribers","Object","create","nextId","subscribe","subscriber","id","unsubscribe","publish","event","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","loadedMiddleware","reduce","ware","name","processOptions","validateOptions","request","opts","onResponse","reqErr","res","ctx","error","response","err","channels","target","options","context","ongoingRequest","abort","returnValue","use","newMiddleware","Error","onReturn","forEach","key","push","clone","lowerCaseHeaders","headers","keys","acc","header","toLowerCase","formatHostname","hostname","replace","parseNoProxyZone","zoneStr","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","getProxyFromUri","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","getHostFromUri","host","getHostHeaderWithPort","concat","rewriteUriForProxy","reqOpts","proxy","assign","href","path","url","format","getProxyOptions","hasOwnProperty","default","parse","stream","cb","chunks","on","chunk","once","Buffer","timedOut","req","time","timeoutTimer","delays","isNaN","socket","connect","hostHeader","getHeader","setTimeout","timeoutHandler","e","code","emit","connecting","_connecting","clear","clearTimeout","socketTimeoutHandler","uriParts","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","shouldEnable","tunnel","Boolean","applyAgent","undefined","proxyHeaderWhiteList","proxyHeaderExclusiveList","proxyHeaders","getAllowedProxyHeaders","constructProxyHost","isAllowed","tunnelFn","getTunnelFn","tunnelOptions","constructTunnelOptions","agent","getUriParts","tunnelFnName","constructTunnelFnName","part","uriProtocol","proxyProtocol","proxyHost","whiteList","filter","set","proxyAuth","auth","ca","cert","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","adapter","reduceResponse","reqUrl","method","body","statusCode","statusMessage","httpRequester","fetch","controller","AbortController","maxRedirects","fetchOpts","credentials","withCredentials","signal","injectedResponse","cbTimer","cancel","then","rawBody","text","status","statusText","catch","bodyType","isStream","isBuffer","lengthHeader","bodySize","byteLength","aborted","callback","tunneling.shouldEnable","setImmediate","clearImmediate","tunneling.applyAgent","username","password","item","qs","unescape","from","authBase64","toString","transport","getRequestTransport","debug","tryCompressed","compress","finalOptions","decompressResponse","resStream","responseUrl","data","reduced","timeout","bodyStream","progress","getProgressStream","pipe","end","bodyIsStream","progressStream","toStream","isHttpsRequest","transports","http","https","follow","isHttpsProxy","test","getIt","environment"],"mappings":"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"}