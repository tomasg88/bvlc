{"version":3,"file":"index.js","sources":["../src/util/lowerCaseHeaders.ts","../src/request/node/proxy.ts","../src/request/node/simpleConcat.ts","../src/request/node/timedOut.ts","../src/request/node/tunnel.ts","../src/request/node-request.ts","../src/index.ts"],"sourcesContent":["export function lowerCaseHeaders(headers: any) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {} as any)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Apache License 2.0\n */\n\nimport url from 'url'\n\nfunction formatHostname(hostname: string) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zoneStr: string) {\n  const zone = zoneStr.trim().toLowerCase()\n\n  const zoneParts = zone.split(':', 2)\n  const zoneHost = formatHostname(zoneParts[0])\n  const zonePort = zoneParts[1]\n  const hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri: any, noProxy: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  const hostname = formatHostname(uri.hostname)\n  const noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some((noProxyZone: any) => {\n    const isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    const hostnameMatched =\n      isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromUri(uri: any) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  const noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment, else default to null\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return (\n      process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy ||\n      null\n    )\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n  return null\n}\n\nfunction getHostFromUri(uri: any) {\n  let host = uri.host\n\n  // Drop :port suffix from Host header if known protocol.\n  if (uri.port) {\n    if (\n      (uri.port === '80' && uri.protocol === 'http:') ||\n      (uri.port === '443' && uri.protocol === 'https:')\n    ) {\n      host = uri.hostname\n    }\n  }\n\n  return host\n}\n\nfunction getHostHeaderWithPort(uri: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  return `${uri.hostname}:${port}`\n}\n\nexport function rewriteUriForProxy(reqOpts: any, uri: any, proxy: any) {\n  const headers = reqOpts.headers || {}\n  const options = Object.assign({}, reqOpts, {headers})\n  headers.host = headers.host || getHostHeaderWithPort(uri)\n  options.protocol = proxy.protocol || options.protocol\n  options.hostname = proxy.host.replace(/:\\d+/, '')\n  options.port = proxy.port\n  options.host = getHostFromUri(Object.assign({}, uri, proxy))\n  options.href = `${options.protocol}//${options.host}${options.path}`\n  options.path = url.format(uri)\n  return options\n}\n\nexport function getProxyOptions(options: any) {\n  let proxy\n  // eslint-disable-next-line no-prototype-builtins\n  if (options.hasOwnProperty('proxy')) {\n    proxy = options.proxy\n  } else {\n    const uri = url.parse(options.url)\n    proxy = getProxyFromUri(uri)\n  }\n\n  return typeof proxy === 'string' ? url.parse(proxy) : proxy\n}\n","/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexport function concat(stream: any, cb: any) {\n  const chunks: any = []\n  stream.on('data', function (chunk: any) {\n    chunks.push(chunk)\n  })\n  stream.once('end', function () {\n    if (cb) cb(null, Buffer.concat(chunks))\n    cb = null\n  })\n  stream.once('error', function (err: any) {\n    if (cb) cb(err)\n    cb = null\n  })\n}\n","// Copied from `@sanity/timed-out`\n\nexport function timedOut(req: any, time: any) {\n  if (req.timeoutTimer) {\n    return req\n  }\n\n  const delays = isNaN(time) ? time : {socket: time, connect: time}\n  const hostHeader = req.getHeader('host')\n  const host = hostHeader ? ' to ' + hostHeader : ''\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      req.abort()\n      const e: any = new Error('Connection timed out on request' + host)\n      e.code = 'ETIMEDOUT'\n      req.emit('error', e)\n    }, delays.connect)\n  }\n\n  // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n  req.on('socket', function assign(socket: any) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!(socket.connecting || socket._connecting)) {\n      connect()\n      return\n    }\n\n    socket.once('connect', connect)\n  })\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer)\n      req.timeoutTimer = null\n    }\n  }\n\n  function connect() {\n    clear()\n\n    if (delays.socket !== undefined) {\n      // Abort the request if there is no activity on the socket for more\n      // than `delays.socket` milliseconds.\n      req.setTimeout(delays.socket, function socketTimeoutHandler() {\n        req.abort()\n        const e: any = new Error('Socket timed out on request' + host)\n        e.code = 'ESOCKETTIMEDOUT'\n        req.emit('error', e)\n      })\n    }\n  }\n\n  return req.on('error', clear)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nimport * as tunnel from 'tunnel-agent'\nimport url from 'url'\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href',\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via',\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexport function shouldEnable(options: any) {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexport function applyAgent(opts: any = {}, proxy: any) {\n  const options = Object.assign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map((header) => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map((header) => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {} as any)\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options: any, proxy: any) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options: any) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {} as any)\n}\n\ntype UriProtocol = `http` | `https`\ntype ProxyProtocol = `Http` | `Https`\nfunction constructTunnelFnName(uri: any, proxy: any): `${UriProtocol}Over${ProxyProtocol}` {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return `${uriProtocol}Over${proxyProtocol}`\n}\n\nfunction constructProxyHost(uri: any) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers: any, whiteList: any): any {\n  return Object.keys(headers)\n    .filter((header) => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set: any, header: any) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options: any, proxy: any, proxyHeaders: any) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders,\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol,\n  }\n}\n","import decompressResponse from 'decompress-response'\nimport follow, {type FollowResponse, type RedirectableRequest} from 'follow-redirects'\nimport http from 'http'\nimport https from 'https'\nimport toStream from 'into-stream'\nimport isStream from 'is-stream'\nimport progressStream from 'progress-stream'\nimport qs from 'querystring'\nimport url from 'url'\n\nimport type {\n  FinalizeNodeOptionsPayload,\n  HttpRequest,\n  MiddlewareResponse,\n  RequestAdapter,\n} from '../types'\nimport {lowerCaseHeaders} from '../util/lowerCaseHeaders'\nimport {getProxyOptions, rewriteUriForProxy} from './node/proxy'\nimport {concat} from './node/simpleConcat'\nimport {timedOut} from './node/timedOut'\nimport * as tunneling from './node/tunnel'\n\n/** @public */\nexport const adapter: RequestAdapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (\n  res: any,\n  reqUrl: string,\n  method: string,\n  body: any,\n): MiddlewareResponse => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nexport const httpRequester: HttpRequest = (context, cb) => {\n  const {options} = context\n  const uri = Object.assign({}, url.parse(options.url))\n\n  if (typeof fetch === 'function' && options.fetch) {\n    const controller = new AbortController()\n    const reqOpts = context.applyMiddleware('finalizeOptions', {\n      ...uri,\n      method: options.method,\n      headers: {\n        ...(typeof options.fetch === 'object' && options.fetch.headers\n          ? lowerCaseHeaders(options.fetch.headers)\n          : {}),\n        ...lowerCaseHeaders(options.headers),\n      },\n      maxRedirects: options.maxRedirects,\n    }) as FinalizeNodeOptionsPayload\n    const fetchOpts = {\n      credentials: options.withCredentials ? 'include' : 'omit',\n      ...(typeof options.fetch === 'object' ? options.fetch : {}),\n      method: reqOpts.method,\n      headers: reqOpts.headers,\n      body: options.body,\n      signal: controller.signal,\n    } satisfies RequestInit\n\n    // Allow middleware to inject a response, for instance in the case of caching or mocking\n    const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n      adapter,\n      context,\n    })\n\n    // If middleware injected a response, treat it as we normally would and return it\n    // Do note that the injected response has to be reduced to a cross-environment friendly response\n    if (injectedResponse) {\n      const cbTimer = setTimeout(cb, 0, null, injectedResponse)\n      const cancel = () => clearTimeout(cbTimer)\n      return {abort: cancel}\n    }\n\n    const request = fetch(options.url, fetchOpts)\n\n    // Let middleware know we're about to do a request\n    context.applyMiddleware('onRequest', {options, adapter, request, context})\n\n    request\n      .then(async (res) => {\n        const body = options.rawBody ? res.body : await res.text()\n\n        const headers = {} as Record<string, string>\n        res.headers.forEach((value, key) => {\n          headers[key] = value\n        })\n\n        cb(null, {\n          body,\n          url: res.url,\n          method: options.method!,\n          headers,\n          statusCode: res.status,\n          statusMessage: res.statusText,\n        })\n      })\n      .catch((err) => {\n        if (err.name == 'AbortError') return\n        cb(err)\n      })\n\n    return {abort: () => controller.abort()}\n  }\n\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader: any = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err: Error | null, res?: MiddlewareResponse) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts: any = Object.assign({}, uri, {\n    method: options.method,\n    headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects,\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map((item: any) => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`,\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] = 'br, gzip, deflate'\n  }\n\n  const finalOptions = context.applyMiddleware(\n    'finalizeOptions',\n    reqOpts,\n  ) as FinalizeNodeOptionsPayload\n  const request = transport.request(finalOptions, (response) => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context,\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = 'responseUrl' in response ? response.responseUrl : options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err: any, data: any) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options: any) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(\n  reqOpts: any,\n  proxy: any,\n  tunnel: any,\n): {\n  request: (\n    options: any,\n    callback: (response: http.IncomingMessage | (http.IncomingMessage & FollowResponse)) => void,\n  ) => http.ClientRequest | RedirectableRequest<http.ClientRequest, http.IncomingMessage>\n} {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n\n// function isFile(val: any): val is File {\n//   return typeof val === 'object' && val?.[Symbol.toStringTag] === 'File'\n// }\n\n// function isBlob(val: any): val is Blob {\n//   return typeof val === 'object' && val?.[Symbol.toStringTag] === 'Blob'\n// }\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/node-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester,\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'node'\n\n/** @public */\nexport {adapter} from './request/node-request'\n"],"names":["lowerCaseHeaders","headers","Object","keys","reduce","acc","header","toLowerCase","formatHostname","hostname","replace","parseNoProxyZone","zoneStr","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","length","getProxyFromUri","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","getHostFromUri","host","getHostHeaderWithPort","concat","rewriteUriForProxy","reqOpts","proxy","options","assign","href","path","url","format","getProxyOptions","hasOwnProperty","parse","stream","cb","chunks","on","chunk","push","once","Buffer","err","timedOut","req","time","timeoutTimer","delays","isNaN","socket","connect","hostHeader","getHeader","setTimeout","timeoutHandler","abort","e","Error","code","emit","connecting","_connecting","clear","clearTimeout","socketTimeoutHandler","uriParts","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","shouldEnable","tunnel","Boolean","applyAgent","opts","arguments","undefined","proxyHeaderWhiteList","proxyHeaderExclusiveList","proxyHeaders","getAllowedProxyHeaders","constructProxyHost","isAllowed","tunnelFn","getTunnelFn","tunnelOptions","constructTunnelOptions","agent","getUriParts","tunnelFnName","constructTunnelFnName","part","uriProtocol","proxyProtocol","proxyHost","whiteList","filter","set","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","adapter","reduceResponse","res","reqUrl","method","body","statusCode","statusMessage","httpRequester","context","fetch","controller","AbortController","applyMiddleware","maxRedirects","fetchOpts","credentials","withCredentials","signal","injectedResponse","cbTimer","cancel","request","then","rawBody","text","forEach","value","status","statusText","catch","name","bodyType","isStream","isBuffer","lengthHeader","bodySize","byteLength","aborted","callback","channels","subscribe","tunneling.shouldEnable","setImmediate","clearImmediate","tunneling.applyAgent","username","password","item","qs","unescape","from","authBase64","toString","transport","getRequestTransport","debug","tryCompressed","compress","finalOptions","response","decompressResponse","resStream","responseUrl","data","reduced","timeout","bodyStream","progress","getProgressStream","pipe","end","bodyIsStream","progressStream","toStream","isHttpsRequest","transports","http","https","follow","isHttpsProxy","test","getIt","initMiddleware","httpRequest","createRequester","environment"],"mappings":"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"}