{"version":3,"file":"index.browser.cjs","sources":["../src/util/middlewareReducer.ts","../src/util/pubsub.ts","../src/createRequester.ts","../src/request/browser/fetchXhr.ts","../src/request/browser-request.ts","../src/index.browser.ts"],"sourcesContent":["import type {ApplyMiddleware, MiddlewareReducer} from '../types'\n\nexport const middlewareReducer = (middleware: MiddlewareReducer) =>\n  function applyMiddleware(hook, defaultValue, ...args) {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      // @ts-expect-error -- find a better way to deal with argument tuples\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  } as ApplyMiddleware\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nimport type {PubSub, Subscriber} from '../types'\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {\n  HttpContext,\n  HttpRequest,\n  HttpRequestOngoing,\n  Middleware,\n  MiddlewareChannels,\n  MiddlewareHooks,\n  MiddlewareReducer,\n  MiddlewareResponse,\n  Middlewares,\n  Requester,\n  RequestOptions,\n} from './types'\nimport {middlewareReducer} from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = [\n  'request',\n  'response',\n  'progress',\n  'error',\n  'abort',\n] satisfies (keyof MiddlewareChannels)[]\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n] satisfies (keyof MiddlewareHooks)[]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: Middlewares = []\n  const middleware: MiddlewareReducer = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    } as any,\n  )\n\n  function request(opts: RequestOptions | string) {\n    const onResponse = (reqErr: Error | null, res: MiddlewareResponse, ctx: HttpContext) => {\n      let error = reqErr\n      let response: MiddlewareResponse | null = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err: any) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n\n    const channels: MiddlewareChannels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub() as MiddlewareChannels[typeof name]\n      return target\n    }, {} as any)\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts as RequestOptions)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: HttpRequestOngoing | undefined\n    const unsubscribe = channels.request.subscribe((ctx) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res!, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.',\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event',\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key] as any)\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = () => createRequester(loadedMiddleware, httpRequest)\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nexport class FetchXhr\n  implements Pick<XMLHttpRequest, 'open' | 'abort' | 'getAllResponseHeaders' | 'setRequestHeader'>\n{\n  /**\n   * Public interface, interop with real XMLHttpRequest\n   */\n  onabort: () => void\n  onerror: (error?: any) => void\n  onreadystatechange: () => void\n  ontimeout: XMLHttpRequest['ontimeout']\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n   */\n  readyState: 0 | 1 | 2 | 3 | 4 = 0\n  response: XMLHttpRequest['response']\n  responseText: XMLHttpRequest['responseText']\n  responseType: XMLHttpRequest['responseType'] = ''\n  status: XMLHttpRequest['status']\n  statusText: XMLHttpRequest['statusText']\n  withCredentials: XMLHttpRequest['withCredentials']\n\n  /**\n   * Private implementation details\n   */\n  #method: string\n  #url: string\n  #resHeaders: string\n  #headers: Record<string, string> = {}\n  #controller?: AbortController\n  #init: RequestInit = {}\n  #useAbortSignal: boolean\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method: string, url: string, _async?: boolean) {\n    this.#method = method\n    this.#url = url\n    this.#resHeaders = ''\n    this.readyState = 1 // Open\n    this.onreadystatechange()\n    this.#controller = undefined\n  }\n  abort() {\n    if (this.#controller) {\n      this.#controller.abort()\n    }\n  }\n  getAllResponseHeaders() {\n    return this.#resHeaders\n  }\n  setRequestHeader(name: string, value: string) {\n    this.#headers[name] = value\n  }\n  // Allow setting extra fetch init options, needed for runtimes such as Vercel Edge to set `cache` and other options in React Server Components\n  setInit(init: RequestInit, useAbortSignal = true) {\n    this.#init = init\n    this.#useAbortSignal = useAbortSignal\n  }\n  send(body: BodyInit) {\n    const textBody = this.responseType !== 'arraybuffer'\n    const options: RequestInit = {\n      ...this.#init,\n      method: this.#method,\n      headers: this.#headers,\n      body,\n    }\n    if (typeof AbortController === 'function' && this.#useAbortSignal) {\n      this.#controller = new AbortController()\n      // The instanceof check ensures environments like Edge Runtime, Node 18 with built-in fetch\n      // and more don't throw if `signal` doesn't implement`EventTarget`\n      // Native browser AbortSignal implements EventTarget, so we can use it\n      if (typeof EventTarget !== 'undefined' && this.#controller.signal instanceof EventTarget) {\n        options.signal = this.#controller.signal\n      }\n    }\n\n    // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a document check :/\n    if (typeof document !== 'undefined') {\n      options.credentials = this.withCredentials ? 'include' : 'omit'\n    }\n\n    fetch(this.#url, options)\n      .then((res): Promise<string | ArrayBuffer> => {\n        res.headers.forEach((value: any, key: any) => {\n          this.#resHeaders += `${key}: ${value}\\r\\n`\n        })\n        this.status = res.status\n        this.statusText = res.statusText\n        this.readyState = 3 // Loading\n        return textBody ? res.text() : res.arrayBuffer()\n      })\n      .then((resBody) => {\n        if (typeof resBody === 'string') {\n          this.responseText = resBody\n        } else {\n          this.response = resBody\n        }\n        this.readyState = 4 // Done\n        this.onreadystatechange()\n      })\n      .catch((err: Error) => {\n        if (err.name === 'AbortError') {\n          this.onabort()\n          return\n        }\n\n        this.onerror?.(err)\n      })\n  }\n}\n","import parseHeaders from 'parse-headers'\n\nimport type {HttpRequest, MiddlewareResponse, RequestAdapter, RequestOptions} from '../types'\nimport {FetchXhr} from './browser/fetchXhr'\n\n// Use fetch if it's available, non-browser environments such as Deno, Edge Runtime and more provide fetch as a global but doesn't provide xhr\nexport const adapter: RequestAdapter = typeof XMLHttpRequest === 'function' ? 'xhr' : 'fetch'\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nconst XmlHttpRequest = adapter === 'xhr' ? XMLHttpRequest : FetchXhr\n\nexport const httpRequester: HttpRequest = (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts) as RequestOptions\n  const timers: any = {}\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = new XmlHttpRequest()\n\n  if (xhr instanceof FetchXhr && typeof options.fetch === 'object') {\n    xhr.setInit(options.fetch, options.useAbortSignal ?? true)\n  }\n\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request error while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`,\n      ),\n    )\n  }\n  xhr.ontimeout = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request timeout while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`,\n      ),\n    )\n  }\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  xhr.onreadystatechange = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || xhr.readyState !== 4) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method!,\n    options.url,\n    true, // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code: any) {\n    timedOut = true\n    xhr.abort()\n    const error: any = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`,\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force?: boolean) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error: Error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    ;(xhr as any) = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = (error ||\n      new Error(`Network error while attempting to reach ${options.url}`)) as Error & {\n      isNetworkError: boolean\n      request?: typeof options\n    }\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse(): MiddlewareResponse {\n    return {\n      body:\n        xhr.response ||\n        (xhr.responseType === '' || xhr.responseType === 'text' ? xhr.responseText : ''),\n      url: options.url,\n      method: options.method!,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/browser-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester,\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'browser'\n\n/** @public */\nexport {adapter} from './request/browser-request'\n"],"names":["middlewareReducer","middleware","applyMiddleware","hook","defaultValue","bailEarly","value","_len","arguments","length","args","Array","_key","i","handler","createPubSub","subscribers","Object","create","nextId","subscribe","subscriber","id","unsubscribe","publish","event","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","loadedMiddleware","reduce","ware","name","processOptions","validateOptions","request","opts","onResponse","reqErr","res","ctx","error","response","err","channels","target","options","context","ongoingRequest","abort","returnValue","use","newMiddleware","Error","onReturn","forEach","key","push","clone","_method","_url","_resHeaders","_headers","_controller","_init","_useAbortSignal","FetchXhr","constructor","readyState","responseType","__privateAdd","open","method","url","_async","__privateSet","onreadystatechange","__privateGet","getAllResponseHeaders","setRequestHeader","setInit","init","useAbortSignal","undefined","send","body","textBody","headers","AbortController","EventTarget","signal","document","credentials","withCredentials","fetch","then","concat","status","statusText","text","arrayBuffer","resBody","responseText","catch","_a","onabort","onerror","call","WeakMap","adapter","XMLHttpRequest","XmlHttpRequest","httpRequester","callback","timers","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","xhr","delays","timeout","aborted","loaded","timedOut","onError","lengthComputable","total","ontimeout","stopTimers","resetTimers","onLoad","hasOwnProperty","rawBody","connect","timeoutRequest","code","socket","force","isNetworkError","reduceResponse","parseHeaders","default","statusCode","statusMessage","getIt","environment"],"mappings":"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"}