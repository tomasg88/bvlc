{"version":3,"file":"createRequester-ryeXkh0z.js","sources":["../../src/util/middlewareReducer.ts","../../src/util/pubsub.ts","../../src/createRequester.ts"],"sourcesContent":["import type {ApplyMiddleware, MiddlewareReducer} from '../types'\n\nexport const middlewareReducer = (middleware: MiddlewareReducer) =>\n  function applyMiddleware(hook, defaultValue, ...args) {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      // @ts-expect-error -- find a better way to deal with argument tuples\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  } as ApplyMiddleware\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nimport type {PubSub, Subscriber} from '../types'\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {\n  HttpContext,\n  HttpRequest,\n  HttpRequestOngoing,\n  Middleware,\n  MiddlewareChannels,\n  MiddlewareHooks,\n  MiddlewareReducer,\n  MiddlewareResponse,\n  Middlewares,\n  Requester,\n  RequestOptions,\n} from './types'\nimport {middlewareReducer} from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = [\n  'request',\n  'response',\n  'progress',\n  'error',\n  'abort',\n] satisfies (keyof MiddlewareChannels)[]\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n] satisfies (keyof MiddlewareHooks)[]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: Middlewares = []\n  const middleware: MiddlewareReducer = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    } as any,\n  )\n\n  function request(opts: RequestOptions | string) {\n    const onResponse = (reqErr: Error | null, res: MiddlewareResponse, ctx: HttpContext) => {\n      let error = reqErr\n      let response: MiddlewareResponse | null = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err: any) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n\n    const channels: MiddlewareChannels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub() as MiddlewareChannels[typeof name]\n      return target\n    }, {} as any)\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts as RequestOptions)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: HttpRequestOngoing | undefined\n    const unsubscribe = channels.request.subscribe((ctx) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res!, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.',\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event',\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key] as any)\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = () => createRequester(loadedMiddleware, httpRequest)\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"],"names":["middlewareReducer","middleware","applyMiddleware","hook","defaultValue","bailEarly","value","_len","arguments","length","args","Array","_key","i","handler","createPubSub","subscribers","Object","create","nextId","subscribe","subscriber","id","unsubscribe","publish","event","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","loadedMiddleware","reduce","ware","name","processOptions","validateOptions","request","opts","onResponse","reqErr","res","ctx","error","response","err","channels","target","options","context","ongoingRequest","abort","returnValue","use","newMiddleware","Error","onReturn","forEach","key","push","clone"],"mappings":"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"}